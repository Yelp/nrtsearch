// Description of analyzers, predefined and custom

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.4
// source: yelp/nrtsearch/analysis.proto

package luceneserver

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NameAndParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Params map[string]string `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NameAndParams) Reset() {
	*x = NameAndParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_analysis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameAndParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameAndParams) ProtoMessage() {}

func (x *NameAndParams) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_analysis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameAndParams.ProtoReflect.Descriptor instead.
func (*NameAndParams) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_analysis_proto_rawDescGZIP(), []int{0}
}

func (x *NameAndParams) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NameAndParams) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

type ConditionalTokenFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition    *NameAndParams   `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	TokenFilters []*NameAndParams `protobuf:"bytes,2,rep,name=tokenFilters,proto3" json:"tokenFilters,omitempty"`
}

func (x *ConditionalTokenFilter) Reset() {
	*x = ConditionalTokenFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_analysis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalTokenFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalTokenFilter) ProtoMessage() {}

func (x *ConditionalTokenFilter) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_analysis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalTokenFilter.ProtoReflect.Descriptor instead.
func (*ConditionalTokenFilter) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_analysis_proto_rawDescGZIP(), []int{1}
}

func (x *ConditionalTokenFilter) GetCondition() *NameAndParams {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ConditionalTokenFilter) GetTokenFilters() []*NameAndParams {
	if x != nil {
		return x.TokenFilters
	}
	return nil
}

// Used to be able to check if a value was set
type IntObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int int32 `protobuf:"varint,1,opt,name=int,proto3" json:"int,omitempty"`
}

func (x *IntObject) Reset() {
	*x = IntObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_analysis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntObject) ProtoMessage() {}

func (x *IntObject) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_analysis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntObject.ProtoReflect.Descriptor instead.
func (*IntObject) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_analysis_proto_rawDescGZIP(), []int{2}
}

func (x *IntObject) GetInt() int32 {
	if x != nil {
		return x.Int
	}
	return 0
}

type CustomAnalyzer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CharFilters             []*NameAndParams          `protobuf:"bytes,1,rep,name=charFilters,proto3" json:"charFilters,omitempty"`                         // Available char filters as of Lucene 8.2.0: htmlstrip, mapping, persian, patternreplace
	Tokenizer               *NameAndParams            `protobuf:"bytes,2,opt,name=tokenizer,proto3" json:"tokenizer,omitempty"`                             // Specify a Lucene tokenizer (https://lucene.apache.org/core/8_2_0/core/org/apache/lucene/analysis/Tokenizer.html). Possible options as of Lucene 8.2.0: keyword, letter, whitespace, edgengram, pathhierarchy, pattern, simplepatternsplit, classic, standard, uax29urlemail, thai, wikipedia.
	TokenFilters            []*NameAndParams          `protobuf:"bytes,3,rep,name=tokenFilters,proto3" json:"tokenFilters,omitempty"`                       // Specify a Lucene token filter (https://lucene.apache.org/core/8_2_0/core/org/apache/lucene/analysis/TokenFilter.html). The possible options can be seen at https://lucene.apache.org/core/8_2_0/analyzers-common/org/apache/lucene/analysis/util/TokenFilterFactory.html or by calling TokenFilterFactory.availableTokenFilters().
	ConditionalTokenFilters []*ConditionalTokenFilter `protobuf:"bytes,4,rep,name=conditionalTokenFilters,proto3" json:"conditionalTokenFilters,omitempty"` // TODO: this is not properly supported yet, the only impl requires a protected terms file. Can support this properly later if needed
	DefaultMatchVersion     string                    `protobuf:"bytes,5,opt,name=defaultMatchVersion,proto3" json:"defaultMatchVersion,omitempty"`         // Lucene version as LUCENE_X_Y_Z or X.Y.Z, LATEST by default
	PositionIncrementGap    *IntObject                `protobuf:"bytes,6,opt,name=positionIncrementGap,proto3" json:"positionIncrementGap,omitempty"`
	OffsetGap               *IntObject                `protobuf:"bytes,7,opt,name=offsetGap,proto3" json:"offsetGap,omitempty"`
}

func (x *CustomAnalyzer) Reset() {
	*x = CustomAnalyzer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_analysis_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomAnalyzer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomAnalyzer) ProtoMessage() {}

func (x *CustomAnalyzer) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_analysis_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomAnalyzer.ProtoReflect.Descriptor instead.
func (*CustomAnalyzer) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_analysis_proto_rawDescGZIP(), []int{3}
}

func (x *CustomAnalyzer) GetCharFilters() []*NameAndParams {
	if x != nil {
		return x.CharFilters
	}
	return nil
}

func (x *CustomAnalyzer) GetTokenizer() *NameAndParams {
	if x != nil {
		return x.Tokenizer
	}
	return nil
}

func (x *CustomAnalyzer) GetTokenFilters() []*NameAndParams {
	if x != nil {
		return x.TokenFilters
	}
	return nil
}

func (x *CustomAnalyzer) GetConditionalTokenFilters() []*ConditionalTokenFilter {
	if x != nil {
		return x.ConditionalTokenFilters
	}
	return nil
}

func (x *CustomAnalyzer) GetDefaultMatchVersion() string {
	if x != nil {
		return x.DefaultMatchVersion
	}
	return ""
}

func (x *CustomAnalyzer) GetPositionIncrementGap() *IntObject {
	if x != nil {
		return x.PositionIncrementGap
	}
	return nil
}

func (x *CustomAnalyzer) GetOffsetGap() *IntObject {
	if x != nil {
		return x.OffsetGap
	}
	return nil
}

type Analyzer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AnalyzerType:
	//	*Analyzer_Predefined
	//	*Analyzer_Custom
	AnalyzerType isAnalyzer_AnalyzerType `protobuf_oneof:"AnalyzerType"`
}

func (x *Analyzer) Reset() {
	*x = Analyzer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_analysis_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Analyzer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Analyzer) ProtoMessage() {}

func (x *Analyzer) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_analysis_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Analyzer.ProtoReflect.Descriptor instead.
func (*Analyzer) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_analysis_proto_rawDescGZIP(), []int{4}
}

func (m *Analyzer) GetAnalyzerType() isAnalyzer_AnalyzerType {
	if m != nil {
		return m.AnalyzerType
	}
	return nil
}

func (x *Analyzer) GetPredefined() string {
	if x, ok := x.GetAnalyzerType().(*Analyzer_Predefined); ok {
		return x.Predefined
	}
	return ""
}

func (x *Analyzer) GetCustom() *CustomAnalyzer {
	if x, ok := x.GetAnalyzerType().(*Analyzer_Custom); ok {
		return x.Custom
	}
	return nil
}

type isAnalyzer_AnalyzerType interface {
	isAnalyzer_AnalyzerType()
}

type Analyzer_Predefined struct {
	Predefined string `protobuf:"bytes,1,opt,name=predefined,proto3,oneof"` // Analyzers predefined in Lucene, apart from standard and classic there are en.English, bn.Bengali, eu.Basque, etc. (names derived from Lucene's analyzer class names)
}

type Analyzer_Custom struct {
	Custom *CustomAnalyzer `protobuf:"bytes,2,opt,name=custom,proto3,oneof"`
}

func (*Analyzer_Predefined) isAnalyzer_AnalyzerType() {}

func (*Analyzer_Custom) isAnalyzer_AnalyzerType() {}

var File_yelp_nrtsearch_analysis_proto protoreflect.FileDescriptor

var file_yelp_nrtsearch_analysis_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x79, 0x65, 0x6c, 0x70, 0x2f, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x9f, 0x01,
	0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x94, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x41,
	0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x1d, 0x0a, 0x09, 0x49, 0x6e, 0x74, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x69, 0x6e, 0x74, 0x22, 0xe1, 0x03, 0x0a, 0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x41, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x69, 0x7a, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e,
	0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a,
	0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x6e, 0x64, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x5e, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x14, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x14, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x61, 0x70, 0x12, 0x35, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x47, 0x61, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x47, 0x61, 0x70, 0x22, 0x74, 0x0a, 0x08, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42,
	0x0e, 0x0a, 0x0c, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x37, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x65, 0x6c, 0x70, 0x2e, 0x6e, 0x72, 0x74, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x42, 0x0d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0xa2, 0x02, 0x03, 0x48, 0x4c, 0x57, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yelp_nrtsearch_analysis_proto_rawDescOnce sync.Once
	file_yelp_nrtsearch_analysis_proto_rawDescData = file_yelp_nrtsearch_analysis_proto_rawDesc
)

func file_yelp_nrtsearch_analysis_proto_rawDescGZIP() []byte {
	file_yelp_nrtsearch_analysis_proto_rawDescOnce.Do(func() {
		file_yelp_nrtsearch_analysis_proto_rawDescData = protoimpl.X.CompressGZIP(file_yelp_nrtsearch_analysis_proto_rawDescData)
	})
	return file_yelp_nrtsearch_analysis_proto_rawDescData
}

var file_yelp_nrtsearch_analysis_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_yelp_nrtsearch_analysis_proto_goTypes = []interface{}{
	(*NameAndParams)(nil),          // 0: luceneserver.NameAndParams
	(*ConditionalTokenFilter)(nil), // 1: luceneserver.ConditionalTokenFilter
	(*IntObject)(nil),              // 2: luceneserver.IntObject
	(*CustomAnalyzer)(nil),         // 3: luceneserver.CustomAnalyzer
	(*Analyzer)(nil),               // 4: luceneserver.Analyzer
	nil,                            // 5: luceneserver.NameAndParams.ParamsEntry
}
var file_yelp_nrtsearch_analysis_proto_depIdxs = []int32{
	5,  // 0: luceneserver.NameAndParams.params:type_name -> luceneserver.NameAndParams.ParamsEntry
	0,  // 1: luceneserver.ConditionalTokenFilter.condition:type_name -> luceneserver.NameAndParams
	0,  // 2: luceneserver.ConditionalTokenFilter.tokenFilters:type_name -> luceneserver.NameAndParams
	0,  // 3: luceneserver.CustomAnalyzer.charFilters:type_name -> luceneserver.NameAndParams
	0,  // 4: luceneserver.CustomAnalyzer.tokenizer:type_name -> luceneserver.NameAndParams
	0,  // 5: luceneserver.CustomAnalyzer.tokenFilters:type_name -> luceneserver.NameAndParams
	1,  // 6: luceneserver.CustomAnalyzer.conditionalTokenFilters:type_name -> luceneserver.ConditionalTokenFilter
	2,  // 7: luceneserver.CustomAnalyzer.positionIncrementGap:type_name -> luceneserver.IntObject
	2,  // 8: luceneserver.CustomAnalyzer.offsetGap:type_name -> luceneserver.IntObject
	3,  // 9: luceneserver.Analyzer.custom:type_name -> luceneserver.CustomAnalyzer
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_yelp_nrtsearch_analysis_proto_init() }
func file_yelp_nrtsearch_analysis_proto_init() {
	if File_yelp_nrtsearch_analysis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yelp_nrtsearch_analysis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameAndParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_analysis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalTokenFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_analysis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_analysis_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomAnalyzer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_analysis_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Analyzer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yelp_nrtsearch_analysis_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Analyzer_Predefined)(nil),
		(*Analyzer_Custom)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yelp_nrtsearch_analysis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yelp_nrtsearch_analysis_proto_goTypes,
		DependencyIndexes: file_yelp_nrtsearch_analysis_proto_depIdxs,
		MessageInfos:      file_yelp_nrtsearch_analysis_proto_msgTypes,
	}.Build()
	File_yelp_nrtsearch_analysis_proto = out.File
	file_yelp_nrtsearch_analysis_proto_rawDesc = nil
	file_yelp_nrtsearch_analysis_proto_goTypes = nil
	file_yelp_nrtsearch_analysis_proto_depIdxs = nil
}
