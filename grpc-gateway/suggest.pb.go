// Description of message types for search request and response

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.11.4
// source: yelp/nrtsearch/suggest.proto

package luceneserver

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type BuildSuggestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //index name
	// Types that are assignable to Suggester:
	//	*BuildSuggestRequest_InfixSuggester
	//	*BuildSuggestRequest_AnalyzingSuggester
	//	*BuildSuggestRequest_FuzzySuggester
	//	*BuildSuggestRequest_CompletionInfixSuggester
	Suggester isBuildSuggestRequest_Suggester `protobuf_oneof:"Suggester"`
	// Types that are assignable to Source:
	//	*BuildSuggestRequest_LocalSource
	//	*BuildSuggestRequest_NonLocalSource
	Source      isBuildSuggestRequest_Source `protobuf_oneof:"Source"`
	SuggestName string                       `protobuf:"bytes,8,opt,name=suggestName,proto3" json:"suggestName,omitempty"` //Unique name for this suggest build.
}

func (x *BuildSuggestRequest) Reset() {
	*x = BuildSuggestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildSuggestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildSuggestRequest) ProtoMessage() {}

func (x *BuildSuggestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildSuggestRequest.ProtoReflect.Descriptor instead.
func (*BuildSuggestRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_suggest_proto_rawDescGZIP(), []int{0}
}

func (x *BuildSuggestRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (m *BuildSuggestRequest) GetSuggester() isBuildSuggestRequest_Suggester {
	if m != nil {
		return m.Suggester
	}
	return nil
}

func (x *BuildSuggestRequest) GetInfixSuggester() *InfixSuggester {
	if x, ok := x.GetSuggester().(*BuildSuggestRequest_InfixSuggester); ok {
		return x.InfixSuggester
	}
	return nil
}

func (x *BuildSuggestRequest) GetAnalyzingSuggester() *AnalyzingSuggester {
	if x, ok := x.GetSuggester().(*BuildSuggestRequest_AnalyzingSuggester); ok {
		return x.AnalyzingSuggester
	}
	return nil
}

func (x *BuildSuggestRequest) GetFuzzySuggester() *FuzzySuggester {
	if x, ok := x.GetSuggester().(*BuildSuggestRequest_FuzzySuggester); ok {
		return x.FuzzySuggester
	}
	return nil
}

func (x *BuildSuggestRequest) GetCompletionInfixSuggester() *CompletionInfixSuggester {
	if x, ok := x.GetSuggester().(*BuildSuggestRequest_CompletionInfixSuggester); ok {
		return x.CompletionInfixSuggester
	}
	return nil
}

func (m *BuildSuggestRequest) GetSource() isBuildSuggestRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *BuildSuggestRequest) GetLocalSource() *SuggestLocalSource {
	if x, ok := x.GetSource().(*BuildSuggestRequest_LocalSource); ok {
		return x.LocalSource
	}
	return nil
}

func (x *BuildSuggestRequest) GetNonLocalSource() *SuggestNonLocalSource {
	if x, ok := x.GetSource().(*BuildSuggestRequest_NonLocalSource); ok {
		return x.NonLocalSource
	}
	return nil
}

func (x *BuildSuggestRequest) GetSuggestName() string {
	if x != nil {
		return x.SuggestName
	}
	return ""
}

type isBuildSuggestRequest_Suggester interface {
	isBuildSuggestRequest_Suggester()
}

type BuildSuggestRequest_InfixSuggester struct {
	// A suggester that matches terms anywhere in the input text, not just as a prefix. (see @lucene:org:server.InfixSuggester)
	InfixSuggester *InfixSuggester `protobuf:"bytes,2,opt,name=infixSuggester,proto3,oneof"`
}

type BuildSuggestRequest_AnalyzingSuggester struct {
	// Suggester that first analyzes the surface form, adds the analyzed form to a weighted FST, and then does the same thing at lookup time (see @lucene:suggest:org.apache.lucene.search.suggest.analyzing.AnalyzingSuggester
	AnalyzingSuggester *AnalyzingSuggester `protobuf:"bytes,3,opt,name=analyzingSuggester,proto3,oneof"`
}

type BuildSuggestRequest_FuzzySuggester struct {
	// Implements a fuzzy AnalyzingSuggester (see @lucene:suggest:org.apache.lucene.search.suggest.analyzing.FuzzySuggester
	FuzzySuggester *FuzzySuggester `protobuf:"bytes,4,opt,name=fuzzySuggester,proto3,oneof"`
}

type BuildSuggestRequest_CompletionInfixSuggester struct {
	// A suggester that matches terms anywhere in the input text. The implementation is different from InfixSuggester
	CompletionInfixSuggester *CompletionInfixSuggester `protobuf:"bytes,5,opt,name=completionInfixSuggester,proto3,oneof"`
}

func (*BuildSuggestRequest_InfixSuggester) isBuildSuggestRequest_Suggester() {}

func (*BuildSuggestRequest_AnalyzingSuggester) isBuildSuggestRequest_Suggester() {}

func (*BuildSuggestRequest_FuzzySuggester) isBuildSuggestRequest_Suggester() {}

func (*BuildSuggestRequest_CompletionInfixSuggester) isBuildSuggestRequest_Suggester() {}

type isBuildSuggestRequest_Source interface {
	isBuildSuggestRequest_Source()
}

type BuildSuggestRequest_LocalSource struct {
	LocalSource *SuggestLocalSource `protobuf:"bytes,6,opt,name=localSource,proto3,oneof"`
}

type BuildSuggestRequest_NonLocalSource struct {
	NonLocalSource *SuggestNonLocalSource `protobuf:"bytes,7,opt,name=nonLocalSource,proto3,oneof"`
}

func (*BuildSuggestRequest_LocalSource) isBuildSuggestRequest_Source() {}

func (*BuildSuggestRequest_NonLocalSource) isBuildSuggestRequest_Source() {}

type BuildSuggestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeInBytes int64 `protobuf:"varint,1,opt,name=sizeInBytes,proto3" json:"sizeInBytes,omitempty"` //size in bytes in RAM if using AnalyzingSuggester
	Count       int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`             //total number of suggester entries
}

func (x *BuildSuggestResponse) Reset() {
	*x = BuildSuggestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildSuggestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildSuggestResponse) ProtoMessage() {}

func (x *BuildSuggestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildSuggestResponse.ProtoReflect.Descriptor instead.
func (*BuildSuggestResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_suggest_proto_rawDescGZIP(), []int{1}
}

func (x *BuildSuggestResponse) GetSizeInBytes() int64 {
	if x != nil {
		return x.SizeInBytes
	}
	return 0
}

func (x *BuildSuggestResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SuggestLookupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName        string   `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`                //Index name
	SuggestName      string   `protobuf:"bytes,2,opt,name=suggestName,proto3" json:"suggestName,omitempty"`            //Which suggester to use
	Text             string   `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`                          //Text to suggest from
	Highlight        bool     `protobuf:"varint,4,opt,name=highlight,proto3" json:"highlight,omitempty"`               //True if the suggestions should be highlighted (currently only works with AnalyzingInfixSuggester)
	AllTermsRequired bool     `protobuf:"varint,5,opt,name=allTermsRequired,proto3" json:"allTermsRequired,omitempty"` //If true then all terms must be found (this only applies to InfixSuggester currently)
	Contexts         []string `protobuf:"bytes,6,rep,name=contexts,proto3" json:"contexts,omitempty"`                  //Which contexts to filter by
	Count            int32    `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`                       //How many suggestions to return, default = 5
}

func (x *SuggestLookupRequest) Reset() {
	*x = SuggestLookupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestLookupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestLookupRequest) ProtoMessage() {}

func (x *SuggestLookupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestLookupRequest.ProtoReflect.Descriptor instead.
func (*SuggestLookupRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_suggest_proto_rawDescGZIP(), []int{2}
}

func (x *SuggestLookupRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *SuggestLookupRequest) GetSuggestName() string {
	if x != nil {
		return x.SuggestName
	}
	return ""
}

func (x *SuggestLookupRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SuggestLookupRequest) GetHighlight() bool {
	if x != nil {
		return x.Highlight
	}
	return false
}

func (x *SuggestLookupRequest) GetAllTermsRequired() bool {
	if x != nil {
		return x.AllTermsRequired
	}
	return false
}

func (x *SuggestLookupRequest) GetContexts() []string {
	if x != nil {
		return x.Contexts
	}
	return nil
}

func (x *SuggestLookupRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SuggestLookupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*OneSuggestLookupResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"` //SuggestLookup results as an array
}

func (x *SuggestLookupResponse) Reset() {
	*x = SuggestLookupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestLookupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestLookupResponse) ProtoMessage() {}

func (x *SuggestLookupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestLookupResponse.ProtoReflect.Descriptor instead.
func (*SuggestLookupResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_suggest_proto_rawDescGZIP(), []int{3}
}

func (x *SuggestLookupResponse) GetResults() []*OneSuggestLookupResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

type OneSuggestLookupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to HighlightKey:
	//	*OneSuggestLookupResponse_SuggestLookupHighlight
	//	*OneSuggestLookupResponse_Key
	HighlightKey isOneSuggestLookupResponse_HighlightKey `protobuf_oneof:"HighlightKey"`
	Weight       int64                                   `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`  //the key's weight
	Payload      string                                  `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"` //the key's payload (null if not present)
}

func (x *OneSuggestLookupResponse) Reset() {
	*x = OneSuggestLookupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneSuggestLookupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneSuggestLookupResponse) ProtoMessage() {}

func (x *OneSuggestLookupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneSuggestLookupResponse.ProtoReflect.Descriptor instead.
func (*OneSuggestLookupResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_suggest_proto_rawDescGZIP(), []int{4}
}

func (m *OneSuggestLookupResponse) GetHighlightKey() isOneSuggestLookupResponse_HighlightKey {
	if m != nil {
		return m.HighlightKey
	}
	return nil
}

func (x *OneSuggestLookupResponse) GetSuggestLookupHighlight() *SuggestLookupHighlight {
	if x, ok := x.GetHighlightKey().(*OneSuggestLookupResponse_SuggestLookupHighlight); ok {
		return x.SuggestLookupHighlight
	}
	return nil
}

func (x *OneSuggestLookupResponse) GetKey() string {
	if x, ok := x.GetHighlightKey().(*OneSuggestLookupResponse_Key); ok {
		return x.Key
	}
	return ""
}

func (x *OneSuggestLookupResponse) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *OneSuggestLookupResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type isOneSuggestLookupResponse_HighlightKey interface {
	isOneSuggestLookupResponse_HighlightKey()
}

type OneSuggestLookupResponse_SuggestLookupHighlight struct {
	// Expert: custom Object to hold the result of a highlighted suggestion (currently only works with AnalyzingInfixSuggester)
	SuggestLookupHighlight *SuggestLookupHighlight `protobuf:"bytes,1,opt,name=suggestLookupHighlight,proto3,oneof"`
}

type OneSuggestLookupResponse_Key struct {
	// the key's text
	Key string `protobuf:"bytes,2,opt,name=key,proto3,oneof"`
}

func (*OneSuggestLookupResponse_SuggestLookupHighlight) isOneSuggestLookupResponse_HighlightKey() {}

func (*OneSuggestLookupResponse_Key) isOneSuggestLookupResponse_HighlightKey() {}

type SuggestLookupHighlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OneHighlight []*OneHighlight `protobuf:"bytes,1,rep,name=oneHighlight,proto3" json:"oneHighlight,omitempty"`
}

func (x *SuggestLookupHighlight) Reset() {
	*x = SuggestLookupHighlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestLookupHighlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestLookupHighlight) ProtoMessage() {}

func (x *SuggestLookupHighlight) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestLookupHighlight.ProtoReflect.Descriptor instead.
func (*SuggestLookupHighlight) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_suggest_proto_rawDescGZIP(), []int{5}
}

func (x *SuggestLookupHighlight) GetOneHighlight() []*OneHighlight {
	if x != nil {
		return x.OneHighlight
	}
	return nil
}

type OneHighlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHit bool   `protobuf:"varint,1,opt,name=isHit,proto3" json:"isHit,omitempty"`
	Text  string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *OneHighlight) Reset() {
	*x = OneHighlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneHighlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneHighlight) ProtoMessage() {}

func (x *OneHighlight) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneHighlight.ProtoReflect.Descriptor instead.
func (*OneHighlight) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_suggest_proto_rawDescGZIP(), []int{6}
}

func (x *OneHighlight) GetIsHit() bool {
	if x != nil {
		return x.IsHit
	}
	return false
}

func (x *OneHighlight) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type SuggestLocalSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Local file (to the server) to read suggestions + weights from; format is weight U+001F suggestion U+001F payload,
	//one per line, with suggestion UTF-8 encoded. If this option is used then searcher, suggestField,
	//weightField/Expression, payloadField should not be specified.
	LocalFile          string `protobuf:"bytes,1,opt,name=localFile,proto3" json:"localFile,omitempty"`
	HasContexts        bool   `protobuf:"varint,2,opt,name=hasContexts,proto3" json:"hasContexts,omitempty"`               //True if this file provides per-suggestion contexts
	HasPayload         bool   `protobuf:"varint,3,opt,name=hasPayload,proto3" json:"hasPayload,omitempty"`                 //True if this file provides per-suggestion payload
	HasMultiSearchText bool   `protobuf:"varint,4,opt,name=hasMultiSearchText,proto3" json:"hasMultiSearchText,omitempty"` //True if this file is required to parsed by FromFileSuggestItemIterator
}

func (x *SuggestLocalSource) Reset() {
	*x = SuggestLocalSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestLocalSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestLocalSource) ProtoMessage() {}

func (x *SuggestLocalSource) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestLocalSource.ProtoReflect.Descriptor instead.
func (*SuggestLocalSource) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_suggest_proto_rawDescGZIP(), []int{7}
}

func (x *SuggestLocalSource) GetLocalFile() string {
	if x != nil {
		return x.LocalFile
	}
	return ""
}

func (x *SuggestLocalSource) GetHasContexts() bool {
	if x != nil {
		return x.HasContexts
	}
	return false
}

func (x *SuggestLocalSource) GetHasPayload() bool {
	if x != nil {
		return x.HasPayload
	}
	return false
}

func (x *SuggestLocalSource) GetHasMultiSearchText() bool {
	if x != nil {
		return x.HasMultiSearchText
	}
	return false
}

type SuggestNonLocalSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specific searcher version to use for pull suggestions to build.  There are three different ways to specify a searcher version.
	// Types that are assignable to Searcher:
	//	*SuggestNonLocalSource_IndexGen
	//	*SuggestNonLocalSource_Version
	//	*SuggestNonLocalSource_Snapshot
	Searcher     isSuggestNonLocalSource_Searcher `protobuf_oneof:"Searcher"`
	SuggestField string                           `protobuf:"bytes,4,opt,name=suggestField,proto3" json:"suggestField,omitempty"` //Field (from stored documents) containing the suggestion text
	// Types that are assignable to Weight:
	//	*SuggestNonLocalSource_WeightField
	//	*SuggestNonLocalSource_WeightExpression
	Weight       isSuggestNonLocalSource_Weight `protobuf_oneof:"Weight"`
	PayloadField string                         `protobuf:"bytes,7,opt,name=payloadField,proto3" json:"payloadField,omitempty"` //Optional binary or string field (from stored documents) containing the payload
	ContextField string                         `protobuf:"bytes,8,opt,name=contextField,proto3" json:"contextField,omitempty"` //Numeric field (from stored documents) containing the context which can be later filtered on during lookup
}

func (x *SuggestNonLocalSource) Reset() {
	*x = SuggestNonLocalSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestNonLocalSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestNonLocalSource) ProtoMessage() {}

func (x *SuggestNonLocalSource) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestNonLocalSource.ProtoReflect.Descriptor instead.
func (*SuggestNonLocalSource) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_suggest_proto_rawDescGZIP(), []int{8}
}

func (m *SuggestNonLocalSource) GetSearcher() isSuggestNonLocalSource_Searcher {
	if m != nil {
		return m.Searcher
	}
	return nil
}

func (x *SuggestNonLocalSource) GetIndexGen() int64 {
	if x, ok := x.GetSearcher().(*SuggestNonLocalSource_IndexGen); ok {
		return x.IndexGen
	}
	return 0
}

func (x *SuggestNonLocalSource) GetVersion() int64 {
	if x, ok := x.GetSearcher().(*SuggestNonLocalSource_Version); ok {
		return x.Version
	}
	return 0
}

func (x *SuggestNonLocalSource) GetSnapshot() string {
	if x, ok := x.GetSearcher().(*SuggestNonLocalSource_Snapshot); ok {
		return x.Snapshot
	}
	return ""
}

func (x *SuggestNonLocalSource) GetSuggestField() string {
	if x != nil {
		return x.SuggestField
	}
	return ""
}

func (m *SuggestNonLocalSource) GetWeight() isSuggestNonLocalSource_Weight {
	if m != nil {
		return m.Weight
	}
	return nil
}

func (x *SuggestNonLocalSource) GetWeightField() string {
	if x, ok := x.GetWeight().(*SuggestNonLocalSource_WeightField); ok {
		return x.WeightField
	}
	return ""
}

func (x *SuggestNonLocalSource) GetWeightExpression() string {
	if x, ok := x.GetWeight().(*SuggestNonLocalSource_WeightExpression); ok {
		return x.WeightExpression
	}
	return ""
}

func (x *SuggestNonLocalSource) GetPayloadField() string {
	if x != nil {
		return x.PayloadField
	}
	return ""
}

func (x *SuggestNonLocalSource) GetContextField() string {
	if x != nil {
		return x.ContextField
	}
	return ""
}

type isSuggestNonLocalSource_Searcher interface {
	isSuggestNonLocalSource_Searcher()
}

type SuggestNonLocalSource_IndexGen struct {
	IndexGen int64 `protobuf:"varint,1,opt,name=indexGen,proto3,oneof"` //Search a generation previously returned by an indexing operation such as #addDocument.  Use this to search a non-committed (near-real-time) view of the index.
}

type SuggestNonLocalSource_Version struct {
	Version int64 `protobuf:"varint,2,opt,name=version,proto3,oneof"` //Search a specific searcher version.  This is typically used by follow-on searches (e.g., user clicks next page, drills down, or changes sort, etc.) to get the same searcher used by the original search.
}

type SuggestNonLocalSource_Snapshot struct {
	Snapshot string `protobuf:"bytes,3,opt,name=snapshot,proto3,oneof"` //Search a snapshot previously created with #createSnapshot
}

func (*SuggestNonLocalSource_IndexGen) isSuggestNonLocalSource_Searcher() {}

func (*SuggestNonLocalSource_Version) isSuggestNonLocalSource_Searcher() {}

func (*SuggestNonLocalSource_Snapshot) isSuggestNonLocalSource_Searcher() {}

type isSuggestNonLocalSource_Weight interface {
	isSuggestNonLocalSource_Weight()
}

type SuggestNonLocalSource_WeightField struct {
	WeightField string `protobuf:"bytes,5,opt,name=weightField,proto3,oneof"` //Numeric field (from stored documents) containing the weight
}

type SuggestNonLocalSource_WeightExpression struct {
	WeightExpression string `protobuf:"bytes,6,opt,name=weightExpression,proto3,oneof"` //Alternative to weightField, an expression that's evaluated to the weight. Note that any fields referenced in the expression must have been indexed with sort=true
}

func (*SuggestNonLocalSource_WeightField) isSuggestNonLocalSource_Weight() {}

func (*SuggestNonLocalSource_WeightExpression) isSuggestNonLocalSource_Weight() {}

// A suggester that matches terms anywhere in the input text, not just as a prefix. (see @lucene:org:server.InfixSuggester)
type InfixSuggester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analyzer      string `protobuf:"bytes,1,opt,name=analyzer,proto3" json:"analyzer,omitempty"`           //Index and query analyzer
	IndexAnalyzer string `protobuf:"bytes,2,opt,name=indexAnalyzer,proto3" json:"indexAnalyzer,omitempty"` // Index Analyzer
	QueryAnalyzer string `protobuf:"bytes,3,opt,name=queryAnalyzer,proto3" json:"queryAnalyzer,omitempty"` // Query Analyzer
}

func (x *InfixSuggester) Reset() {
	*x = InfixSuggester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfixSuggester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfixSuggester) ProtoMessage() {}

func (x *InfixSuggester) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfixSuggester.ProtoReflect.Descriptor instead.
func (*InfixSuggester) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_suggest_proto_rawDescGZIP(), []int{9}
}

func (x *InfixSuggester) GetAnalyzer() string {
	if x != nil {
		return x.Analyzer
	}
	return ""
}

func (x *InfixSuggester) GetIndexAnalyzer() string {
	if x != nil {
		return x.IndexAnalyzer
	}
	return ""
}

func (x *InfixSuggester) GetQueryAnalyzer() string {
	if x != nil {
		return x.QueryAnalyzer
	}
	return ""
}

// Suggester that first analyzes the surface form, adds the analyzed form to a weighted FST, and then does the same thing at lookup time (see @lucene:suggest:org.apache.lucene.search.suggest.analyzing.AnalyzingSuggester
type AnalyzingSuggester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analyzer                       string `protobuf:"bytes,1,opt,name=analyzer,proto3" json:"analyzer,omitempty"`                                              //Index and query analyzer
	IndexAnalyzer                  string `protobuf:"bytes,2,opt,name=indexAnalyzer,proto3" json:"indexAnalyzer,omitempty"`                                    // Index Analyzer
	QueryAnalyzer                  string `protobuf:"bytes,3,opt,name=queryAnalyzer,proto3" json:"queryAnalyzer,omitempty"`                                    // Query Analyzer
	MaxSurfaceFormsPerAnalyzedForm int32  `protobuf:"varint,4,opt,name=maxSurfaceFormsPerAnalyzedForm,proto3" json:"maxSurfaceFormsPerAnalyzedForm,omitempty"` //Maximum number of surface forms to keep for a single analyzed form
	MaxGraphExpansions             int32  `protobuf:"varint,5,opt,name=maxGraphExpansions,proto3" json:"maxGraphExpansions,omitempty"`                         //Maximum number of graph paths to expand from the analyzed from
	PreserveSep                    bool   `protobuf:"varint,6,opt,name=preserveSep,proto3" json:"preserveSep,omitempty"`                                       //True if token separators should be preserved when matching
	ExactFirst                     bool   `protobuf:"varint,7,opt,name=exactFirst,proto3" json:"exactFirst,omitempty"`                                         //True if the exact match should always be returned first regardless of score
}

func (x *AnalyzingSuggester) Reset() {
	*x = AnalyzingSuggester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzingSuggester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzingSuggester) ProtoMessage() {}

func (x *AnalyzingSuggester) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzingSuggester.ProtoReflect.Descriptor instead.
func (*AnalyzingSuggester) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_suggest_proto_rawDescGZIP(), []int{10}
}

func (x *AnalyzingSuggester) GetAnalyzer() string {
	if x != nil {
		return x.Analyzer
	}
	return ""
}

func (x *AnalyzingSuggester) GetIndexAnalyzer() string {
	if x != nil {
		return x.IndexAnalyzer
	}
	return ""
}

func (x *AnalyzingSuggester) GetQueryAnalyzer() string {
	if x != nil {
		return x.QueryAnalyzer
	}
	return ""
}

func (x *AnalyzingSuggester) GetMaxSurfaceFormsPerAnalyzedForm() int32 {
	if x != nil {
		return x.MaxSurfaceFormsPerAnalyzedForm
	}
	return 0
}

func (x *AnalyzingSuggester) GetMaxGraphExpansions() int32 {
	if x != nil {
		return x.MaxGraphExpansions
	}
	return 0
}

func (x *AnalyzingSuggester) GetPreserveSep() bool {
	if x != nil {
		return x.PreserveSep
	}
	return false
}

func (x *AnalyzingSuggester) GetExactFirst() bool {
	if x != nil {
		return x.ExactFirst
	}
	return false
}

// Implements a fuzzy AnalyzingSuggester (see @lucene:suggest:org.apache.lucene.search.suggest.analyzing.FuzzySuggester
type FuzzySuggester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analyzer                       string `protobuf:"bytes,1,opt,name=analyzer,proto3" json:"analyzer,omitempty"`                                              //Index and query analyzer
	IndexAnalyzer                  string `protobuf:"bytes,2,opt,name=indexAnalyzer,proto3" json:"indexAnalyzer,omitempty"`                                    // Index Analyzer
	QueryAnalyzer                  string `protobuf:"bytes,3,opt,name=queryAnalyzer,proto3" json:"queryAnalyzer,omitempty"`                                    // Query Analyzer
	MaxSurfaceFormsPerAnalyzedForm int32  `protobuf:"varint,4,opt,name=maxSurfaceFormsPerAnalyzedForm,proto3" json:"maxSurfaceFormsPerAnalyzedForm,omitempty"` //Maximum number of surface forms to keep for a single analyzed form
	MaxGraphExpansions             int32  `protobuf:"varint,5,opt,name=maxGraphExpansions,proto3" json:"maxGraphExpansions,omitempty"`                         //Maximum number of graph paths to expand from the analyzed from
	PreserveSep                    bool   `protobuf:"varint,6,opt,name=preserveSep,proto3" json:"preserveSep,omitempty"`                                       //True if token separators should be preserved when matching
	ExactFirst                     bool   `protobuf:"varint,7,opt,name=exactFirst,proto3" json:"exactFirst,omitempty"`                                         //True if the exact match should always be returned first regardless of score
	MinFuzzyLength                 int32  `protobuf:"varint,8,opt,name=minFuzzyLength,proto3" json:"minFuzzyLength,omitempty"`                                 //Minimum key length before edits are allowed,
	NonFuzzyPrefix                 int32  `protobuf:"varint,9,opt,name=nonFuzzyPrefix,proto3" json:"nonFuzzyPrefix,omitempty"`                                 //Key prefix where edits are not allowed,
	MaxEdits                       int32  `protobuf:"varint,10,opt,name=maxEdits,proto3" json:"maxEdits,omitempty"`                                            //Maximum number of edits for fuzzy suggestions
	Transpositions                 bool   `protobuf:"varint,11,opt,name=transpositions,proto3" json:"transpositions,omitempty"`                                //Whether transpositions are allowed
	UnicodeAware                   bool   `protobuf:"varint,12,opt,name=unicodeAware,proto3" json:"unicodeAware,omitempty"`                                    //True if all edits are measured in unicode characters, not UTF-8 bytes
}

func (x *FuzzySuggester) Reset() {
	*x = FuzzySuggester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzySuggester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzySuggester) ProtoMessage() {}

func (x *FuzzySuggester) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzySuggester.ProtoReflect.Descriptor instead.
func (*FuzzySuggester) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_suggest_proto_rawDescGZIP(), []int{11}
}

func (x *FuzzySuggester) GetAnalyzer() string {
	if x != nil {
		return x.Analyzer
	}
	return ""
}

func (x *FuzzySuggester) GetIndexAnalyzer() string {
	if x != nil {
		return x.IndexAnalyzer
	}
	return ""
}

func (x *FuzzySuggester) GetQueryAnalyzer() string {
	if x != nil {
		return x.QueryAnalyzer
	}
	return ""
}

func (x *FuzzySuggester) GetMaxSurfaceFormsPerAnalyzedForm() int32 {
	if x != nil {
		return x.MaxSurfaceFormsPerAnalyzedForm
	}
	return 0
}

func (x *FuzzySuggester) GetMaxGraphExpansions() int32 {
	if x != nil {
		return x.MaxGraphExpansions
	}
	return 0
}

func (x *FuzzySuggester) GetPreserveSep() bool {
	if x != nil {
		return x.PreserveSep
	}
	return false
}

func (x *FuzzySuggester) GetExactFirst() bool {
	if x != nil {
		return x.ExactFirst
	}
	return false
}

func (x *FuzzySuggester) GetMinFuzzyLength() int32 {
	if x != nil {
		return x.MinFuzzyLength
	}
	return 0
}

func (x *FuzzySuggester) GetNonFuzzyPrefix() int32 {
	if x != nil {
		return x.NonFuzzyPrefix
	}
	return 0
}

func (x *FuzzySuggester) GetMaxEdits() int32 {
	if x != nil {
		return x.MaxEdits
	}
	return 0
}

func (x *FuzzySuggester) GetTranspositions() bool {
	if x != nil {
		return x.Transpositions
	}
	return false
}

func (x *FuzzySuggester) GetUnicodeAware() bool {
	if x != nil {
		return x.UnicodeAware
	}
	return false
}

// A suggester that matches terms anywhere in the input text. The implementation is different from InfixSuggester
type CompletionInfixSuggester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analyzer      string `protobuf:"bytes,1,opt,name=analyzer,proto3" json:"analyzer,omitempty"`           //Index and query analyzer
	IndexAnalyzer string `protobuf:"bytes,2,opt,name=indexAnalyzer,proto3" json:"indexAnalyzer,omitempty"` //Index Analyzer
	QueryAnalyzer string `protobuf:"bytes,3,opt,name=queryAnalyzer,proto3" json:"queryAnalyzer,omitempty"` //Query Analyzer
}

func (x *CompletionInfixSuggester) Reset() {
	*x = CompletionInfixSuggester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompletionInfixSuggester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompletionInfixSuggester) ProtoMessage() {}

func (x *CompletionInfixSuggester) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_suggest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompletionInfixSuggester.ProtoReflect.Descriptor instead.
func (*CompletionInfixSuggester) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_suggest_proto_rawDescGZIP(), []int{12}
}

func (x *CompletionInfixSuggester) GetAnalyzer() string {
	if x != nil {
		return x.Analyzer
	}
	return ""
}

func (x *CompletionInfixSuggester) GetIndexAnalyzer() string {
	if x != nil {
		return x.IndexAnalyzer
	}
	return ""
}

func (x *CompletionInfixSuggester) GetQueryAnalyzer() string {
	if x != nil {
		return x.QueryAnalyzer
	}
	return ""
}

var File_yelp_nrtsearch_suggest_proto protoreflect.FileDescriptor

var file_yelp_nrtsearch_suggest_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x79, 0x65, 0x6c, 0x70, 0x2f, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xcb, 0x04, 0x0a,
	0x13, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x69, 0x6e, 0x66, 0x69, 0x78, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x69, 0x78, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x66, 0x69,
	0x78, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x12, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x46,
	0x0a, 0x0e, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x64, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x69, 0x78, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x69, 0x78, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x69, 0x78, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0b,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x6e, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x4e, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48,
	0x01, 0x52, 0x0e, 0x6e, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x42, 0x08, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x4e, 0x0a, 0x14, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x14, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x72, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x10, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x59, 0x0a, 0x15, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x6e, 0x65,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xd0,
	0x01, 0x0a, 0x18, 0x4f, 0x6e, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x16, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x48, 0x00, 0x52, 0x16, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4b, 0x65,
	0x79, 0x22, 0x58, 0x0a, 0x16, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x6f,
	0x6e, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x4f, 0x6e, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0c, 0x6f,
	0x6e, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x22, 0x38, 0x0a, 0x0c, 0x4f,
	0x6e, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x73, 0x48, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x48, 0x69,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x12, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x68, 0x61, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x68, 0x61, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x12,
	0x68, 0x61, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65,
	0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x68, 0x61, 0x73, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x22, 0xc3, 0x02, 0x0a,
	0x15, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x47,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x10, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x10, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x78, 0x0a, 0x0e, 0x49, 0x6e, 0x66, 0x69, 0x78, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x22, 0xb6, 0x02, 0x0a,
	0x12, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x1e, 0x6d,
	0x61, 0x78, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x73, 0x50, 0x65,
	0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x1e, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46,
	0x6f, 0x72, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x46,
	0x6f, 0x72, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x70, 0x68, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x12, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x70, 0x68, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53,
	0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x53, 0x65, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x61, 0x63, 0x74, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x63, 0x74,
	0x46, 0x69, 0x72, 0x73, 0x74, 0x22, 0xea, 0x03, 0x0a, 0x0e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x47,
	0x72, 0x61, 0x70, 0x68, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x70, 0x68, 0x45, 0x78,
	0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x53, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x65, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x61, 0x63, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x65, 0x78, 0x61, 0x63, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x69,
	0x6e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x6f, 0x6e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x6f, 0x6e, 0x46,
	0x75, 0x7a, 0x7a, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61,
	0x78, 0x45, 0x64, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61,
	0x78, 0x45, 0x64, 0x69, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x77, 0x61, 0x72, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x41, 0x77, 0x61,
	0x72, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x69, 0x78, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x42, 0x3e, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x65, 0x6c, 0x70, 0x2e, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x42, 0x14, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0xa2, 0x02, 0x03, 0x48, 0x4c, 0x57, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yelp_nrtsearch_suggest_proto_rawDescOnce sync.Once
	file_yelp_nrtsearch_suggest_proto_rawDescData = file_yelp_nrtsearch_suggest_proto_rawDesc
)

func file_yelp_nrtsearch_suggest_proto_rawDescGZIP() []byte {
	file_yelp_nrtsearch_suggest_proto_rawDescOnce.Do(func() {
		file_yelp_nrtsearch_suggest_proto_rawDescData = protoimpl.X.CompressGZIP(file_yelp_nrtsearch_suggest_proto_rawDescData)
	})
	return file_yelp_nrtsearch_suggest_proto_rawDescData
}

var file_yelp_nrtsearch_suggest_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_yelp_nrtsearch_suggest_proto_goTypes = []interface{}{
	(*BuildSuggestRequest)(nil),      // 0: luceneserver.BuildSuggestRequest
	(*BuildSuggestResponse)(nil),     // 1: luceneserver.BuildSuggestResponse
	(*SuggestLookupRequest)(nil),     // 2: luceneserver.SuggestLookupRequest
	(*SuggestLookupResponse)(nil),    // 3: luceneserver.SuggestLookupResponse
	(*OneSuggestLookupResponse)(nil), // 4: luceneserver.OneSuggestLookupResponse
	(*SuggestLookupHighlight)(nil),   // 5: luceneserver.SuggestLookupHighlight
	(*OneHighlight)(nil),             // 6: luceneserver.OneHighlight
	(*SuggestLocalSource)(nil),       // 7: luceneserver.SuggestLocalSource
	(*SuggestNonLocalSource)(nil),    // 8: luceneserver.SuggestNonLocalSource
	(*InfixSuggester)(nil),           // 9: luceneserver.InfixSuggester
	(*AnalyzingSuggester)(nil),       // 10: luceneserver.AnalyzingSuggester
	(*FuzzySuggester)(nil),           // 11: luceneserver.FuzzySuggester
	(*CompletionInfixSuggester)(nil), // 12: luceneserver.CompletionInfixSuggester
}
var file_yelp_nrtsearch_suggest_proto_depIdxs = []int32{
	9,  // 0: luceneserver.BuildSuggestRequest.infixSuggester:type_name -> luceneserver.InfixSuggester
	10, // 1: luceneserver.BuildSuggestRequest.analyzingSuggester:type_name -> luceneserver.AnalyzingSuggester
	11, // 2: luceneserver.BuildSuggestRequest.fuzzySuggester:type_name -> luceneserver.FuzzySuggester
	12, // 3: luceneserver.BuildSuggestRequest.completionInfixSuggester:type_name -> luceneserver.CompletionInfixSuggester
	7,  // 4: luceneserver.BuildSuggestRequest.localSource:type_name -> luceneserver.SuggestLocalSource
	8,  // 5: luceneserver.BuildSuggestRequest.nonLocalSource:type_name -> luceneserver.SuggestNonLocalSource
	4,  // 6: luceneserver.SuggestLookupResponse.results:type_name -> luceneserver.OneSuggestLookupResponse
	5,  // 7: luceneserver.OneSuggestLookupResponse.suggestLookupHighlight:type_name -> luceneserver.SuggestLookupHighlight
	6,  // 8: luceneserver.SuggestLookupHighlight.oneHighlight:type_name -> luceneserver.OneHighlight
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_yelp_nrtsearch_suggest_proto_init() }
func file_yelp_nrtsearch_suggest_proto_init() {
	if File_yelp_nrtsearch_suggest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yelp_nrtsearch_suggest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildSuggestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_suggest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildSuggestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_suggest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestLookupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_suggest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestLookupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_suggest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneSuggestLookupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_suggest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestLookupHighlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_suggest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneHighlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_suggest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestLocalSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_suggest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestNonLocalSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_suggest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfixSuggester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_suggest_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzingSuggester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_suggest_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzySuggester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_suggest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompletionInfixSuggester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yelp_nrtsearch_suggest_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*BuildSuggestRequest_InfixSuggester)(nil),
		(*BuildSuggestRequest_AnalyzingSuggester)(nil),
		(*BuildSuggestRequest_FuzzySuggester)(nil),
		(*BuildSuggestRequest_CompletionInfixSuggester)(nil),
		(*BuildSuggestRequest_LocalSource)(nil),
		(*BuildSuggestRequest_NonLocalSource)(nil),
	}
	file_yelp_nrtsearch_suggest_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*OneSuggestLookupResponse_SuggestLookupHighlight)(nil),
		(*OneSuggestLookupResponse_Key)(nil),
	}
	file_yelp_nrtsearch_suggest_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*SuggestNonLocalSource_IndexGen)(nil),
		(*SuggestNonLocalSource_Version)(nil),
		(*SuggestNonLocalSource_Snapshot)(nil),
		(*SuggestNonLocalSource_WeightField)(nil),
		(*SuggestNonLocalSource_WeightExpression)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yelp_nrtsearch_suggest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yelp_nrtsearch_suggest_proto_goTypes,
		DependencyIndexes: file_yelp_nrtsearch_suggest_proto_depIdxs,
		MessageInfos:      file_yelp_nrtsearch_suggest_proto_msgTypes,
	}.Build()
	File_yelp_nrtsearch_suggest_proto = out.File
	file_yelp_nrtsearch_suggest_proto_rawDesc = nil
	file_yelp_nrtsearch_suggest_proto_goTypes = nil
	file_yelp_nrtsearch_suggest_proto_depIdxs = nil
}
