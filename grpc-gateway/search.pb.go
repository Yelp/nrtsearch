// Code generated by protoc-gen-go. DO NOT EDIT.
// source: search.proto

package luceneserver

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	latlng "google.golang.org/genproto/googleapis/type/latlng"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MatchOperator int32

const (
	MatchOperator_SHOULD MatchOperator = 0
	MatchOperator_MUST   MatchOperator = 1
)

var MatchOperator_name = map[int32]string{
	0: "SHOULD",
	1: "MUST",
}

var MatchOperator_value = map[string]int32{
	"SHOULD": 0,
	"MUST":   1,
}

func (x MatchOperator) String() string {
	return proto.EnumName(MatchOperator_name, int32(x))
}

func (MatchOperator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{0}
}

// Defines different types of QueryNodes.
type QueryType int32

const (
	QueryType_NONE                 QueryType = 0
	QueryType_BOOLEAN_QUERY        QueryType = 1
	QueryType_PHRASE_QUERY         QueryType = 2
	QueryType_FUNCTION_SCORE_QUERY QueryType = 3
	QueryType_TERM_QUERY           QueryType = 4
	QueryType_TERM_IN_SET_QUERY    QueryType = 5
	QueryType_DISJUNCTION_MAX      QueryType = 6
	QueryType_MATCH                QueryType = 7
	QueryType_MATCH_PHRASE         QueryType = 8
	QueryType_MULTI_MATCH          QueryType = 9
	QueryType_RANGE                QueryType = 10
)

var QueryType_name = map[int32]string{
	0:  "NONE",
	1:  "BOOLEAN_QUERY",
	2:  "PHRASE_QUERY",
	3:  "FUNCTION_SCORE_QUERY",
	4:  "TERM_QUERY",
	5:  "TERM_IN_SET_QUERY",
	6:  "DISJUNCTION_MAX",
	7:  "MATCH",
	8:  "MATCH_PHRASE",
	9:  "MULTI_MATCH",
	10: "RANGE",
}

var QueryType_value = map[string]int32{
	"NONE":                 0,
	"BOOLEAN_QUERY":        1,
	"PHRASE_QUERY":         2,
	"FUNCTION_SCORE_QUERY": 3,
	"TERM_QUERY":           4,
	"TERM_IN_SET_QUERY":    5,
	"DISJUNCTION_MAX":      6,
	"MATCH":                7,
	"MATCH_PHRASE":         8,
	"MULTI_MATCH":          9,
	"RANGE":                10,
}

func (x QueryType) String() string {
	return proto.EnumName(QueryType_name, int32(x))
}

func (QueryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{1}
}

// For multi valued fields, how to select which value is used for sorting
type Selector int32

const (
	Selector_MIN        Selector = 0
	Selector_MAX        Selector = 1
	Selector_MIDDLE_MIN Selector = 2
	Selector_MIDDLE_MAX Selector = 3
)

var Selector_name = map[int32]string{
	0: "MIN",
	1: "MAX",
	2: "MIDDLE_MIN",
	3: "MIDDLE_MAX",
}

var Selector_value = map[string]int32{
	"MIN":        0,
	"MAX":        1,
	"MIDDLE_MIN": 2,
	"MIDDLE_MAX": 3,
}

func (x Selector) String() string {
	return proto.EnumName(Selector_name, int32(x))
}

func (Selector) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{2}
}

// Defines how clauses may occur in matching documents. This will always be SHOULD by default.
type BooleanClause_Occur int32

const (
	BooleanClause_SHOULD   BooleanClause_Occur = 0
	BooleanClause_MUST     BooleanClause_Occur = 1
	BooleanClause_FILTER   BooleanClause_Occur = 2
	BooleanClause_MUST_NOT BooleanClause_Occur = 3
)

var BooleanClause_Occur_name = map[int32]string{
	0: "SHOULD",
	1: "MUST",
	2: "FILTER",
	3: "MUST_NOT",
}

var BooleanClause_Occur_value = map[string]int32{
	"SHOULD":   0,
	"MUST":     1,
	"FILTER":   2,
	"MUST_NOT": 3,
}

func (x BooleanClause_Occur) String() string {
	return proto.EnumName(BooleanClause_Occur_name, int32(x))
}

func (BooleanClause_Occur) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{0, 0}
}

// A clause in a BooleanQuery.
type BooleanClause struct {
	Query                *Query              `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Occur                BooleanClause_Occur `protobuf:"varint,2,opt,name=occur,proto3,enum=luceneserver.BooleanClause_Occur" json:"occur,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *BooleanClause) Reset()         { *m = BooleanClause{} }
func (m *BooleanClause) String() string { return proto.CompactTextString(m) }
func (*BooleanClause) ProtoMessage()    {}
func (*BooleanClause) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{0}
}

func (m *BooleanClause) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BooleanClause.Unmarshal(m, b)
}
func (m *BooleanClause) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BooleanClause.Marshal(b, m, deterministic)
}
func (m *BooleanClause) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BooleanClause.Merge(m, src)
}
func (m *BooleanClause) XXX_Size() int {
	return xxx_messageInfo_BooleanClause.Size(m)
}
func (m *BooleanClause) XXX_DiscardUnknown() {
	xxx_messageInfo_BooleanClause.DiscardUnknown(m)
}

var xxx_messageInfo_BooleanClause proto.InternalMessageInfo

func (m *BooleanClause) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *BooleanClause) GetOccur() BooleanClause_Occur {
	if m != nil {
		return m.Occur
	}
	return BooleanClause_SHOULD
}

type FuzzyParams struct {
	MaxEdits             int32    `protobuf:"varint,1,opt,name=maxEdits,proto3" json:"maxEdits,omitempty"`
	PrefixLength         int32    `protobuf:"varint,2,opt,name=prefixLength,proto3" json:"prefixLength,omitempty"`
	MaxExpansions        int32    `protobuf:"varint,3,opt,name=maxExpansions,proto3" json:"maxExpansions,omitempty"`
	Transpositions       bool     `protobuf:"varint,4,opt,name=transpositions,proto3" json:"transpositions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FuzzyParams) Reset()         { *m = FuzzyParams{} }
func (m *FuzzyParams) String() string { return proto.CompactTextString(m) }
func (*FuzzyParams) ProtoMessage()    {}
func (*FuzzyParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{1}
}

func (m *FuzzyParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FuzzyParams.Unmarshal(m, b)
}
func (m *FuzzyParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FuzzyParams.Marshal(b, m, deterministic)
}
func (m *FuzzyParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FuzzyParams.Merge(m, src)
}
func (m *FuzzyParams) XXX_Size() int {
	return xxx_messageInfo_FuzzyParams.Size(m)
}
func (m *FuzzyParams) XXX_DiscardUnknown() {
	xxx_messageInfo_FuzzyParams.DiscardUnknown(m)
}

var xxx_messageInfo_FuzzyParams proto.InternalMessageInfo

func (m *FuzzyParams) GetMaxEdits() int32 {
	if m != nil {
		return m.MaxEdits
	}
	return 0
}

func (m *FuzzyParams) GetPrefixLength() int32 {
	if m != nil {
		return m.PrefixLength
	}
	return 0
}

func (m *FuzzyParams) GetMaxExpansions() int32 {
	if m != nil {
		return m.MaxExpansions
	}
	return 0
}

func (m *FuzzyParams) GetTranspositions() bool {
	if m != nil {
		return m.Transpositions
	}
	return false
}

// A query that matches documents using boolean combinations of other queries.
type BooleanQuery struct {
	Clauses                  []*BooleanClause `protobuf:"bytes,1,rep,name=clauses,proto3" json:"clauses,omitempty"`
	MinimumNumberShouldMatch int32            `protobuf:"varint,2,opt,name=minimumNumberShouldMatch,proto3" json:"minimumNumberShouldMatch,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}         `json:"-"`
	XXX_unrecognized         []byte           `json:"-"`
	XXX_sizecache            int32            `json:"-"`
}

func (m *BooleanQuery) Reset()         { *m = BooleanQuery{} }
func (m *BooleanQuery) String() string { return proto.CompactTextString(m) }
func (*BooleanQuery) ProtoMessage()    {}
func (*BooleanQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{2}
}

func (m *BooleanQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BooleanQuery.Unmarshal(m, b)
}
func (m *BooleanQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BooleanQuery.Marshal(b, m, deterministic)
}
func (m *BooleanQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BooleanQuery.Merge(m, src)
}
func (m *BooleanQuery) XXX_Size() int {
	return xxx_messageInfo_BooleanQuery.Size(m)
}
func (m *BooleanQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_BooleanQuery.DiscardUnknown(m)
}

var xxx_messageInfo_BooleanQuery proto.InternalMessageInfo

func (m *BooleanQuery) GetClauses() []*BooleanClause {
	if m != nil {
		return m.Clauses
	}
	return nil
}

func (m *BooleanQuery) GetMinimumNumberShouldMatch() int32 {
	if m != nil {
		return m.MinimumNumberShouldMatch
	}
	return 0
}

// A Query that matches documents containing a particular sequence of terms.
type PhraseQuery struct {
	// Edit distance between respective positions of terms as defined in this PhraseQuery and the positions
	//of terms in a document.
	Slop                 int32    `protobuf:"varint,1,opt,name=slop,proto3" json:"slop,omitempty"`
	Field                string   `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"`
	Terms                []string `protobuf:"bytes,3,rep,name=terms,proto3" json:"terms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PhraseQuery) Reset()         { *m = PhraseQuery{} }
func (m *PhraseQuery) String() string { return proto.CompactTextString(m) }
func (*PhraseQuery) ProtoMessage()    {}
func (*PhraseQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{3}
}

func (m *PhraseQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhraseQuery.Unmarshal(m, b)
}
func (m *PhraseQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhraseQuery.Marshal(b, m, deterministic)
}
func (m *PhraseQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhraseQuery.Merge(m, src)
}
func (m *PhraseQuery) XXX_Size() int {
	return xxx_messageInfo_PhraseQuery.Size(m)
}
func (m *PhraseQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_PhraseQuery.DiscardUnknown(m)
}

var xxx_messageInfo_PhraseQuery proto.InternalMessageInfo

func (m *PhraseQuery) GetSlop() int32 {
	if m != nil {
		return m.Slop
	}
	return 0
}

func (m *PhraseQuery) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *PhraseQuery) GetTerms() []string {
	if m != nil {
		return m.Terms
	}
	return nil
}

// A query that wraps another query and uses custom scoring logic to compute the wrapped query's score.
type FunctionScoreQuery struct {
	Query                *Query   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Function             string   `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FunctionScoreQuery) Reset()         { *m = FunctionScoreQuery{} }
func (m *FunctionScoreQuery) String() string { return proto.CompactTextString(m) }
func (*FunctionScoreQuery) ProtoMessage()    {}
func (*FunctionScoreQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{4}
}

func (m *FunctionScoreQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FunctionScoreQuery.Unmarshal(m, b)
}
func (m *FunctionScoreQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FunctionScoreQuery.Marshal(b, m, deterministic)
}
func (m *FunctionScoreQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FunctionScoreQuery.Merge(m, src)
}
func (m *FunctionScoreQuery) XXX_Size() int {
	return xxx_messageInfo_FunctionScoreQuery.Size(m)
}
func (m *FunctionScoreQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_FunctionScoreQuery.DiscardUnknown(m)
}

var xxx_messageInfo_FunctionScoreQuery proto.InternalMessageInfo

func (m *FunctionScoreQuery) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *FunctionScoreQuery) GetFunction() string {
	if m != nil {
		return m.Function
	}
	return ""
}

// A query that matches documents containing a term.
type TermQuery struct {
	// Field in the document to query.
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Types that are valid to be assigned to TermTypes:
	//	*TermQuery_TextValue
	//	*TermQuery_IntValue
	//	*TermQuery_LongValue
	//	*TermQuery_FloatValue
	//	*TermQuery_DoubleValue
	TermTypes            isTermQuery_TermTypes `protobuf_oneof:"TermTypes"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TermQuery) Reset()         { *m = TermQuery{} }
func (m *TermQuery) String() string { return proto.CompactTextString(m) }
func (*TermQuery) ProtoMessage()    {}
func (*TermQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{5}
}

func (m *TermQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TermQuery.Unmarshal(m, b)
}
func (m *TermQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TermQuery.Marshal(b, m, deterministic)
}
func (m *TermQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermQuery.Merge(m, src)
}
func (m *TermQuery) XXX_Size() int {
	return xxx_messageInfo_TermQuery.Size(m)
}
func (m *TermQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_TermQuery.DiscardUnknown(m)
}

var xxx_messageInfo_TermQuery proto.InternalMessageInfo

func (m *TermQuery) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type isTermQuery_TermTypes interface {
	isTermQuery_TermTypes()
}

type TermQuery_TextValue struct {
	TextValue string `protobuf:"bytes,2,opt,name=textValue,proto3,oneof"`
}

type TermQuery_IntValue struct {
	IntValue int32 `protobuf:"varint,3,opt,name=intValue,proto3,oneof"`
}

type TermQuery_LongValue struct {
	LongValue int64 `protobuf:"varint,4,opt,name=longValue,proto3,oneof"`
}

type TermQuery_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,5,opt,name=floatValue,proto3,oneof"`
}

type TermQuery_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,6,opt,name=doubleValue,proto3,oneof"`
}

func (*TermQuery_TextValue) isTermQuery_TermTypes() {}

func (*TermQuery_IntValue) isTermQuery_TermTypes() {}

func (*TermQuery_LongValue) isTermQuery_TermTypes() {}

func (*TermQuery_FloatValue) isTermQuery_TermTypes() {}

func (*TermQuery_DoubleValue) isTermQuery_TermTypes() {}

func (m *TermQuery) GetTermTypes() isTermQuery_TermTypes {
	if m != nil {
		return m.TermTypes
	}
	return nil
}

func (m *TermQuery) GetTextValue() string {
	if x, ok := m.GetTermTypes().(*TermQuery_TextValue); ok {
		return x.TextValue
	}
	return ""
}

func (m *TermQuery) GetIntValue() int32 {
	if x, ok := m.GetTermTypes().(*TermQuery_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *TermQuery) GetLongValue() int64 {
	if x, ok := m.GetTermTypes().(*TermQuery_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (m *TermQuery) GetFloatValue() float32 {
	if x, ok := m.GetTermTypes().(*TermQuery_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *TermQuery) GetDoubleValue() float64 {
	if x, ok := m.GetTermTypes().(*TermQuery_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TermQuery) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TermQuery_TextValue)(nil),
		(*TermQuery_IntValue)(nil),
		(*TermQuery_LongValue)(nil),
		(*TermQuery_FloatValue)(nil),
		(*TermQuery_DoubleValue)(nil),
	}
}

// Specialization for a disjunction over many terms that behaves like a ConstantScoreQuery over a BooleanQuery containing only BooleanClause.Occur.SHOULD clauses. Only ONE of the types of terms needs to be provided - the one that matches the type of the field.
type TermInSetQuery struct {
	// Field in the document to query.
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Types that are valid to be assigned to TermTypes:
	//	*TermInSetQuery_TextTerms_
	//	*TermInSetQuery_IntTerms_
	//	*TermInSetQuery_LongTerms_
	//	*TermInSetQuery_FloatTerms_
	//	*TermInSetQuery_DoubleTerms_
	TermTypes            isTermInSetQuery_TermTypes `protobuf_oneof:"TermTypes"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *TermInSetQuery) Reset()         { *m = TermInSetQuery{} }
func (m *TermInSetQuery) String() string { return proto.CompactTextString(m) }
func (*TermInSetQuery) ProtoMessage()    {}
func (*TermInSetQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{6}
}

func (m *TermInSetQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TermInSetQuery.Unmarshal(m, b)
}
func (m *TermInSetQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TermInSetQuery.Marshal(b, m, deterministic)
}
func (m *TermInSetQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermInSetQuery.Merge(m, src)
}
func (m *TermInSetQuery) XXX_Size() int {
	return xxx_messageInfo_TermInSetQuery.Size(m)
}
func (m *TermInSetQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_TermInSetQuery.DiscardUnknown(m)
}

var xxx_messageInfo_TermInSetQuery proto.InternalMessageInfo

func (m *TermInSetQuery) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

type isTermInSetQuery_TermTypes interface {
	isTermInSetQuery_TermTypes()
}

type TermInSetQuery_TextTerms_ struct {
	TextTerms *TermInSetQuery_TextTerms `protobuf:"bytes,2,opt,name=textTerms,proto3,oneof"`
}

type TermInSetQuery_IntTerms_ struct {
	IntTerms *TermInSetQuery_IntTerms `protobuf:"bytes,3,opt,name=intTerms,proto3,oneof"`
}

type TermInSetQuery_LongTerms_ struct {
	LongTerms *TermInSetQuery_LongTerms `protobuf:"bytes,4,opt,name=longTerms,proto3,oneof"`
}

type TermInSetQuery_FloatTerms_ struct {
	FloatTerms *TermInSetQuery_FloatTerms `protobuf:"bytes,5,opt,name=floatTerms,proto3,oneof"`
}

type TermInSetQuery_DoubleTerms_ struct {
	DoubleTerms *TermInSetQuery_DoubleTerms `protobuf:"bytes,6,opt,name=doubleTerms,proto3,oneof"`
}

func (*TermInSetQuery_TextTerms_) isTermInSetQuery_TermTypes() {}

func (*TermInSetQuery_IntTerms_) isTermInSetQuery_TermTypes() {}

func (*TermInSetQuery_LongTerms_) isTermInSetQuery_TermTypes() {}

func (*TermInSetQuery_FloatTerms_) isTermInSetQuery_TermTypes() {}

func (*TermInSetQuery_DoubleTerms_) isTermInSetQuery_TermTypes() {}

func (m *TermInSetQuery) GetTermTypes() isTermInSetQuery_TermTypes {
	if m != nil {
		return m.TermTypes
	}
	return nil
}

func (m *TermInSetQuery) GetTextTerms() *TermInSetQuery_TextTerms {
	if x, ok := m.GetTermTypes().(*TermInSetQuery_TextTerms_); ok {
		return x.TextTerms
	}
	return nil
}

func (m *TermInSetQuery) GetIntTerms() *TermInSetQuery_IntTerms {
	if x, ok := m.GetTermTypes().(*TermInSetQuery_IntTerms_); ok {
		return x.IntTerms
	}
	return nil
}

func (m *TermInSetQuery) GetLongTerms() *TermInSetQuery_LongTerms {
	if x, ok := m.GetTermTypes().(*TermInSetQuery_LongTerms_); ok {
		return x.LongTerms
	}
	return nil
}

func (m *TermInSetQuery) GetFloatTerms() *TermInSetQuery_FloatTerms {
	if x, ok := m.GetTermTypes().(*TermInSetQuery_FloatTerms_); ok {
		return x.FloatTerms
	}
	return nil
}

func (m *TermInSetQuery) GetDoubleTerms() *TermInSetQuery_DoubleTerms {
	if x, ok := m.GetTermTypes().(*TermInSetQuery_DoubleTerms_); ok {
		return x.DoubleTerms
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TermInSetQuery) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TermInSetQuery_TextTerms_)(nil),
		(*TermInSetQuery_IntTerms_)(nil),
		(*TermInSetQuery_LongTerms_)(nil),
		(*TermInSetQuery_FloatTerms_)(nil),
		(*TermInSetQuery_DoubleTerms_)(nil),
	}
}

type TermInSetQuery_TextTerms struct {
	Terms                []string `protobuf:"bytes,1,rep,name=terms,proto3" json:"terms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TermInSetQuery_TextTerms) Reset()         { *m = TermInSetQuery_TextTerms{} }
func (m *TermInSetQuery_TextTerms) String() string { return proto.CompactTextString(m) }
func (*TermInSetQuery_TextTerms) ProtoMessage()    {}
func (*TermInSetQuery_TextTerms) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{6, 0}
}

func (m *TermInSetQuery_TextTerms) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TermInSetQuery_TextTerms.Unmarshal(m, b)
}
func (m *TermInSetQuery_TextTerms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TermInSetQuery_TextTerms.Marshal(b, m, deterministic)
}
func (m *TermInSetQuery_TextTerms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermInSetQuery_TextTerms.Merge(m, src)
}
func (m *TermInSetQuery_TextTerms) XXX_Size() int {
	return xxx_messageInfo_TermInSetQuery_TextTerms.Size(m)
}
func (m *TermInSetQuery_TextTerms) XXX_DiscardUnknown() {
	xxx_messageInfo_TermInSetQuery_TextTerms.DiscardUnknown(m)
}

var xxx_messageInfo_TermInSetQuery_TextTerms proto.InternalMessageInfo

func (m *TermInSetQuery_TextTerms) GetTerms() []string {
	if m != nil {
		return m.Terms
	}
	return nil
}

type TermInSetQuery_IntTerms struct {
	Terms                []int32  `protobuf:"varint,1,rep,packed,name=terms,proto3" json:"terms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TermInSetQuery_IntTerms) Reset()         { *m = TermInSetQuery_IntTerms{} }
func (m *TermInSetQuery_IntTerms) String() string { return proto.CompactTextString(m) }
func (*TermInSetQuery_IntTerms) ProtoMessage()    {}
func (*TermInSetQuery_IntTerms) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{6, 1}
}

func (m *TermInSetQuery_IntTerms) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TermInSetQuery_IntTerms.Unmarshal(m, b)
}
func (m *TermInSetQuery_IntTerms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TermInSetQuery_IntTerms.Marshal(b, m, deterministic)
}
func (m *TermInSetQuery_IntTerms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermInSetQuery_IntTerms.Merge(m, src)
}
func (m *TermInSetQuery_IntTerms) XXX_Size() int {
	return xxx_messageInfo_TermInSetQuery_IntTerms.Size(m)
}
func (m *TermInSetQuery_IntTerms) XXX_DiscardUnknown() {
	xxx_messageInfo_TermInSetQuery_IntTerms.DiscardUnknown(m)
}

var xxx_messageInfo_TermInSetQuery_IntTerms proto.InternalMessageInfo

func (m *TermInSetQuery_IntTerms) GetTerms() []int32 {
	if m != nil {
		return m.Terms
	}
	return nil
}

type TermInSetQuery_LongTerms struct {
	Terms                []int64  `protobuf:"varint,1,rep,packed,name=terms,proto3" json:"terms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TermInSetQuery_LongTerms) Reset()         { *m = TermInSetQuery_LongTerms{} }
func (m *TermInSetQuery_LongTerms) String() string { return proto.CompactTextString(m) }
func (*TermInSetQuery_LongTerms) ProtoMessage()    {}
func (*TermInSetQuery_LongTerms) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{6, 2}
}

func (m *TermInSetQuery_LongTerms) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TermInSetQuery_LongTerms.Unmarshal(m, b)
}
func (m *TermInSetQuery_LongTerms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TermInSetQuery_LongTerms.Marshal(b, m, deterministic)
}
func (m *TermInSetQuery_LongTerms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermInSetQuery_LongTerms.Merge(m, src)
}
func (m *TermInSetQuery_LongTerms) XXX_Size() int {
	return xxx_messageInfo_TermInSetQuery_LongTerms.Size(m)
}
func (m *TermInSetQuery_LongTerms) XXX_DiscardUnknown() {
	xxx_messageInfo_TermInSetQuery_LongTerms.DiscardUnknown(m)
}

var xxx_messageInfo_TermInSetQuery_LongTerms proto.InternalMessageInfo

func (m *TermInSetQuery_LongTerms) GetTerms() []int64 {
	if m != nil {
		return m.Terms
	}
	return nil
}

type TermInSetQuery_FloatTerms struct {
	Terms                []float32 `protobuf:"fixed32,1,rep,packed,name=terms,proto3" json:"terms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TermInSetQuery_FloatTerms) Reset()         { *m = TermInSetQuery_FloatTerms{} }
func (m *TermInSetQuery_FloatTerms) String() string { return proto.CompactTextString(m) }
func (*TermInSetQuery_FloatTerms) ProtoMessage()    {}
func (*TermInSetQuery_FloatTerms) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{6, 3}
}

func (m *TermInSetQuery_FloatTerms) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TermInSetQuery_FloatTerms.Unmarshal(m, b)
}
func (m *TermInSetQuery_FloatTerms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TermInSetQuery_FloatTerms.Marshal(b, m, deterministic)
}
func (m *TermInSetQuery_FloatTerms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermInSetQuery_FloatTerms.Merge(m, src)
}
func (m *TermInSetQuery_FloatTerms) XXX_Size() int {
	return xxx_messageInfo_TermInSetQuery_FloatTerms.Size(m)
}
func (m *TermInSetQuery_FloatTerms) XXX_DiscardUnknown() {
	xxx_messageInfo_TermInSetQuery_FloatTerms.DiscardUnknown(m)
}

var xxx_messageInfo_TermInSetQuery_FloatTerms proto.InternalMessageInfo

func (m *TermInSetQuery_FloatTerms) GetTerms() []float32 {
	if m != nil {
		return m.Terms
	}
	return nil
}

type TermInSetQuery_DoubleTerms struct {
	Terms                []float64 `protobuf:"fixed64,1,rep,packed,name=terms,proto3" json:"terms,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TermInSetQuery_DoubleTerms) Reset()         { *m = TermInSetQuery_DoubleTerms{} }
func (m *TermInSetQuery_DoubleTerms) String() string { return proto.CompactTextString(m) }
func (*TermInSetQuery_DoubleTerms) ProtoMessage()    {}
func (*TermInSetQuery_DoubleTerms) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{6, 4}
}

func (m *TermInSetQuery_DoubleTerms) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TermInSetQuery_DoubleTerms.Unmarshal(m, b)
}
func (m *TermInSetQuery_DoubleTerms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TermInSetQuery_DoubleTerms.Marshal(b, m, deterministic)
}
func (m *TermInSetQuery_DoubleTerms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermInSetQuery_DoubleTerms.Merge(m, src)
}
func (m *TermInSetQuery_DoubleTerms) XXX_Size() int {
	return xxx_messageInfo_TermInSetQuery_DoubleTerms.Size(m)
}
func (m *TermInSetQuery_DoubleTerms) XXX_DiscardUnknown() {
	xxx_messageInfo_TermInSetQuery_DoubleTerms.DiscardUnknown(m)
}

var xxx_messageInfo_TermInSetQuery_DoubleTerms proto.InternalMessageInfo

func (m *TermInSetQuery_DoubleTerms) GetTerms() []float64 {
	if m != nil {
		return m.Terms
	}
	return nil
}

// A query that generates the union of documents produced by its subqueries, and that scores each document with the
// maximum score for that document as produced by any subquery, plus a tie breaking increment for any additional matching subqueries.
type DisjunctionMaxQuery struct {
	Disjuncts            []*Query `protobuf:"bytes,1,rep,name=disjuncts,proto3" json:"disjuncts,omitempty"`
	TieBreakerMultiplier float32  `protobuf:"fixed32,2,opt,name=tieBreakerMultiplier,proto3" json:"tieBreakerMultiplier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DisjunctionMaxQuery) Reset()         { *m = DisjunctionMaxQuery{} }
func (m *DisjunctionMaxQuery) String() string { return proto.CompactTextString(m) }
func (*DisjunctionMaxQuery) ProtoMessage()    {}
func (*DisjunctionMaxQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{7}
}

func (m *DisjunctionMaxQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DisjunctionMaxQuery.Unmarshal(m, b)
}
func (m *DisjunctionMaxQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DisjunctionMaxQuery.Marshal(b, m, deterministic)
}
func (m *DisjunctionMaxQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DisjunctionMaxQuery.Merge(m, src)
}
func (m *DisjunctionMaxQuery) XXX_Size() int {
	return xxx_messageInfo_DisjunctionMaxQuery.Size(m)
}
func (m *DisjunctionMaxQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_DisjunctionMaxQuery.DiscardUnknown(m)
}

var xxx_messageInfo_DisjunctionMaxQuery proto.InternalMessageInfo

func (m *DisjunctionMaxQuery) GetDisjuncts() []*Query {
	if m != nil {
		return m.Disjuncts
	}
	return nil
}

func (m *DisjunctionMaxQuery) GetTieBreakerMultiplier() float32 {
	if m != nil {
		return m.TieBreakerMultiplier
	}
	return 0
}

// A query that analyzes the text before finding matching documents. The tokens resulting from the analysis are combined using term queries in boolean clauses.
type MatchQuery struct {
	Field                    string        `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Query                    string        `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Operator                 MatchOperator `protobuf:"varint,3,opt,name=operator,proto3,enum=luceneserver.MatchOperator" json:"operator,omitempty"`
	MinimumNumberShouldMatch int32         `protobuf:"varint,4,opt,name=minimumNumberShouldMatch,proto3" json:"minimumNumberShouldMatch,omitempty"`
	Analyzer                 *Analyzer     `protobuf:"bytes,5,opt,name=analyzer,proto3" json:"analyzer,omitempty"`
	FuzzyParams              *FuzzyParams  `protobuf:"bytes,6,opt,name=fuzzyParams,proto3" json:"fuzzyParams,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}      `json:"-"`
	XXX_unrecognized         []byte        `json:"-"`
	XXX_sizecache            int32         `json:"-"`
}

func (m *MatchQuery) Reset()         { *m = MatchQuery{} }
func (m *MatchQuery) String() string { return proto.CompactTextString(m) }
func (*MatchQuery) ProtoMessage()    {}
func (*MatchQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{8}
}

func (m *MatchQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchQuery.Unmarshal(m, b)
}
func (m *MatchQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchQuery.Marshal(b, m, deterministic)
}
func (m *MatchQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchQuery.Merge(m, src)
}
func (m *MatchQuery) XXX_Size() int {
	return xxx_messageInfo_MatchQuery.Size(m)
}
func (m *MatchQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchQuery.DiscardUnknown(m)
}

var xxx_messageInfo_MatchQuery proto.InternalMessageInfo

func (m *MatchQuery) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *MatchQuery) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *MatchQuery) GetOperator() MatchOperator {
	if m != nil {
		return m.Operator
	}
	return MatchOperator_SHOULD
}

func (m *MatchQuery) GetMinimumNumberShouldMatch() int32 {
	if m != nil {
		return m.MinimumNumberShouldMatch
	}
	return 0
}

func (m *MatchQuery) GetAnalyzer() *Analyzer {
	if m != nil {
		return m.Analyzer
	}
	return nil
}

func (m *MatchQuery) GetFuzzyParams() *FuzzyParams {
	if m != nil {
		return m.FuzzyParams
	}
	return nil
}

// A query that analyzes the text before finding matching documents. The tokens resulting from the analysis are combined into a PhraseQuery.
type MatchPhraseQuery struct {
	Field                string    `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Query                string    `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Slop                 int32     `protobuf:"varint,3,opt,name=slop,proto3" json:"slop,omitempty"`
	Analyzer             *Analyzer `protobuf:"bytes,4,opt,name=analyzer,proto3" json:"analyzer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MatchPhraseQuery) Reset()         { *m = MatchPhraseQuery{} }
func (m *MatchPhraseQuery) String() string { return proto.CompactTextString(m) }
func (*MatchPhraseQuery) ProtoMessage()    {}
func (*MatchPhraseQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{9}
}

func (m *MatchPhraseQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MatchPhraseQuery.Unmarshal(m, b)
}
func (m *MatchPhraseQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MatchPhraseQuery.Marshal(b, m, deterministic)
}
func (m *MatchPhraseQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MatchPhraseQuery.Merge(m, src)
}
func (m *MatchPhraseQuery) XXX_Size() int {
	return xxx_messageInfo_MatchPhraseQuery.Size(m)
}
func (m *MatchPhraseQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_MatchPhraseQuery.DiscardUnknown(m)
}

var xxx_messageInfo_MatchPhraseQuery proto.InternalMessageInfo

func (m *MatchPhraseQuery) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *MatchPhraseQuery) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *MatchPhraseQuery) GetSlop() int32 {
	if m != nil {
		return m.Slop
	}
	return 0
}

func (m *MatchPhraseQuery) GetAnalyzer() *Analyzer {
	if m != nil {
		return m.Analyzer
	}
	return nil
}

// A query that creates a match query for each field provided and wraps all the match queries in a disjunction max query.
type MultiMatchQuery struct {
	Fields                   []string           `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Query                    string             `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	FieldBoosts              map[string]float32 `protobuf:"bytes,3,rep,name=fieldBoosts,proto3" json:"fieldBoosts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Operator                 MatchOperator      `protobuf:"varint,4,opt,name=operator,proto3,enum=luceneserver.MatchOperator" json:"operator,omitempty"`
	MinimumNumberShouldMatch int32              `protobuf:"varint,5,opt,name=minimumNumberShouldMatch,proto3" json:"minimumNumberShouldMatch,omitempty"`
	Analyzer                 *Analyzer          `protobuf:"bytes,6,opt,name=analyzer,proto3" json:"analyzer,omitempty"`
	FuzzyParams              *FuzzyParams       `protobuf:"bytes,7,opt,name=fuzzyParams,proto3" json:"fuzzyParams,omitempty"`
	TieBreakerMultiplier     float32            `protobuf:"fixed32,8,opt,name=tieBreakerMultiplier,proto3" json:"tieBreakerMultiplier,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}           `json:"-"`
	XXX_unrecognized         []byte             `json:"-"`
	XXX_sizecache            int32              `json:"-"`
}

func (m *MultiMatchQuery) Reset()         { *m = MultiMatchQuery{} }
func (m *MultiMatchQuery) String() string { return proto.CompactTextString(m) }
func (*MultiMatchQuery) ProtoMessage()    {}
func (*MultiMatchQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{10}
}

func (m *MultiMatchQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MultiMatchQuery.Unmarshal(m, b)
}
func (m *MultiMatchQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MultiMatchQuery.Marshal(b, m, deterministic)
}
func (m *MultiMatchQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiMatchQuery.Merge(m, src)
}
func (m *MultiMatchQuery) XXX_Size() int {
	return xxx_messageInfo_MultiMatchQuery.Size(m)
}
func (m *MultiMatchQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiMatchQuery.DiscardUnknown(m)
}

var xxx_messageInfo_MultiMatchQuery proto.InternalMessageInfo

func (m *MultiMatchQuery) GetFields() []string {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *MultiMatchQuery) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *MultiMatchQuery) GetFieldBoosts() map[string]float32 {
	if m != nil {
		return m.FieldBoosts
	}
	return nil
}

func (m *MultiMatchQuery) GetOperator() MatchOperator {
	if m != nil {
		return m.Operator
	}
	return MatchOperator_SHOULD
}

func (m *MultiMatchQuery) GetMinimumNumberShouldMatch() int32 {
	if m != nil {
		return m.MinimumNumberShouldMatch
	}
	return 0
}

func (m *MultiMatchQuery) GetAnalyzer() *Analyzer {
	if m != nil {
		return m.Analyzer
	}
	return nil
}

func (m *MultiMatchQuery) GetFuzzyParams() *FuzzyParams {
	if m != nil {
		return m.FuzzyParams
	}
	return nil
}

func (m *MultiMatchQuery) GetTieBreakerMultiplier() float32 {
	if m != nil {
		return m.TieBreakerMultiplier
	}
	return 0
}

// A query that matches documents with values within the specified range. The lower and upper values though provided as strings will be converted to the type of the field. This works with INT, LONG, FLOAT, DOUBLE and DATE_TIME field types.
type RangeQuery struct {
	Field                string   `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Lower                string   `protobuf:"bytes,2,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper                string   `protobuf:"bytes,3,opt,name=upper,proto3" json:"upper,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RangeQuery) Reset()         { *m = RangeQuery{} }
func (m *RangeQuery) String() string { return proto.CompactTextString(m) }
func (*RangeQuery) ProtoMessage()    {}
func (*RangeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{11}
}

func (m *RangeQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RangeQuery.Unmarshal(m, b)
}
func (m *RangeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RangeQuery.Marshal(b, m, deterministic)
}
func (m *RangeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeQuery.Merge(m, src)
}
func (m *RangeQuery) XXX_Size() int {
	return xxx_messageInfo_RangeQuery.Size(m)
}
func (m *RangeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_RangeQuery proto.InternalMessageInfo

func (m *RangeQuery) GetField() string {
	if m != nil {
		return m.Field
	}
	return ""
}

func (m *RangeQuery) GetLower() string {
	if m != nil {
		return m.Lower
	}
	return ""
}

func (m *RangeQuery) GetUpper() string {
	if m != nil {
		return m.Upper
	}
	return ""
}

// Defines a full query consisting of a QueryNode which may be one of several types.
type Query struct {
	QueryType QueryType `protobuf:"varint,1,opt,name=queryType,proto3,enum=luceneserver.QueryType" json:"queryType,omitempty"`
	Boost     float32   `protobuf:"fixed32,2,opt,name=boost,proto3" json:"boost,omitempty"`
	// Types that are valid to be assigned to QueryNode:
	//	*Query_BooleanQuery
	//	*Query_PhraseQuery
	//	*Query_FunctionScoreQuery
	//	*Query_TermQuery
	//	*Query_TermInSetQuery
	//	*Query_DisjunctionMaxQuery
	//	*Query_MatchQuery
	//	*Query_MatchPhraseQuery
	//	*Query_MultiMatchQuery
	//	*Query_RangeQuery
	QueryNode            isQuery_QueryNode `protobuf_oneof:"QueryNode"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Query) Reset()         { *m = Query{} }
func (m *Query) String() string { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()    {}
func (*Query) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{12}
}

func (m *Query) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Query.Unmarshal(m, b)
}
func (m *Query) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Query.Marshal(b, m, deterministic)
}
func (m *Query) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Query.Merge(m, src)
}
func (m *Query) XXX_Size() int {
	return xxx_messageInfo_Query.Size(m)
}
func (m *Query) XXX_DiscardUnknown() {
	xxx_messageInfo_Query.DiscardUnknown(m)
}

var xxx_messageInfo_Query proto.InternalMessageInfo

func (m *Query) GetQueryType() QueryType {
	if m != nil {
		return m.QueryType
	}
	return QueryType_NONE
}

func (m *Query) GetBoost() float32 {
	if m != nil {
		return m.Boost
	}
	return 0
}

type isQuery_QueryNode interface {
	isQuery_QueryNode()
}

type Query_BooleanQuery struct {
	BooleanQuery *BooleanQuery `protobuf:"bytes,3,opt,name=booleanQuery,proto3,oneof"`
}

type Query_PhraseQuery struct {
	PhraseQuery *PhraseQuery `protobuf:"bytes,4,opt,name=phraseQuery,proto3,oneof"`
}

type Query_FunctionScoreQuery struct {
	FunctionScoreQuery *FunctionScoreQuery `protobuf:"bytes,5,opt,name=functionScoreQuery,proto3,oneof"`
}

type Query_TermQuery struct {
	TermQuery *TermQuery `protobuf:"bytes,6,opt,name=termQuery,proto3,oneof"`
}

type Query_TermInSetQuery struct {
	TermInSetQuery *TermInSetQuery `protobuf:"bytes,7,opt,name=termInSetQuery,proto3,oneof"`
}

type Query_DisjunctionMaxQuery struct {
	DisjunctionMaxQuery *DisjunctionMaxQuery `protobuf:"bytes,8,opt,name=disjunctionMaxQuery,proto3,oneof"`
}

type Query_MatchQuery struct {
	MatchQuery *MatchQuery `protobuf:"bytes,9,opt,name=matchQuery,proto3,oneof"`
}

type Query_MatchPhraseQuery struct {
	MatchPhraseQuery *MatchPhraseQuery `protobuf:"bytes,10,opt,name=matchPhraseQuery,proto3,oneof"`
}

type Query_MultiMatchQuery struct {
	MultiMatchQuery *MultiMatchQuery `protobuf:"bytes,11,opt,name=multiMatchQuery,proto3,oneof"`
}

type Query_RangeQuery struct {
	RangeQuery *RangeQuery `protobuf:"bytes,12,opt,name=rangeQuery,proto3,oneof"`
}

func (*Query_BooleanQuery) isQuery_QueryNode() {}

func (*Query_PhraseQuery) isQuery_QueryNode() {}

func (*Query_FunctionScoreQuery) isQuery_QueryNode() {}

func (*Query_TermQuery) isQuery_QueryNode() {}

func (*Query_TermInSetQuery) isQuery_QueryNode() {}

func (*Query_DisjunctionMaxQuery) isQuery_QueryNode() {}

func (*Query_MatchQuery) isQuery_QueryNode() {}

func (*Query_MatchPhraseQuery) isQuery_QueryNode() {}

func (*Query_MultiMatchQuery) isQuery_QueryNode() {}

func (*Query_RangeQuery) isQuery_QueryNode() {}

func (m *Query) GetQueryNode() isQuery_QueryNode {
	if m != nil {
		return m.QueryNode
	}
	return nil
}

func (m *Query) GetBooleanQuery() *BooleanQuery {
	if x, ok := m.GetQueryNode().(*Query_BooleanQuery); ok {
		return x.BooleanQuery
	}
	return nil
}

func (m *Query) GetPhraseQuery() *PhraseQuery {
	if x, ok := m.GetQueryNode().(*Query_PhraseQuery); ok {
		return x.PhraseQuery
	}
	return nil
}

func (m *Query) GetFunctionScoreQuery() *FunctionScoreQuery {
	if x, ok := m.GetQueryNode().(*Query_FunctionScoreQuery); ok {
		return x.FunctionScoreQuery
	}
	return nil
}

func (m *Query) GetTermQuery() *TermQuery {
	if x, ok := m.GetQueryNode().(*Query_TermQuery); ok {
		return x.TermQuery
	}
	return nil
}

func (m *Query) GetTermInSetQuery() *TermInSetQuery {
	if x, ok := m.GetQueryNode().(*Query_TermInSetQuery); ok {
		return x.TermInSetQuery
	}
	return nil
}

func (m *Query) GetDisjunctionMaxQuery() *DisjunctionMaxQuery {
	if x, ok := m.GetQueryNode().(*Query_DisjunctionMaxQuery); ok {
		return x.DisjunctionMaxQuery
	}
	return nil
}

func (m *Query) GetMatchQuery() *MatchQuery {
	if x, ok := m.GetQueryNode().(*Query_MatchQuery); ok {
		return x.MatchQuery
	}
	return nil
}

func (m *Query) GetMatchPhraseQuery() *MatchPhraseQuery {
	if x, ok := m.GetQueryNode().(*Query_MatchPhraseQuery); ok {
		return x.MatchPhraseQuery
	}
	return nil
}

func (m *Query) GetMultiMatchQuery() *MultiMatchQuery {
	if x, ok := m.GetQueryNode().(*Query_MultiMatchQuery); ok {
		return x.MultiMatchQuery
	}
	return nil
}

func (m *Query) GetRangeQuery() *RangeQuery {
	if x, ok := m.GetQueryNode().(*Query_RangeQuery); ok {
		return x.RangeQuery
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Query) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Query_BooleanQuery)(nil),
		(*Query_PhraseQuery)(nil),
		(*Query_FunctionScoreQuery)(nil),
		(*Query_TermQuery)(nil),
		(*Query_TermInSetQuery)(nil),
		(*Query_DisjunctionMaxQuery)(nil),
		(*Query_MatchQuery)(nil),
		(*Query_MatchPhraseQuery)(nil),
		(*Query_MultiMatchQuery)(nil),
		(*Query_RangeQuery)(nil),
	}
}

type SearchRequest struct {
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	StartHit  int32  `protobuf:"varint,2,opt,name=startHit,proto3" json:"startHit,omitempty"`
	TopHits   int32  `protobuf:"varint,3,opt,name=topHits,proto3" json:"topHits,omitempty"`
	// Maximum number of seconds spent on each collection phase; note that for
	// multi-pass searches (e.g. query-time grouping), this timeout applies to each phase.
	TimeoutSec     float64         `protobuf:"fixed64,4,opt,name=timeoutSec,proto3" json:"timeoutSec,omitempty"`
	RetrieveFields []string        `protobuf:"bytes,5,rep,name=retrieveFields,proto3" json:"retrieveFields,omitempty"`
	QueryText      string          `protobuf:"bytes,6,opt,name=queryText,proto3" json:"queryText,omitempty"`
	VirtualFielsd  []*VirtualField `protobuf:"bytes,7,rep,name=virtualFielsd,proto3" json:"virtualFielsd,omitempty"`
	Query          *Query          `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`
	QuerySort      *QuerySortField `protobuf:"bytes,9,opt,name=querySort,proto3" json:"querySort,omitempty"`
	// Types that are valid to be assigned to Searcher:
	//	*SearchRequest_IndexGen
	//	*SearchRequest_Version
	//	*SearchRequest_Snapshot
	Searcher             isSearchRequest_Searcher `protobuf_oneof:"Searcher"`
	TotalHitsThreshold   int32                    `protobuf:"varint,13,opt,name=totalHitsThreshold,proto3" json:"totalHitsThreshold,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{13}
}

func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchRequest.Unmarshal(m, b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
}
func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}
func (m *SearchRequest) XXX_Size() int {
	return xxx_messageInfo_SearchRequest.Size(m)
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

func (m *SearchRequest) GetStartHit() int32 {
	if m != nil {
		return m.StartHit
	}
	return 0
}

func (m *SearchRequest) GetTopHits() int32 {
	if m != nil {
		return m.TopHits
	}
	return 0
}

func (m *SearchRequest) GetTimeoutSec() float64 {
	if m != nil {
		return m.TimeoutSec
	}
	return 0
}

func (m *SearchRequest) GetRetrieveFields() []string {
	if m != nil {
		return m.RetrieveFields
	}
	return nil
}

func (m *SearchRequest) GetQueryText() string {
	if m != nil {
		return m.QueryText
	}
	return ""
}

func (m *SearchRequest) GetVirtualFielsd() []*VirtualField {
	if m != nil {
		return m.VirtualFielsd
	}
	return nil
}

func (m *SearchRequest) GetQuery() *Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *SearchRequest) GetQuerySort() *QuerySortField {
	if m != nil {
		return m.QuerySort
	}
	return nil
}

type isSearchRequest_Searcher interface {
	isSearchRequest_Searcher()
}

type SearchRequest_IndexGen struct {
	IndexGen int64 `protobuf:"varint,10,opt,name=indexGen,proto3,oneof"`
}

type SearchRequest_Version struct {
	Version int64 `protobuf:"varint,11,opt,name=version,proto3,oneof"`
}

type SearchRequest_Snapshot struct {
	Snapshot string `protobuf:"bytes,12,opt,name=snapshot,proto3,oneof"`
}

func (*SearchRequest_IndexGen) isSearchRequest_Searcher() {}

func (*SearchRequest_Version) isSearchRequest_Searcher() {}

func (*SearchRequest_Snapshot) isSearchRequest_Searcher() {}

func (m *SearchRequest) GetSearcher() isSearchRequest_Searcher {
	if m != nil {
		return m.Searcher
	}
	return nil
}

func (m *SearchRequest) GetIndexGen() int64 {
	if x, ok := m.GetSearcher().(*SearchRequest_IndexGen); ok {
		return x.IndexGen
	}
	return 0
}

func (m *SearchRequest) GetVersion() int64 {
	if x, ok := m.GetSearcher().(*SearchRequest_Version); ok {
		return x.Version
	}
	return 0
}

func (m *SearchRequest) GetSnapshot() string {
	if x, ok := m.GetSearcher().(*SearchRequest_Snapshot); ok {
		return x.Snapshot
	}
	return ""
}

func (m *SearchRequest) GetTotalHitsThreshold() int32 {
	if m != nil {
		return m.TotalHitsThreshold
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SearchRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SearchRequest_IndexGen)(nil),
		(*SearchRequest_Version)(nil),
		(*SearchRequest_Snapshot)(nil),
	}
}

// Virtual field used during search
type VirtualField struct {
	Expression           string   `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VirtualField) Reset()         { *m = VirtualField{} }
func (m *VirtualField) String() string { return proto.CompactTextString(m) }
func (*VirtualField) ProtoMessage()    {}
func (*VirtualField) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{14}
}

func (m *VirtualField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VirtualField.Unmarshal(m, b)
}
func (m *VirtualField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VirtualField.Marshal(b, m, deterministic)
}
func (m *VirtualField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VirtualField.Merge(m, src)
}
func (m *VirtualField) XXX_Size() int {
	return xxx_messageInfo_VirtualField.Size(m)
}
func (m *VirtualField) XXX_DiscardUnknown() {
	xxx_messageInfo_VirtualField.DiscardUnknown(m)
}

var xxx_messageInfo_VirtualField proto.InternalMessageInfo

func (m *VirtualField) GetExpression() string {
	if m != nil {
		return m.Expression
	}
	return ""
}

func (m *VirtualField) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type QuerySortField struct {
	DoDocScores          bool        `protobuf:"varint,1,opt,name=doDocScores,proto3" json:"doDocScores,omitempty"`
	DoMaxScore           bool        `protobuf:"varint,2,opt,name=doMaxScore,proto3" json:"doMaxScore,omitempty"`
	Fields               *SortFields `protobuf:"bytes,3,opt,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *QuerySortField) Reset()         { *m = QuerySortField{} }
func (m *QuerySortField) String() string { return proto.CompactTextString(m) }
func (*QuerySortField) ProtoMessage()    {}
func (*QuerySortField) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{15}
}

func (m *QuerySortField) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QuerySortField.Unmarshal(m, b)
}
func (m *QuerySortField) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QuerySortField.Marshal(b, m, deterministic)
}
func (m *QuerySortField) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySortField.Merge(m, src)
}
func (m *QuerySortField) XXX_Size() int {
	return xxx_messageInfo_QuerySortField.Size(m)
}
func (m *QuerySortField) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySortField.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySortField proto.InternalMessageInfo

func (m *QuerySortField) GetDoDocScores() bool {
	if m != nil {
		return m.DoDocScores
	}
	return false
}

func (m *QuerySortField) GetDoMaxScore() bool {
	if m != nil {
		return m.DoMaxScore
	}
	return false
}

func (m *QuerySortField) GetFields() *SortFields {
	if m != nil {
		return m.Fields
	}
	return nil
}

// Fields to sort on either during index time or search time
type SortFields struct {
	SortedFields         []*SortType `protobuf:"bytes,1,rep,name=sortedFields,proto3" json:"sortedFields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SortFields) Reset()         { *m = SortFields{} }
func (m *SortFields) String() string { return proto.CompactTextString(m) }
func (*SortFields) ProtoMessage()    {}
func (*SortFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{16}
}

func (m *SortFields) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SortFields.Unmarshal(m, b)
}
func (m *SortFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SortFields.Marshal(b, m, deterministic)
}
func (m *SortFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SortFields.Merge(m, src)
}
func (m *SortFields) XXX_Size() int {
	return xxx_messageInfo_SortFields.Size(m)
}
func (m *SortFields) XXX_DiscardUnknown() {
	xxx_messageInfo_SortFields.DiscardUnknown(m)
}

var xxx_messageInfo_SortFields proto.InternalMessageInfo

func (m *SortFields) GetSortedFields() []*SortType {
	if m != nil {
		return m.SortedFields
	}
	return nil
}

// "The field to sort on. Pass <code>docid</code> for index order and <code>score</code> for relevance sort.
type SortType struct {
	FieldName string   `protobuf:"bytes,1,opt,name=fieldName,proto3" json:"fieldName,omitempty"`
	Selector  Selector `protobuf:"varint,2,opt,name=selector,proto3,enum=luceneserver.Selector" json:"selector,omitempty"`
	Origin    *Point   `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`
	// Whether missing values should sort last instead of first.
	//Note that this runs \"before\" reverse, so if you sort missing first and reverse=true then missing values will
	//be at the end.
	MissingLat bool `protobuf:"varint,4,opt,name=missingLat,proto3" json:"missingLat,omitempty"`
	// Sort in reverse of the field's natural order
	Reverse              bool     `protobuf:"varint,5,opt,name=reverse,proto3" json:"reverse,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SortType) Reset()         { *m = SortType{} }
func (m *SortType) String() string { return proto.CompactTextString(m) }
func (*SortType) ProtoMessage()    {}
func (*SortType) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{17}
}

func (m *SortType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SortType.Unmarshal(m, b)
}
func (m *SortType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SortType.Marshal(b, m, deterministic)
}
func (m *SortType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SortType.Merge(m, src)
}
func (m *SortType) XXX_Size() int {
	return xxx_messageInfo_SortType.Size(m)
}
func (m *SortType) XXX_DiscardUnknown() {
	xxx_messageInfo_SortType.DiscardUnknown(m)
}

var xxx_messageInfo_SortType proto.InternalMessageInfo

func (m *SortType) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *SortType) GetSelector() Selector {
	if m != nil {
		return m.Selector
	}
	return Selector_MIN
}

func (m *SortType) GetOrigin() *Point {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *SortType) GetMissingLat() bool {
	if m != nil {
		return m.MissingLat
	}
	return false
}

func (m *SortType) GetReverse() bool {
	if m != nil {
		return m.Reverse
	}
	return false
}

// Point representation
type Point struct {
	Latitude             float64  `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude            float64  `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{18}
}

func (m *Point) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Point.Unmarshal(m, b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Point.Marshal(b, m, deterministic)
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return xxx_messageInfo_Point.Size(m)
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *Point) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

type SearchResponse struct {
	Diagnostics          *SearchResponse_Diagnostics `protobuf:"bytes,1,opt,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	HitTimeout           bool                        `protobuf:"varint,2,opt,name=hitTimeout,proto3" json:"hitTimeout,omitempty"`
	TotalHits            int64                       `protobuf:"varint,3,opt,name=totalHits,proto3" json:"totalHits,omitempty"`
	Hits                 []*SearchResponse_Hit       `protobuf:"bytes,4,rep,name=hits,proto3" json:"hits,omitempty"`
	SearchState          *SearchResponse_SearchState `protobuf:"bytes,5,opt,name=searchState,proto3" json:"searchState,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SearchResponse) Reset()         { *m = SearchResponse{} }
func (m *SearchResponse) String() string { return proto.CompactTextString(m) }
func (*SearchResponse) ProtoMessage()    {}
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{19}
}

func (m *SearchResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchResponse.Unmarshal(m, b)
}
func (m *SearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchResponse.Marshal(b, m, deterministic)
}
func (m *SearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse.Merge(m, src)
}
func (m *SearchResponse) XXX_Size() int {
	return xxx_messageInfo_SearchResponse.Size(m)
}
func (m *SearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse proto.InternalMessageInfo

func (m *SearchResponse) GetDiagnostics() *SearchResponse_Diagnostics {
	if m != nil {
		return m.Diagnostics
	}
	return nil
}

func (m *SearchResponse) GetHitTimeout() bool {
	if m != nil {
		return m.HitTimeout
	}
	return false
}

func (m *SearchResponse) GetTotalHits() int64 {
	if m != nil {
		return m.TotalHits
	}
	return 0
}

func (m *SearchResponse) GetHits() []*SearchResponse_Hit {
	if m != nil {
		return m.Hits
	}
	return nil
}

func (m *SearchResponse) GetSearchState() *SearchResponse_SearchState {
	if m != nil {
		return m.SearchState
	}
	return nil
}

type SearchResponse_Diagnostics struct {
	ParsedQuery               string   `protobuf:"bytes,1,opt,name=parsedQuery,proto3" json:"parsedQuery,omitempty"`
	RewrittenQuery            string   `protobuf:"bytes,2,opt,name=rewrittenQuery,proto3" json:"rewrittenQuery,omitempty"`
	DrillDownQuery            string   `protobuf:"bytes,3,opt,name=drillDownQuery,proto3" json:"drillDownQuery,omitempty"`
	FirstPassSearchTimeMs     float64  `protobuf:"fixed64,4,opt,name=firstPassSearchTimeMs,proto3" json:"firstPassSearchTimeMs,omitempty"`
	HighlightTimeMs           float64  `protobuf:"fixed64,5,opt,name=highlightTimeMs,proto3" json:"highlightTimeMs,omitempty"`
	GetFieldsTimeMs           float64  `protobuf:"fixed64,6,opt,name=getFieldsTimeMs,proto3" json:"getFieldsTimeMs,omitempty"`
	NewSnapshotSearcherOpenMs float64  `protobuf:"fixed64,7,opt,name=newSnapshotSearcherOpenMs,proto3" json:"newSnapshotSearcherOpenMs,omitempty"`
	NrtWaitTimeMs             float64  `protobuf:"fixed64,8,opt,name=nrtWaitTimeMs,proto3" json:"nrtWaitTimeMs,omitempty"`
	XXX_NoUnkeyedLiteral      struct{} `json:"-"`
	XXX_unrecognized          []byte   `json:"-"`
	XXX_sizecache             int32    `json:"-"`
}

func (m *SearchResponse_Diagnostics) Reset()         { *m = SearchResponse_Diagnostics{} }
func (m *SearchResponse_Diagnostics) String() string { return proto.CompactTextString(m) }
func (*SearchResponse_Diagnostics) ProtoMessage()    {}
func (*SearchResponse_Diagnostics) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{19, 0}
}

func (m *SearchResponse_Diagnostics) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchResponse_Diagnostics.Unmarshal(m, b)
}
func (m *SearchResponse_Diagnostics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchResponse_Diagnostics.Marshal(b, m, deterministic)
}
func (m *SearchResponse_Diagnostics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse_Diagnostics.Merge(m, src)
}
func (m *SearchResponse_Diagnostics) XXX_Size() int {
	return xxx_messageInfo_SearchResponse_Diagnostics.Size(m)
}
func (m *SearchResponse_Diagnostics) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse_Diagnostics.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse_Diagnostics proto.InternalMessageInfo

func (m *SearchResponse_Diagnostics) GetParsedQuery() string {
	if m != nil {
		return m.ParsedQuery
	}
	return ""
}

func (m *SearchResponse_Diagnostics) GetRewrittenQuery() string {
	if m != nil {
		return m.RewrittenQuery
	}
	return ""
}

func (m *SearchResponse_Diagnostics) GetDrillDownQuery() string {
	if m != nil {
		return m.DrillDownQuery
	}
	return ""
}

func (m *SearchResponse_Diagnostics) GetFirstPassSearchTimeMs() float64 {
	if m != nil {
		return m.FirstPassSearchTimeMs
	}
	return 0
}

func (m *SearchResponse_Diagnostics) GetHighlightTimeMs() float64 {
	if m != nil {
		return m.HighlightTimeMs
	}
	return 0
}

func (m *SearchResponse_Diagnostics) GetGetFieldsTimeMs() float64 {
	if m != nil {
		return m.GetFieldsTimeMs
	}
	return 0
}

func (m *SearchResponse_Diagnostics) GetNewSnapshotSearcherOpenMs() float64 {
	if m != nil {
		return m.NewSnapshotSearcherOpenMs
	}
	return 0
}

func (m *SearchResponse_Diagnostics) GetNrtWaitTimeMs() float64 {
	if m != nil {
		return m.NrtWaitTimeMs
	}
	return 0
}

type SearchResponse_Hit struct {
	LuceneDocId          int32                                              `protobuf:"varint,1,opt,name=luceneDocId,proto3" json:"luceneDocId,omitempty"`
	Score                float64                                            `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Fields               map[string]*SearchResponse_Hit_CompositeFieldValue `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SortedFields         map[string]*SearchResponse_Hit_CompositeFieldValue `protobuf:"bytes,4,rep,name=sortedFields,proto3" json:"sortedFields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *SearchResponse_Hit) Reset()         { *m = SearchResponse_Hit{} }
func (m *SearchResponse_Hit) String() string { return proto.CompactTextString(m) }
func (*SearchResponse_Hit) ProtoMessage()    {}
func (*SearchResponse_Hit) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{19, 1}
}

func (m *SearchResponse_Hit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchResponse_Hit.Unmarshal(m, b)
}
func (m *SearchResponse_Hit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchResponse_Hit.Marshal(b, m, deterministic)
}
func (m *SearchResponse_Hit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse_Hit.Merge(m, src)
}
func (m *SearchResponse_Hit) XXX_Size() int {
	return xxx_messageInfo_SearchResponse_Hit.Size(m)
}
func (m *SearchResponse_Hit) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse_Hit.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse_Hit proto.InternalMessageInfo

func (m *SearchResponse_Hit) GetLuceneDocId() int32 {
	if m != nil {
		return m.LuceneDocId
	}
	return 0
}

func (m *SearchResponse_Hit) GetScore() float64 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *SearchResponse_Hit) GetFields() map[string]*SearchResponse_Hit_CompositeFieldValue {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *SearchResponse_Hit) GetSortedFields() map[string]*SearchResponse_Hit_CompositeFieldValue {
	if m != nil {
		return m.SortedFields
	}
	return nil
}

type SearchResponse_Hit_FieldValue struct {
	// Types that are valid to be assigned to FieldValues:
	//	*SearchResponse_Hit_FieldValue_TextValue
	//	*SearchResponse_Hit_FieldValue_BooleanValue
	//	*SearchResponse_Hit_FieldValue_IntValue
	//	*SearchResponse_Hit_FieldValue_LongValue
	//	*SearchResponse_Hit_FieldValue_FloatValue
	//	*SearchResponse_Hit_FieldValue_DoubleValue
	//	*SearchResponse_Hit_FieldValue_LatLngValue
	FieldValues          isSearchResponse_Hit_FieldValue_FieldValues `protobuf_oneof:"FieldValues"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *SearchResponse_Hit_FieldValue) Reset()         { *m = SearchResponse_Hit_FieldValue{} }
func (m *SearchResponse_Hit_FieldValue) String() string { return proto.CompactTextString(m) }
func (*SearchResponse_Hit_FieldValue) ProtoMessage()    {}
func (*SearchResponse_Hit_FieldValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{19, 1, 0}
}

func (m *SearchResponse_Hit_FieldValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchResponse_Hit_FieldValue.Unmarshal(m, b)
}
func (m *SearchResponse_Hit_FieldValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchResponse_Hit_FieldValue.Marshal(b, m, deterministic)
}
func (m *SearchResponse_Hit_FieldValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse_Hit_FieldValue.Merge(m, src)
}
func (m *SearchResponse_Hit_FieldValue) XXX_Size() int {
	return xxx_messageInfo_SearchResponse_Hit_FieldValue.Size(m)
}
func (m *SearchResponse_Hit_FieldValue) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse_Hit_FieldValue.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse_Hit_FieldValue proto.InternalMessageInfo

type isSearchResponse_Hit_FieldValue_FieldValues interface {
	isSearchResponse_Hit_FieldValue_FieldValues()
}

type SearchResponse_Hit_FieldValue_TextValue struct {
	TextValue string `protobuf:"bytes,1,opt,name=textValue,proto3,oneof"`
}

type SearchResponse_Hit_FieldValue_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,2,opt,name=booleanValue,proto3,oneof"`
}

type SearchResponse_Hit_FieldValue_IntValue struct {
	IntValue int32 `protobuf:"varint,3,opt,name=intValue,proto3,oneof"`
}

type SearchResponse_Hit_FieldValue_LongValue struct {
	LongValue int64 `protobuf:"varint,4,opt,name=longValue,proto3,oneof"`
}

type SearchResponse_Hit_FieldValue_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,5,opt,name=floatValue,proto3,oneof"`
}

type SearchResponse_Hit_FieldValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,6,opt,name=doubleValue,proto3,oneof"`
}

type SearchResponse_Hit_FieldValue_LatLngValue struct {
	LatLngValue *latlng.LatLng `protobuf:"bytes,7,opt,name=latLngValue,proto3,oneof"`
}

func (*SearchResponse_Hit_FieldValue_TextValue) isSearchResponse_Hit_FieldValue_FieldValues() {}

func (*SearchResponse_Hit_FieldValue_BooleanValue) isSearchResponse_Hit_FieldValue_FieldValues() {}

func (*SearchResponse_Hit_FieldValue_IntValue) isSearchResponse_Hit_FieldValue_FieldValues() {}

func (*SearchResponse_Hit_FieldValue_LongValue) isSearchResponse_Hit_FieldValue_FieldValues() {}

func (*SearchResponse_Hit_FieldValue_FloatValue) isSearchResponse_Hit_FieldValue_FieldValues() {}

func (*SearchResponse_Hit_FieldValue_DoubleValue) isSearchResponse_Hit_FieldValue_FieldValues() {}

func (*SearchResponse_Hit_FieldValue_LatLngValue) isSearchResponse_Hit_FieldValue_FieldValues() {}

func (m *SearchResponse_Hit_FieldValue) GetFieldValues() isSearchResponse_Hit_FieldValue_FieldValues {
	if m != nil {
		return m.FieldValues
	}
	return nil
}

func (m *SearchResponse_Hit_FieldValue) GetTextValue() string {
	if x, ok := m.GetFieldValues().(*SearchResponse_Hit_FieldValue_TextValue); ok {
		return x.TextValue
	}
	return ""
}

func (m *SearchResponse_Hit_FieldValue) GetBooleanValue() bool {
	if x, ok := m.GetFieldValues().(*SearchResponse_Hit_FieldValue_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (m *SearchResponse_Hit_FieldValue) GetIntValue() int32 {
	if x, ok := m.GetFieldValues().(*SearchResponse_Hit_FieldValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (m *SearchResponse_Hit_FieldValue) GetLongValue() int64 {
	if x, ok := m.GetFieldValues().(*SearchResponse_Hit_FieldValue_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (m *SearchResponse_Hit_FieldValue) GetFloatValue() float32 {
	if x, ok := m.GetFieldValues().(*SearchResponse_Hit_FieldValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *SearchResponse_Hit_FieldValue) GetDoubleValue() float64 {
	if x, ok := m.GetFieldValues().(*SearchResponse_Hit_FieldValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *SearchResponse_Hit_FieldValue) GetLatLngValue() *latlng.LatLng {
	if x, ok := m.GetFieldValues().(*SearchResponse_Hit_FieldValue_LatLngValue); ok {
		return x.LatLngValue
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SearchResponse_Hit_FieldValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SearchResponse_Hit_FieldValue_TextValue)(nil),
		(*SearchResponse_Hit_FieldValue_BooleanValue)(nil),
		(*SearchResponse_Hit_FieldValue_IntValue)(nil),
		(*SearchResponse_Hit_FieldValue_LongValue)(nil),
		(*SearchResponse_Hit_FieldValue_FloatValue)(nil),
		(*SearchResponse_Hit_FieldValue_DoubleValue)(nil),
		(*SearchResponse_Hit_FieldValue_LatLngValue)(nil),
	}
}

type SearchResponse_Hit_CompositeFieldValue struct {
	FieldValue           []*SearchResponse_Hit_FieldValue `protobuf:"bytes,3,rep,name=fieldValue,proto3" json:"fieldValue,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *SearchResponse_Hit_CompositeFieldValue) Reset() {
	*m = SearchResponse_Hit_CompositeFieldValue{}
}
func (m *SearchResponse_Hit_CompositeFieldValue) String() string { return proto.CompactTextString(m) }
func (*SearchResponse_Hit_CompositeFieldValue) ProtoMessage()    {}
func (*SearchResponse_Hit_CompositeFieldValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{19, 1, 1}
}

func (m *SearchResponse_Hit_CompositeFieldValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchResponse_Hit_CompositeFieldValue.Unmarshal(m, b)
}
func (m *SearchResponse_Hit_CompositeFieldValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchResponse_Hit_CompositeFieldValue.Marshal(b, m, deterministic)
}
func (m *SearchResponse_Hit_CompositeFieldValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse_Hit_CompositeFieldValue.Merge(m, src)
}
func (m *SearchResponse_Hit_CompositeFieldValue) XXX_Size() int {
	return xxx_messageInfo_SearchResponse_Hit_CompositeFieldValue.Size(m)
}
func (m *SearchResponse_Hit_CompositeFieldValue) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse_Hit_CompositeFieldValue.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse_Hit_CompositeFieldValue proto.InternalMessageInfo

func (m *SearchResponse_Hit_CompositeFieldValue) GetFieldValue() []*SearchResponse_Hit_FieldValue {
	if m != nil {
		return m.FieldValue
	}
	return nil
}

type SearchResponse_SearchState struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SearcherVersion      int64    `protobuf:"varint,2,opt,name=searcherVersion,proto3" json:"searcherVersion,omitempty"`
	LastDocId            int32    `protobuf:"varint,3,opt,name=lastDocId,proto3" json:"lastDocId,omitempty"`
	LastFieldValues      []string `protobuf:"bytes,4,rep,name=lastFieldValues,proto3" json:"lastFieldValues,omitempty"`
	LastScore            float32  `protobuf:"fixed32,5,opt,name=lastScore,proto3" json:"lastScore,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchResponse_SearchState) Reset()         { *m = SearchResponse_SearchState{} }
func (m *SearchResponse_SearchState) String() string { return proto.CompactTextString(m) }
func (*SearchResponse_SearchState) ProtoMessage()    {}
func (*SearchResponse_SearchState) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{19, 2}
}

func (m *SearchResponse_SearchState) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchResponse_SearchState.Unmarshal(m, b)
}
func (m *SearchResponse_SearchState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchResponse_SearchState.Marshal(b, m, deterministic)
}
func (m *SearchResponse_SearchState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResponse_SearchState.Merge(m, src)
}
func (m *SearchResponse_SearchState) XXX_Size() int {
	return xxx_messageInfo_SearchResponse_SearchState.Size(m)
}
func (m *SearchResponse_SearchState) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResponse_SearchState.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResponse_SearchState proto.InternalMessageInfo

func (m *SearchResponse_SearchState) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SearchResponse_SearchState) GetSearcherVersion() int64 {
	if m != nil {
		return m.SearcherVersion
	}
	return 0
}

func (m *SearchResponse_SearchState) GetLastDocId() int32 {
	if m != nil {
		return m.LastDocId
	}
	return 0
}

func (m *SearchResponse_SearchState) GetLastFieldValues() []string {
	if m != nil {
		return m.LastFieldValues
	}
	return nil
}

func (m *SearchResponse_SearchState) GetLastScore() float32 {
	if m != nil {
		return m.LastScore
	}
	return 0
}

func init() {
	proto.RegisterEnum("luceneserver.MatchOperator", MatchOperator_name, MatchOperator_value)
	proto.RegisterEnum("luceneserver.QueryType", QueryType_name, QueryType_value)
	proto.RegisterEnum("luceneserver.Selector", Selector_name, Selector_value)
	proto.RegisterEnum("luceneserver.BooleanClause_Occur", BooleanClause_Occur_name, BooleanClause_Occur_value)
	proto.RegisterType((*BooleanClause)(nil), "luceneserver.BooleanClause")
	proto.RegisterType((*FuzzyParams)(nil), "luceneserver.FuzzyParams")
	proto.RegisterType((*BooleanQuery)(nil), "luceneserver.BooleanQuery")
	proto.RegisterType((*PhraseQuery)(nil), "luceneserver.PhraseQuery")
	proto.RegisterType((*FunctionScoreQuery)(nil), "luceneserver.FunctionScoreQuery")
	proto.RegisterType((*TermQuery)(nil), "luceneserver.TermQuery")
	proto.RegisterType((*TermInSetQuery)(nil), "luceneserver.TermInSetQuery")
	proto.RegisterType((*TermInSetQuery_TextTerms)(nil), "luceneserver.TermInSetQuery.TextTerms")
	proto.RegisterType((*TermInSetQuery_IntTerms)(nil), "luceneserver.TermInSetQuery.IntTerms")
	proto.RegisterType((*TermInSetQuery_LongTerms)(nil), "luceneserver.TermInSetQuery.LongTerms")
	proto.RegisterType((*TermInSetQuery_FloatTerms)(nil), "luceneserver.TermInSetQuery.FloatTerms")
	proto.RegisterType((*TermInSetQuery_DoubleTerms)(nil), "luceneserver.TermInSetQuery.DoubleTerms")
	proto.RegisterType((*DisjunctionMaxQuery)(nil), "luceneserver.DisjunctionMaxQuery")
	proto.RegisterType((*MatchQuery)(nil), "luceneserver.MatchQuery")
	proto.RegisterType((*MatchPhraseQuery)(nil), "luceneserver.MatchPhraseQuery")
	proto.RegisterType((*MultiMatchQuery)(nil), "luceneserver.MultiMatchQuery")
	proto.RegisterMapType((map[string]float32)(nil), "luceneserver.MultiMatchQuery.FieldBoostsEntry")
	proto.RegisterType((*RangeQuery)(nil), "luceneserver.RangeQuery")
	proto.RegisterType((*Query)(nil), "luceneserver.Query")
	proto.RegisterType((*SearchRequest)(nil), "luceneserver.SearchRequest")
	proto.RegisterType((*VirtualField)(nil), "luceneserver.VirtualField")
	proto.RegisterType((*QuerySortField)(nil), "luceneserver.QuerySortField")
	proto.RegisterType((*SortFields)(nil), "luceneserver.SortFields")
	proto.RegisterType((*SortType)(nil), "luceneserver.SortType")
	proto.RegisterType((*Point)(nil), "luceneserver.Point")
	proto.RegisterType((*SearchResponse)(nil), "luceneserver.SearchResponse")
	proto.RegisterType((*SearchResponse_Diagnostics)(nil), "luceneserver.SearchResponse.Diagnostics")
	proto.RegisterType((*SearchResponse_Hit)(nil), "luceneserver.SearchResponse.Hit")
	proto.RegisterMapType((map[string]*SearchResponse_Hit_CompositeFieldValue)(nil), "luceneserver.SearchResponse.Hit.FieldsEntry")
	proto.RegisterMapType((map[string]*SearchResponse_Hit_CompositeFieldValue)(nil), "luceneserver.SearchResponse.Hit.SortedFieldsEntry")
	proto.RegisterType((*SearchResponse_Hit_FieldValue)(nil), "luceneserver.SearchResponse.Hit.FieldValue")
	proto.RegisterType((*SearchResponse_Hit_CompositeFieldValue)(nil), "luceneserver.SearchResponse.Hit.CompositeFieldValue")
	proto.RegisterType((*SearchResponse_SearchState)(nil), "luceneserver.SearchResponse.SearchState")
}

func init() {
	proto.RegisterFile("search.proto", fileDescriptor_453745cff914010e)
}

var fileDescriptor_453745cff914010e = []byte{
	// 2293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0xdd, 0x72, 0x23, 0x47,
	0x15, 0xd6, 0xe8, 0xcf, 0xd2, 0x19, 0xdb, 0xab, 0xb4, 0x37, 0x89, 0x22, 0x96, 0xa0, 0x1d, 0x36,
	0xc1, 0x6c, 0x28, 0x05, 0xcc, 0x52, 0x4b, 0x2d, 0x21, 0x15, 0xdb, 0x92, 0x23, 0x2d, 0x92, 0xec,
	0x6d, 0xc9, 0x9b, 0xa5, 0xb8, 0x70, 0x8d, 0xa5, 0xb6, 0x34, 0x64, 0x34, 0x33, 0x99, 0x6e, 0xed,
	0xda, 0x5b, 0xdc, 0x50, 0x45, 0xe5, 0x0d, 0xb8, 0xa2, 0x0a, 0xaa, 0xb8, 0xe6, 0x0d, 0xb8, 0xe4,
	0x06, 0x6e, 0xf3, 0x1a, 0x14, 0xef, 0x40, 0xf5, 0xcf, 0xcc, 0xf4, 0x8c, 0x65, 0xed, 0x2e, 0x45,
	0x51, 0xdc, 0xe9, 0x7c, 0xfd, 0xf5, 0xe9, 0xee, 0xd3, 0xe7, 0xaf, 0x47, 0xb0, 0x49, 0x89, 0x1d,
	0x4e, 0xe6, 0xad, 0x20, 0xf4, 0x99, 0x8f, 0x36, 0xdd, 0xe5, 0x84, 0x78, 0x84, 0x92, 0xf0, 0x39,
	0x09, 0x1b, 0xf5, 0x99, 0xef, 0xcf, 0x5c, 0xf2, 0x31, 0xbb, 0x0a, 0xc8, 0xc7, 0xae, 0xcd, 0x5c,
	0x6f, 0x26, 0x79, 0x8d, 0x6d, 0xdb, 0xb3, 0xdd, 0x2b, 0xea, 0x50, 0x29, 0x5b, 0x7f, 0x31, 0x60,
	0xeb, 0xc0, 0xf7, 0x5d, 0x62, 0x7b, 0x87, 0xae, 0xbd, 0xa4, 0x04, 0x7d, 0x1f, 0x4a, 0x5f, 0x2d,
	0x49, 0x78, 0x55, 0x37, 0x9a, 0xc6, 0xae, 0xb9, 0xb7, 0xd3, 0xd2, 0x35, 0xb7, 0x9e, 0xf0, 0x21,
	0x2c, 0x19, 0xe8, 0x21, 0x94, 0xfc, 0xc9, 0x64, 0x19, 0xd6, 0xf3, 0x4d, 0x63, 0x77, 0x7b, 0xef,
	0x6e, 0x9a, 0x9a, 0x52, 0xdb, 0x3a, 0xe6, 0x44, 0x2c, 0xf9, 0xd6, 0x43, 0x28, 0x09, 0x19, 0x01,
	0x94, 0x47, 0xdd, 0xe3, 0xd3, 0x7e, 0xbb, 0x96, 0x43, 0x15, 0x28, 0x0e, 0x4e, 0x47, 0xe3, 0x9a,
	0xc1, 0xd1, 0xa3, 0x5e, 0x7f, 0xdc, 0xc1, 0xb5, 0x3c, 0xda, 0x84, 0x0a, 0x47, 0xcf, 0x86, 0xc7,
	0xe3, 0x5a, 0xc1, 0xfa, 0x83, 0x01, 0xe6, 0xd1, 0xf2, 0xe5, 0xcb, 0xab, 0x13, 0x3b, 0xb4, 0x17,
	0x14, 0x35, 0xa0, 0xb2, 0xb0, 0x2f, 0x3b, 0x53, 0x87, 0x51, 0xb1, 0xdf, 0x12, 0x8e, 0x65, 0x64,
	0xc1, 0x66, 0x10, 0x92, 0x0b, 0xe7, 0xb2, 0x4f, 0xbc, 0x19, 0x9b, 0x8b, 0x4d, 0x96, 0x70, 0x0a,
	0x43, 0xf7, 0x60, 0x8b, 0xf3, 0x2f, 0x03, 0xdb, 0xa3, 0x8e, 0xef, 0xd1, 0x7a, 0x41, 0x90, 0xd2,
	0x20, 0xfa, 0x10, 0xb6, 0x59, 0x68, 0x7b, 0x34, 0xf0, 0xa9, 0xc3, 0x04, 0xad, 0xd8, 0x34, 0x76,
	0x2b, 0x38, 0x83, 0x5a, 0xbf, 0x35, 0x60, 0x53, 0x9d, 0x5a, 0xd8, 0x09, 0xfd, 0x04, 0x36, 0x26,
	0xe2, 0xf8, 0x7c, 0x77, 0x85, 0x5d, 0x73, 0xef, 0x5b, 0x6b, 0x4c, 0x84, 0x23, 0x2e, 0x7a, 0x04,
	0xf5, 0x85, 0xe3, 0x39, 0x8b, 0xe5, 0x62, 0xb8, 0x5c, 0x9c, 0x93, 0x70, 0x34, 0xf7, 0x97, 0xee,
	0x74, 0x60, 0xb3, 0x49, 0x74, 0x8a, 0x1b, 0xc7, 0xad, 0x01, 0x98, 0x27, 0xf3, 0xd0, 0xa6, 0x44,
	0xee, 0x00, 0x41, 0x91, 0xba, 0x7e, 0xa0, 0x8c, 0x23, 0x7e, 0xa3, 0xdb, 0x50, 0xba, 0x70, 0x88,
	0x3b, 0x15, 0xba, 0xaa, 0x58, 0x0a, 0x1c, 0x65, 0x24, 0x5c, 0x70, 0x13, 0x14, 0x38, 0x2a, 0x04,
	0xeb, 0x57, 0x80, 0x8e, 0x96, 0xde, 0x84, 0x9f, 0x6f, 0x34, 0xf1, 0x43, 0xa5, 0xf5, 0x0d, 0x7c,
	0xa4, 0x01, 0x95, 0x0b, 0xa5, 0x40, 0xad, 0x17, 0xcb, 0xd6, 0x37, 0x06, 0x54, 0xc7, 0x24, 0x5c,
	0x48, 0xa5, 0xf1, 0xb6, 0x0c, 0x7d, 0x5b, 0xef, 0x43, 0x95, 0x91, 0x4b, 0xf6, 0xd4, 0x76, 0x97,
	0x44, 0x2a, 0xe8, 0xe6, 0x70, 0x02, 0xa1, 0x3b, 0x50, 0x71, 0x3c, 0x35, 0x2c, 0x2e, 0xaf, 0x9b,
	0xc3, 0x31, 0xc2, 0x67, 0xbb, 0xbe, 0x37, 0x93, 0xc3, 0xfc, 0xd2, 0x0a, 0x7c, 0x76, 0x0c, 0xa1,
	0x26, 0xc0, 0x85, 0xeb, 0xdb, 0x6a, 0x7e, 0xa9, 0x69, 0xec, 0xe6, 0xbb, 0x39, 0xac, 0x61, 0xc8,
	0x02, 0x73, 0xea, 0x2f, 0xcf, 0x5d, 0x22, 0x29, 0xe5, 0xa6, 0xb1, 0x6b, 0x74, 0x73, 0x58, 0x07,
	0x0f, 0x4c, 0x79, 0x8c, 0xf1, 0x55, 0x40, 0xa8, 0xf5, 0x4d, 0x11, 0xb6, 0xb9, 0xd4, 0xf3, 0x46,
	0x84, 0xad, 0x3b, 0xd9, 0x91, 0x3c, 0xd9, 0x58, 0x18, 0x3d, 0x2f, 0x0c, 0xf9, 0x61, 0xda, 0x90,
	0x69, 0x35, 0xad, 0x71, 0xc4, 0x8e, 0x2c, 0x20, 0x04, 0x74, 0x28, 0x2c, 0x30, 0x56, 0x77, 0xc7,
	0xd5, 0x7c, 0xb0, 0x56, 0x4d, 0xcf, 0x8b, 0xb5, 0xc4, 0x13, 0xf9, 0x66, 0xb8, 0x55, 0xa4, 0x96,
	0xe2, 0x6b, 0x6c, 0xa6, 0x1f, 0xb1, 0x23, 0x83, 0x4a, 0x3d, 0x3d, 0x65, 0x50, 0xa9, 0xa8, 0x24,
	0x14, 0x7d, 0x6f, 0xad, 0xa2, 0xa3, 0x98, 0x1e, 0x5b, 0x5e, 0xaa, 0xea, 0x47, 0x96, 0x97, 0xba,
	0xca, 0x42, 0xd7, 0xee, 0x5a, 0x5d, 0xed, 0x84, 0x9f, 0xdc, 0x91, 0x10, 0x1b, 0x77, 0xf9, 0x1d,
	0x45, 0x26, 0x8b, 0x7d, 0xdd, 0xd0, 0x7c, 0xbd, 0xd1, 0x84, 0x4a, 0x64, 0x9b, 0x34, 0xa3, 0x14,
	0x31, 0xee, 0x42, 0x35, 0x3e, 0x77, 0x9a, 0x52, 0x88, 0x28, 0x16, 0x40, 0x72, 0xa2, 0x34, 0x27,
	0x1f, 0x71, 0xbe, 0x0b, 0xa6, 0xb6, 0xd3, 0x34, 0xc9, 0x50, 0xa4, 0xb4, 0x53, 0xfd, 0x06, 0x76,
	0xda, 0x0e, 0xfd, 0xb5, 0x0a, 0x9c, 0x81, 0x7d, 0x29, 0x1d, 0xeb, 0x47, 0x50, 0x9d, 0x2a, 0x38,
	0xca, 0x30, 0x2b, 0x63, 0x31, 0x61, 0xa1, 0x3d, 0xb8, 0xcd, 0x1c, 0x72, 0x10, 0x12, 0xfb, 0x4b,
	0x12, 0x0e, 0x96, 0x2e, 0x73, 0x02, 0xd7, 0x21, 0x32, 0x85, 0xe7, 0xf1, 0xca, 0x31, 0xeb, 0x8f,
	0x79, 0x00, 0x91, 0x5d, 0xd6, 0xb9, 0xf3, 0xed, 0x28, 0x27, 0xa8, 0xac, 0x12, 0x95, 0x88, 0x8a,
	0x1f, 0x90, 0xd0, 0x66, 0x7e, 0x28, 0x9c, 0x73, 0x3b, 0x9b, 0x02, 0x85, 0xde, 0x63, 0x45, 0xc1,
	0x31, 0x79, 0x6d, 0x0e, 0x2c, 0xae, 0xcf, 0x81, 0x68, 0x0f, 0x2a, 0xa2, 0xcc, 0xbd, 0x24, 0xa1,
	0x72, 0xc1, 0x77, 0xd2, 0x8b, 0xee, 0xab, 0x51, 0x1c, 0xf3, 0xd0, 0xcf, 0xc0, 0xbc, 0x48, 0x0a,
	0x8b, 0xf2, 0xb6, 0xf7, 0xd2, 0xd3, 0xb4, 0xca, 0x83, 0x75, 0xb6, 0xf5, 0xb5, 0x01, 0x35, 0xb1,
	0xb4, 0x9e, 0x7a, 0xdf, 0xc4, 0x4c, 0x51, 0x9a, 0x2e, 0x68, 0x69, 0x5a, 0x3f, 0x45, 0xf1, 0xf5,
	0x4e, 0x61, 0xfd, 0xb3, 0x00, 0xb7, 0xc4, 0xc5, 0x69, 0xd7, 0xf5, 0x0e, 0x94, 0xc5, 0xd2, 0x91,
	0xb7, 0x2b, 0xe9, 0x86, 0x9d, 0x9c, 0x80, 0x29, 0xc6, 0x0f, 0x7c, 0x9f, 0x32, 0x59, 0x0c, 0xcc,
	0xbd, 0x56, 0xe6, 0xce, 0xd2, 0x2b, 0xb4, 0x8e, 0x92, 0x09, 0x1d, 0x8f, 0x85, 0x57, 0x58, 0x57,
	0x91, 0x72, 0x81, 0xe2, 0x7f, 0xcb, 0x05, 0x4a, 0x6f, 0xe0, 0x02, 0xe5, 0xff, 0xcc, 0x05, 0x36,
	0xde, 0xc4, 0x05, 0x6e, 0x8c, 0xab, 0xca, 0xcd, 0x71, 0xd5, 0xf8, 0x14, 0x6a, 0x59, 0xd3, 0xa1,
	0x1a, 0x14, 0xbe, 0x24, 0x57, 0xca, 0x67, 0xf8, 0x4f, 0x7e, 0x4f, 0xcf, 0xe3, 0xea, 0x97, 0xc7,
	0x52, 0x78, 0x94, 0xff, 0xa9, 0x61, 0x0d, 0x01, 0xb0, 0xed, 0xcd, 0x5e, 0xe5, 0x6f, 0xae, 0xff,
	0x42, 0x05, 0x78, 0x15, 0x4b, 0x81, 0xa3, 0xcb, 0x20, 0x20, 0x32, 0x26, 0xab, 0x58, 0x0a, 0xd6,
	0x9f, 0xca, 0x50, 0x8a, 0x1a, 0x97, 0xaa, 0x70, 0x07, 0x9e, 0x7d, 0x84, 0xbe, 0xed, 0xbd, 0x77,
	0x57, 0x24, 0x16, 0x3e, 0x8c, 0x13, 0x26, 0x57, 0x7b, 0xce, 0xcf, 0x12, 0x6d, 0x55, 0x08, 0xe8,
	0x33, 0xd8, 0x3c, 0xd7, 0xba, 0x22, 0x55, 0xa4, 0x1a, 0x2b, 0x5b, 0x21, 0xc1, 0xe8, 0xe6, 0x70,
	0x6a, 0x06, 0xfa, 0x39, 0x98, 0x41, 0x12, 0x59, 0x2a, 0x1a, 0x32, 0x37, 0xa3, 0x85, 0x1e, 0xcf,
	0xfd, 0x1a, 0x1f, 0x61, 0x40, 0x17, 0xd7, 0x9a, 0x18, 0x95, 0x19, 0x9a, 0xd9, 0xfb, 0xcd, 0xf2,
	0xba, 0x39, 0xbc, 0x62, 0x36, 0x7a, 0xc8, 0xab, 0xb7, 0x6a, 0x5d, 0x94, 0x87, 0xbd, 0x7b, 0xbd,
	0x36, 0x45, 0x1a, 0x12, 0x2e, 0x3a, 0x82, 0x6d, 0x96, 0xaa, 0x5a, 0xca, 0xd1, 0xee, 0xac, 0xab,
	0x6c, 0xdd, 0x1c, 0xce, 0xcc, 0x42, 0xa7, 0xb0, 0x33, 0xbd, 0x5e, 0x12, 0x84, 0xbf, 0x99, 0xd9,
	0x56, 0x7c, 0x45, 0xed, 0xe8, 0xe6, 0xf0, 0xaa, 0xf9, 0xe8, 0x11, 0xc0, 0x22, 0x8e, 0xec, 0x7a,
	0x55, 0x68, 0xab, 0xaf, 0x88, 0xd7, 0x48, 0x89, 0xc6, 0x46, 0x7d, 0xa8, 0x2d, 0x32, 0x59, 0xb0,
	0x0e, 0x42, 0xc3, 0xfb, 0x2b, 0x34, 0xa4, 0x2f, 0xec, 0xda, 0x4c, 0xd4, 0x83, 0x5b, 0x8b, 0x74,
	0xa2, 0xa9, 0x9b, 0x42, 0xd9, 0xb7, 0xd7, 0x66, 0xa3, 0x6e, 0x0e, 0x67, 0xe7, 0xf1, 0x43, 0x85,
	0x71, 0xa0, 0xd4, 0x37, 0x57, 0x1d, 0x2a, 0x09, 0x24, 0x7e, 0xa8, 0x84, 0xcd, 0xeb, 0xb0, 0xf8,
	0x31, 0xf4, 0xa7, 0xc4, 0xfa, 0xba, 0x08, 0x5b, 0x23, 0xf1, 0xee, 0xc2, 0xe4, 0xab, 0x25, 0xa1,
	0x0c, 0xdd, 0x81, 0xaa, 0xe3, 0x4d, 0xc9, 0xe5, 0xd0, 0x5e, 0x10, 0x15, 0x79, 0x09, 0xc0, 0xbb,
	0x5f, 0xca, 0xec, 0x90, 0x75, 0x1d, 0xa6, 0x3a, 0xf7, 0x58, 0x46, 0x75, 0xd8, 0x60, 0x7e, 0xd0,
	0x75, 0x58, 0xf4, 0xea, 0x88, 0x44, 0xf4, 0x3e, 0x00, 0x73, 0x16, 0xc4, 0x5f, 0xb2, 0x11, 0x99,
	0x08, 0x6f, 0x37, 0xb0, 0x86, 0xf0, 0xf7, 0x48, 0x48, 0x58, 0xe8, 0x90, 0xe7, 0xe4, 0x48, 0x66,
	0xf6, 0x92, 0xc8, 0xec, 0x19, 0x94, 0xef, 0x4d, 0xc6, 0x26, 0xb9, 0x64, 0xc2, 0x47, 0xab, 0x38,
	0x01, 0xd0, 0x67, 0xb0, 0xf5, 0xdc, 0x09, 0xd9, 0xd2, 0x76, 0x39, 0x9d, 0x4e, 0xeb, 0x1b, 0x22,
	0xd7, 0x67, 0xe2, 0xf2, 0x69, 0x42, 0x99, 0xe2, 0xf4, 0x84, 0xe4, 0x19, 0x50, 0x79, 0xe5, 0x33,
	0xe0, 0x91, 0xda, 0xca, 0xc8, 0x0f, 0x99, 0xf2, 0xaa, 0x3b, 0x2b, 0xe8, 0x7c, 0x58, 0x2e, 0x95,
	0xd0, 0x65, 0x8b, 0x3f, 0x25, 0x97, 0x9f, 0x13, 0x4f, 0xb8, 0x53, 0x41, 0x76, 0xae, 0x12, 0x41,
	0x0d, 0xd8, 0x78, 0x4e, 0x42, 0xfe, 0x50, 0x13, 0xee, 0xc1, 0x07, 0x23, 0x80, 0xcf, 0xa4, 0x9e,
	0x1d, 0xd0, 0xb9, 0xcf, 0xc4, 0xad, 0xf3, 0xb7, 0x43, 0x8c, 0xa0, 0x16, 0x20, 0xe6, 0x33, 0xdb,
	0xe5, 0x36, 0x1f, 0xcf, 0x43, 0x42, 0xe7, 0xbe, 0x3b, 0xad, 0x6f, 0x89, 0xbb, 0x58, 0x31, 0x72,
	0x00, 0x50, 0x91, 0x77, 0x4f, 0x42, 0xeb, 0x00, 0x36, 0x75, 0xcb, 0xf0, 0x2b, 0x23, 0x97, 0x41,
	0x48, 0xa8, 0xd8, 0x88, 0xf4, 0x03, 0x0d, 0xe1, 0x05, 0xde, 0xe3, 0x1e, 0x22, 0xb3, 0xb0, 0xf8,
	0x6d, 0xfd, 0xce, 0x80, 0xed, 0xf4, 0xa9, 0x51, 0x93, 0xf7, 0xbc, 0x6d, 0x7f, 0x22, 0x12, 0x8d,
	0x7c, 0xd2, 0x56, 0xb0, 0x0e, 0xf1, 0x85, 0xa6, 0xfe, 0xc0, 0xbe, 0x14, 0xa2, 0x50, 0x57, 0xc1,
	0x1a, 0x82, 0x7e, 0x18, 0x57, 0xfb, 0xc2, 0x2a, 0x37, 0x8f, 0x97, 0xa2, 0x51, 0x1f, 0x60, 0x75,
	0x01, 0x12, 0x14, 0x3d, 0x82, 0x4d, 0xea, 0x87, 0x8c, 0x4c, 0x8f, 0x92, 0x9e, 0xe1, 0x5a, 0xf1,
	0xe4, 0x7c, 0x91, 0xfb, 0x53, 0x5c, 0xeb, 0x6f, 0x06, 0x54, 0xa2, 0x21, 0xee, 0x7c, 0x62, 0x01,
	0x3d, 0x30, 0x62, 0x80, 0xd7, 0x67, 0x4a, 0x5c, 0x32, 0xe1, 0x4d, 0x81, 0xfc, 0x7a, 0x90, 0x5d,
	0x42, 0x8d, 0xe2, 0x98, 0x87, 0x3e, 0x82, 0xb2, 0x1f, 0x3a, 0x33, 0xc7, 0x53, 0x47, 0xcb, 0xf8,
	0xdb, 0x89, 0xef, 0x78, 0x0c, 0x2b, 0x0a, 0xb7, 0xd3, 0xc2, 0xa1, 0xd4, 0xf1, 0x66, 0x7d, 0x9b,
	0xa9, 0xf7, 0xba, 0x86, 0xf0, 0xe8, 0x0b, 0x09, 0xf7, 0x13, 0xf9, 0xec, 0xab, 0xe0, 0x48, 0xb4,
	0xf6, 0xa1, 0x24, 0x54, 0xf1, 0xe0, 0x75, 0x6d, 0xe6, 0xb0, 0xe5, 0x54, 0x1e, 0xc0, 0xc0, 0xb1,
	0xcc, 0x4f, 0xc7, 0x1f, 0x3d, 0x72, 0x30, 0x2f, 0x06, 0x13, 0xc0, 0xfa, 0xfd, 0x16, 0x6c, 0x47,
	0x69, 0x82, 0x06, 0xbe, 0x47, 0x09, 0x7a, 0x0c, 0xe6, 0xd4, 0xb1, 0x67, 0x9e, 0x4f, 0x99, 0x33,
	0xa1, 0xea, 0xe1, 0xbc, 0x9b, 0x3d, 0xb3, 0x3e, 0xa5, 0xd5, 0x4e, 0xf8, 0x58, 0x9f, 0xcc, 0xcf,
	0x36, 0x77, 0xd8, 0x58, 0x26, 0x84, 0xc8, 0x07, 0x12, 0x84, 0x6f, 0x2e, 0x76, 0x5f, 0x61, 0xab,
	0x02, 0x4e, 0x00, 0xf4, 0x00, 0x8a, 0x73, 0x3e, 0x50, 0x14, 0x37, 0xdb, 0x5c, 0xbb, 0x85, 0xae,
	0xc3, 0xb0, 0x60, 0xf3, 0xfd, 0xcb, 0x0f, 0x4e, 0x23, 0x66, 0x33, 0xa2, 0x8a, 0xe7, 0xfa, 0xfd,
	0x8f, 0x12, 0x3e, 0xd6, 0x27, 0x37, 0xfe, 0x95, 0x07, 0x53, 0x3b, 0x1c, 0xf7, 0xfa, 0xc0, 0x0e,
	0x29, 0x99, 0x3e, 0x89, 0x3f, 0x2a, 0x54, 0xb1, 0x0e, 0xc9, 0x8c, 0xf7, 0x22, 0x74, 0x18, 0x23,
	0xaa, 0x89, 0x90, 0x81, 0x94, 0x41, 0x39, 0x6f, 0x1a, 0x3a, 0xae, 0xdb, 0xf6, 0x5f, 0x68, 0xcd,
	0x46, 0x15, 0x67, 0x50, 0xf4, 0x00, 0xde, 0xbe, 0x70, 0x42, 0xca, 0x4e, 0x6c, 0x4a, 0xe5, 0x36,
	0xb9, 0xed, 0x06, 0x54, 0x25, 0xdb, 0xd5, 0x83, 0x68, 0x17, 0x6e, 0xcd, 0x9d, 0xd9, 0xdc, 0x75,
	0x66, 0x73, 0xa6, 0xf8, 0x25, 0xc1, 0xcf, 0xc2, 0x9c, 0x39, 0x23, 0x2a, 0xa4, 0x14, 0xb3, 0x2c,
	0x99, 0x19, 0x18, 0x7d, 0x02, 0xef, 0x79, 0xe4, 0xc5, 0x48, 0xe5, 0xa4, 0x28, 0xbf, 0x1c, 0x07,
	0xc4, 0x1b, 0xc8, 0x16, 0xd4, 0xc0, 0x37, 0x13, 0xd0, 0x3d, 0xd8, 0xf2, 0x42, 0xf6, 0x85, 0xed,
	0x44, 0xfb, 0xa9, 0x88, 0x19, 0x69, 0xb0, 0xf1, 0xf7, 0x32, 0x14, 0x78, 0xc5, 0x69, 0x82, 0x29,
	0xef, 0xab, 0xed, 0x4f, 0x7a, 0x53, 0xf5, 0x4d, 0x48, 0x87, 0x78, 0x03, 0x47, 0xe3, 0xc4, 0x62,
	0x60, 0x29, 0xa0, 0xb6, 0x96, 0x53, 0xb8, 0xcf, 0xfc, 0xe0, 0x55, 0x3e, 0x23, 0x5f, 0x04, 0xea,
	0x31, 0x10, 0xbd, 0x37, 0x9e, 0x66, 0x32, 0x8b, 0xf4, 0xbf, 0xbd, 0x57, 0xea, 0x1a, 0x69, 0x93,
	0xa4, 0xc6, 0x94, 0x9e, 0x06, 0x7f, 0x9d, 0x8a, 0x9f, 0xf1, 0x27, 0x9f, 0xe4, 0x83, 0x91, 0x71,
	0xfd, 0x83, 0xd1, 0xbd, 0xb8, 0x1b, 0x4d, 0xbe, 0x29, 0x55, 0xb4, 0x8e, 0xf3, 0xff, 0xe6, 0xb3,
	0x12, 0x7a, 0x08, 0xa6, 0x6b, 0xb3, 0x7e, 0xb4, 0xce, 0x86, 0x4a, 0x7a, 0xf2, 0xdb, 0x6e, 0x8b,
	0x5d, 0x05, 0xa4, 0xd5, 0x17, 0xe3, 0x7c, 0xa2, 0xc6, 0x3c, 0xd8, 0x02, 0x33, 0x31, 0x08, 0x6d,
	0x9c, 0xc3, 0xce, 0xa1, 0xbf, 0x10, 0x9f, 0x29, 0x89, 0x66, 0xa8, 0x5f, 0x00, 0x5c, 0xc4, 0x92,
	0xba, 0xd9, 0x8f, 0x5e, 0xef, 0x66, 0xc5, 0x14, 0xac, 0x4d, 0x6f, 0xf8, 0x6a, 0xc9, 0x1b, 0x5f,
	0x31, 0x8f, 0xf5, 0x57, 0x8c, 0xb9, 0xf7, 0xe0, 0x95, 0x0b, 0xad, 0xd8, 0xb2, 0xf6, 0xf6, 0x69,
	0x2c, 0xe1, 0xad, 0x6b, 0x8e, 0xf1, 0x3f, 0x58, 0xf6, 0xaf, 0x06, 0x98, 0x5a, 0x5e, 0x13, 0xa9,
	0xd6, 0x59, 0x10, 0xca, 0xec, 0x85, 0xfc, 0xc8, 0xca, 0x53, 0x6d, 0x04, 0xf0, 0x34, 0x40, 0x55,
	0xc0, 0x3e, 0x55, 0x3d, 0x4a, 0x5e, 0x70, 0xb2, 0xb0, 0xa8, 0x27, 0x36, 0x65, 0x32, 0x30, 0x65,
	0x3b, 0x98, 0x00, 0x5c, 0x0f, 0x17, 0xb4, 0x4b, 0x15, 0xd1, 0x53, 0xc5, 0x59, 0x38, 0xd2, 0x23,
	0xbb, 0x03, 0xe1, 0x78, 0x38, 0x01, 0xee, 0x7f, 0x00, 0x5b, 0xa9, 0xc7, 0xf6, 0xea, 0xef, 0xef,
	0xf7, 0xff, 0x61, 0xa8, 0x9e, 0x57, 0x14, 0xf2, 0x0a, 0x14, 0x87, 0xc7, 0xc3, 0x4e, 0x2d, 0x87,
	0xde, 0x82, 0xad, 0x83, 0xe3, 0xe3, 0x7e, 0x67, 0x7f, 0x78, 0xf6, 0xe4, 0xb4, 0x83, 0x7f, 0x59,
	0x33, 0x50, 0x0d, 0x36, 0x4f, 0xba, 0x78, 0x7f, 0xd4, 0x51, 0x48, 0x1e, 0xd5, 0xe1, 0xf6, 0xd1,
	0xe9, 0xf0, 0x70, 0xdc, 0x3b, 0x1e, 0x9e, 0x8d, 0x0e, 0x8f, 0x71, 0x34, 0x52, 0x40, 0xdb, 0x00,
	0xe3, 0x0e, 0x1e, 0x28, 0xb9, 0x88, 0xde, 0x86, 0xb7, 0x84, 0xdc, 0x1b, 0x9e, 0x8d, 0x3a, 0x63,
	0x05, 0x97, 0xd0, 0x0e, 0xdc, 0x6a, 0xf7, 0x46, 0x8f, 0x23, 0x1d, 0x83, 0xfd, 0x67, 0xb5, 0x32,
	0xaa, 0x42, 0x69, 0xb0, 0x3f, 0x3e, 0xec, 0xd6, 0x36, 0xf8, 0x92, 0xe2, 0xe7, 0x99, 0x5c, 0xb8,
	0x56, 0x41, 0xb7, 0xc0, 0x1c, 0x9c, 0xf6, 0xc7, 0xbd, 0x33, 0x49, 0xa9, 0x72, 0x36, 0xde, 0x1f,
	0x7e, 0xde, 0xa9, 0xc1, 0xfd, 0x4f, 0x78, 0xd3, 0xa6, 0x1a, 0x88, 0x0d, 0x28, 0x0c, 0x7a, 0xc3,
	0x5a, 0x4e, 0xfc, 0xd8, 0x7f, 0x56, 0x33, 0xf8, 0x96, 0x06, 0xbd, 0x76, 0xbb, 0xdf, 0x39, 0xe3,
	0x03, 0x79, 0x5d, 0xde, 0x7f, 0x56, 0x2b, 0x1c, 0x7c, 0x0a, 0xdf, 0xf1, 0xc3, 0x59, 0xcb, 0x0e,
	0xec, 0xc9, 0x9c, 0xb4, 0x02, 0xd7, 0x66, 0x57, 0xc1, 0x92, 0xb6, 0x94, 0xfb, 0xcc, 0xc2, 0x60,
	0x72, 0xb0, 0x93, 0x76, 0xa2, 0x93, 0xd0, 0x67, 0xfe, 0x89, 0xf1, 0xe7, 0x7c, 0xa1, 0xdb, 0xff,
	0xe2, 0xbc, 0x2c, 0xfe, 0x65, 0xf9, 0xf1, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x52, 0xae, 0x02,
	0xa1, 0xad, 0x19, 0x00, 0x00,
}
