// Description of message types for search request and response

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.4
// source: yelp/nrtsearch/search.proto

package nrtsearch

import (
	latlng "google.golang.org/genproto/googleapis/type/latlng"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MatchOperator int32

const (
	MatchOperator_SHOULD MatchOperator = 0
	MatchOperator_MUST   MatchOperator = 1
)

// Enum value maps for MatchOperator.
var (
	MatchOperator_name = map[int32]string{
		0: "SHOULD",
		1: "MUST",
	}
	MatchOperator_value = map[string]int32{
		"SHOULD": 0,
		"MUST":   1,
	}
)

func (x MatchOperator) Enum() *MatchOperator {
	p := new(MatchOperator)
	*p = x
	return p
}

func (x MatchOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MatchOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_search_proto_enumTypes[0].Descriptor()
}

func (MatchOperator) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_search_proto_enumTypes[0]
}

func (x MatchOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MatchOperator.Descriptor instead.
func (MatchOperator) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{0}
}

// Defines different types of QueryNodes.
type QueryType int32

const (
	QueryType_NONE                 QueryType = 0
	QueryType_BOOLEAN_QUERY        QueryType = 1
	QueryType_PHRASE_QUERY         QueryType = 2
	QueryType_FUNCTION_SCORE_QUERY QueryType = 3
	QueryType_TERM_QUERY           QueryType = 4
	QueryType_TERM_IN_SET_QUERY    QueryType = 5
	QueryType_DISJUNCTION_MAX      QueryType = 6
	QueryType_MATCH                QueryType = 7
	QueryType_MATCH_PHRASE         QueryType = 8
	QueryType_MULTI_MATCH          QueryType = 9
	QueryType_RANGE                QueryType = 10
	QueryType_GEO_BOUNDING_BOX     QueryType = 11
	QueryType_GEO_POINT            QueryType = 12
	QueryType_NESTED               QueryType = 13
	QueryType_EXISTS               QueryType = 14
	QueryType_GEO_RADIUS           QueryType = 15
)

// Enum value maps for QueryType.
var (
	QueryType_name = map[int32]string{
		0:  "NONE",
		1:  "BOOLEAN_QUERY",
		2:  "PHRASE_QUERY",
		3:  "FUNCTION_SCORE_QUERY",
		4:  "TERM_QUERY",
		5:  "TERM_IN_SET_QUERY",
		6:  "DISJUNCTION_MAX",
		7:  "MATCH",
		8:  "MATCH_PHRASE",
		9:  "MULTI_MATCH",
		10: "RANGE",
		11: "GEO_BOUNDING_BOX",
		12: "GEO_POINT",
		13: "NESTED",
		14: "EXISTS",
		15: "GEO_RADIUS",
	}
	QueryType_value = map[string]int32{
		"NONE":                 0,
		"BOOLEAN_QUERY":        1,
		"PHRASE_QUERY":         2,
		"FUNCTION_SCORE_QUERY": 3,
		"TERM_QUERY":           4,
		"TERM_IN_SET_QUERY":    5,
		"DISJUNCTION_MAX":      6,
		"MATCH":                7,
		"MATCH_PHRASE":         8,
		"MULTI_MATCH":          9,
		"RANGE":                10,
		"GEO_BOUNDING_BOX":     11,
		"GEO_POINT":            12,
		"NESTED":               13,
		"EXISTS":               14,
		"GEO_RADIUS":           15,
	}
)

func (x QueryType) Enum() *QueryType {
	p := new(QueryType)
	*p = x
	return p
}

func (x QueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_search_proto_enumTypes[1].Descriptor()
}

func (QueryType) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_search_proto_enumTypes[1]
}

func (x QueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryType.Descriptor instead.
func (QueryType) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{1}
}

// For multi valued fields, how to select which value is used for sorting
type Selector int32

const (
	Selector_MIN        Selector = 0 // Minimum value
	Selector_MAX        Selector = 1 // Maximum value
	Selector_MIDDLE_MIN Selector = 2 // Middle value of the set; if there are an even number of values, the lower of the middle two is chosen
	Selector_MIDDLE_MAX Selector = 3 // Middle value of the set; if there are an even number of values, the upper of the middle two is chosen
)

// Enum value maps for Selector.
var (
	Selector_name = map[int32]string{
		0: "MIN",
		1: "MAX",
		2: "MIDDLE_MIN",
		3: "MIDDLE_MAX",
	}
	Selector_value = map[string]int32{
		"MIN":        0,
		"MAX":        1,
		"MIDDLE_MIN": 2,
		"MIDDLE_MAX": 3,
	}
)

func (x Selector) Enum() *Selector {
	p := new(Selector)
	*p = x
	return p
}

func (x Selector) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Selector) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_search_proto_enumTypes[2].Descriptor()
}

func (Selector) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_search_proto_enumTypes[2]
}

func (x Selector) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Selector.Descriptor instead.
func (Selector) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{2}
}

// Defines how clauses may occur in matching documents. This will always be SHOULD by default.
type BooleanClause_Occur int32

const (
	BooleanClause_SHOULD   BooleanClause_Occur = 0
	BooleanClause_MUST     BooleanClause_Occur = 1
	BooleanClause_FILTER   BooleanClause_Occur = 2
	BooleanClause_MUST_NOT BooleanClause_Occur = 3
)

// Enum value maps for BooleanClause_Occur.
var (
	BooleanClause_Occur_name = map[int32]string{
		0: "SHOULD",
		1: "MUST",
		2: "FILTER",
		3: "MUST_NOT",
	}
	BooleanClause_Occur_value = map[string]int32{
		"SHOULD":   0,
		"MUST":     1,
		"FILTER":   2,
		"MUST_NOT": 3,
	}
)

func (x BooleanClause_Occur) Enum() *BooleanClause_Occur {
	p := new(BooleanClause_Occur)
	*p = x
	return p
}

func (x BooleanClause_Occur) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BooleanClause_Occur) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_search_proto_enumTypes[3].Descriptor()
}

func (BooleanClause_Occur) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_search_proto_enumTypes[3]
}

func (x BooleanClause_Occur) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BooleanClause_Occur.Descriptor instead.
func (BooleanClause_Occur) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{0, 0}
}

type NestedQuery_ScoreMode int32

const (
	NestedQuery_NONE NestedQuery_ScoreMode = 0
	NestedQuery_AVG  NestedQuery_ScoreMode = 1
	NestedQuery_MAX  NestedQuery_ScoreMode = 2
	NestedQuery_MIN  NestedQuery_ScoreMode = 3
	NestedQuery_SUM  NestedQuery_ScoreMode = 4
)

// Enum value maps for NestedQuery_ScoreMode.
var (
	NestedQuery_ScoreMode_name = map[int32]string{
		0: "NONE",
		1: "AVG",
		2: "MAX",
		3: "MIN",
		4: "SUM",
	}
	NestedQuery_ScoreMode_value = map[string]int32{
		"NONE": 0,
		"AVG":  1,
		"MAX":  2,
		"MIN":  3,
		"SUM":  4,
	}
)

func (x NestedQuery_ScoreMode) Enum() *NestedQuery_ScoreMode {
	p := new(NestedQuery_ScoreMode)
	*p = x
	return p
}

func (x NestedQuery_ScoreMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NestedQuery_ScoreMode) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_search_proto_enumTypes[4].Descriptor()
}

func (NestedQuery_ScoreMode) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_search_proto_enumTypes[4]
}

func (x NestedQuery_ScoreMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NestedQuery_ScoreMode.Descriptor instead.
func (NestedQuery_ScoreMode) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{6, 0}
}

// null parameter value
type Script_ParamNullValue int32

const (
	Script_NULL_VALUE Script_ParamNullValue = 0
)

// Enum value maps for Script_ParamNullValue.
var (
	Script_ParamNullValue_name = map[int32]string{
		0: "NULL_VALUE",
	}
	Script_ParamNullValue_value = map[string]int32{
		"NULL_VALUE": 0,
	}
)

func (x Script_ParamNullValue) Enum() *Script_ParamNullValue {
	p := new(Script_ParamNullValue)
	*p = x
	return p
}

func (x Script_ParamNullValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Script_ParamNullValue) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_search_proto_enumTypes[5].Descriptor()
}

func (Script_ParamNullValue) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_search_proto_enumTypes[5]
}

func (x Script_ParamNullValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Script_ParamNullValue.Descriptor instead.
func (Script_ParamNullValue) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{21, 0}
}

//* How the {TotalHits#value} should be interpreted.
type TotalHits_Relation int32

const (
	// The total hit count is equal to {@link TotalHits#value}.
	TotalHits_EQUAL_TO TotalHits_Relation = 0
	// The total hit count is greater than or equal to {@link TotalHits#value}.
	TotalHits_GREATER_THAN_OR_EQUAL_TO TotalHits_Relation = 1
)

// Enum value maps for TotalHits_Relation.
var (
	TotalHits_Relation_name = map[int32]string{
		0: "EQUAL_TO",
		1: "GREATER_THAN_OR_EQUAL_TO",
	}
	TotalHits_Relation_value = map[string]int32{
		"EQUAL_TO":                 0,
		"GREATER_THAN_OR_EQUAL_TO": 1,
	}
)

func (x TotalHits_Relation) Enum() *TotalHits_Relation {
	p := new(TotalHits_Relation)
	*p = x
	return p
}

func (x TotalHits_Relation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TotalHits_Relation) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_search_proto_enumTypes[6].Descriptor()
}

func (TotalHits_Relation) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_search_proto_enumTypes[6]
}

func (x TotalHits_Relation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TotalHits_Relation.Descriptor instead.
func (TotalHits_Relation) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{25, 0}
}

// A clause in a BooleanQuery.
type BooleanClause struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *Query              `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`                                        // The Query for the clause.
	Occur BooleanClause_Occur `protobuf:"varint,2,opt,name=occur,proto3,enum=luceneserver.BooleanClause_Occur" json:"occur,omitempty"` // Specifies how this clause must occur in a matching document. SHOULD by default.
}

func (x *BooleanClause) Reset() {
	*x = BooleanClause{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanClause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanClause) ProtoMessage() {}

func (x *BooleanClause) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanClause.ProtoReflect.Descriptor instead.
func (*BooleanClause) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{0}
}

func (x *BooleanClause) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *BooleanClause) GetOccur() BooleanClause_Occur {
	if x != nil {
		return x.Occur
	}
	return BooleanClause_SHOULD
}

type FuzzyParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxEdits       int32 `protobuf:"varint,1,opt,name=maxEdits,proto3" json:"maxEdits,omitempty"`             // The maximum allowed Levenshtein Edit Distance (or number of edits). Possible values are 0, 1 and 2.
	PrefixLength   int32 `protobuf:"varint,2,opt,name=prefixLength,proto3" json:"prefixLength,omitempty"`     // Length of common (non-fuzzy) prefix
	MaxExpansions  int32 `protobuf:"varint,3,opt,name=maxExpansions,proto3" json:"maxExpansions,omitempty"`   // The maximum number of terms to match.
	Transpositions bool  `protobuf:"varint,4,opt,name=transpositions,proto3" json:"transpositions,omitempty"` // True if transpositions should be treated as a primitive edit operation. If this is false (default), comparisons will implement the classic Levenshtein algorithm.
}

func (x *FuzzyParams) Reset() {
	*x = FuzzyParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzyParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzyParams) ProtoMessage() {}

func (x *FuzzyParams) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzyParams.ProtoReflect.Descriptor instead.
func (*FuzzyParams) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{1}
}

func (x *FuzzyParams) GetMaxEdits() int32 {
	if x != nil {
		return x.MaxEdits
	}
	return 0
}

func (x *FuzzyParams) GetPrefixLength() int32 {
	if x != nil {
		return x.PrefixLength
	}
	return 0
}

func (x *FuzzyParams) GetMaxExpansions() int32 {
	if x != nil {
		return x.MaxExpansions
	}
	return 0
}

func (x *FuzzyParams) GetTranspositions() bool {
	if x != nil {
		return x.Transpositions
	}
	return false
}

// A query that matches documents using boolean combinations of other queries.
type BooleanQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clauses                  []*BooleanClause `protobuf:"bytes,1,rep,name=clauses,proto3" json:"clauses,omitempty"`                                    // Clauses for a boolean query.
	MinimumNumberShouldMatch int32            `protobuf:"varint,2,opt,name=minimumNumberShouldMatch,proto3" json:"minimumNumberShouldMatch,omitempty"` // Minimum number of optional clauses that must match.
}

func (x *BooleanQuery) Reset() {
	*x = BooleanQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanQuery) ProtoMessage() {}

func (x *BooleanQuery) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanQuery.ProtoReflect.Descriptor instead.
func (*BooleanQuery) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{2}
}

func (x *BooleanQuery) GetClauses() []*BooleanClause {
	if x != nil {
		return x.Clauses
	}
	return nil
}

func (x *BooleanQuery) GetMinimumNumberShouldMatch() int32 {
	if x != nil {
		return x.MinimumNumberShouldMatch
	}
	return 0
}

// A Query that matches documents containing a particular sequence of terms.
type PhraseQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Edit distance between respective positions of terms as defined in this PhraseQuery and the positions
	//of terms in a document.
	Slop  int32    `protobuf:"varint,1,opt,name=slop,proto3" json:"slop,omitempty"`
	Field string   `protobuf:"bytes,2,opt,name=field,proto3" json:"field,omitempty"` // The field in the index that this query applies to.
	Terms []string `protobuf:"bytes,3,rep,name=terms,proto3" json:"terms,omitempty"` // Terms to match.
}

func (x *PhraseQuery) Reset() {
	*x = PhraseQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhraseQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhraseQuery) ProtoMessage() {}

func (x *PhraseQuery) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhraseQuery.ProtoReflect.Descriptor instead.
func (*PhraseQuery) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{3}
}

func (x *PhraseQuery) GetSlop() int32 {
	if x != nil {
		return x.Slop
	}
	return 0
}

func (x *PhraseQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *PhraseQuery) GetTerms() []string {
	if x != nil {
		return x.Terms
	}
	return nil
}

// A query that wraps another query and uses custom scoring logic to compute the wrapped query's score.
type FunctionScoreQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query  *Query  `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`   // Input query
	Script *Script `protobuf:"bytes,2,opt,name=script,proto3" json:"script,omitempty"` // script definition to compute a custom document score
}

func (x *FunctionScoreQuery) Reset() {
	*x = FunctionScoreQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionScoreQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionScoreQuery) ProtoMessage() {}

func (x *FunctionScoreQuery) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionScoreQuery.ProtoReflect.Descriptor instead.
func (*FunctionScoreQuery) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{4}
}

func (x *FunctionScoreQuery) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *FunctionScoreQuery) GetScript() *Script {
	if x != nil {
		return x.Script
	}
	return nil
}

// A query that retrieves all documents with a positive score calculated by the script
type FunctionFilterQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Script *Script `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"` // script definition to compute a custom document score
}

func (x *FunctionFilterQuery) Reset() {
	*x = FunctionFilterQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionFilterQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionFilterQuery) ProtoMessage() {}

func (x *FunctionFilterQuery) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionFilterQuery.ProtoReflect.Descriptor instead.
func (*FunctionFilterQuery) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{5}
}

func (x *FunctionFilterQuery) GetScript() *Script {
	if x != nil {
		return x.Script
	}
	return nil
}

//
type NestedQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *Query                `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`                                                  // query for the child documents
	Path      string                `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`                                                    // field name of the nested
	ScoreMode NestedQuery_ScoreMode `protobuf:"varint,3,opt,name=scoreMode,proto3,enum=luceneserver.NestedQuery_ScoreMode" json:"scoreMode,omitempty"` // how child documents score affects final score
}

func (x *NestedQuery) Reset() {
	*x = NestedQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NestedQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NestedQuery) ProtoMessage() {}

func (x *NestedQuery) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NestedQuery.ProtoReflect.Descriptor instead.
func (*NestedQuery) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{6}
}

func (x *NestedQuery) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *NestedQuery) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *NestedQuery) GetScoreMode() NestedQuery_ScoreMode {
	if x != nil {
		return x.ScoreMode
	}
	return NestedQuery_NONE
}

// A query that matches documents containing a term.
type TermQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Field in the document to query.
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Types that are assignable to TermTypes:
	//	*TermQuery_TextValue
	//	*TermQuery_IntValue
	//	*TermQuery_LongValue
	//	*TermQuery_FloatValue
	//	*TermQuery_DoubleValue
	//	*TermQuery_BooleanValue
	TermTypes isTermQuery_TermTypes `protobuf_oneof:"TermTypes"`
}

func (x *TermQuery) Reset() {
	*x = TermQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermQuery) ProtoMessage() {}

func (x *TermQuery) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermQuery.ProtoReflect.Descriptor instead.
func (*TermQuery) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{7}
}

func (x *TermQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (m *TermQuery) GetTermTypes() isTermQuery_TermTypes {
	if m != nil {
		return m.TermTypes
	}
	return nil
}

func (x *TermQuery) GetTextValue() string {
	if x, ok := x.GetTermTypes().(*TermQuery_TextValue); ok {
		return x.TextValue
	}
	return ""
}

func (x *TermQuery) GetIntValue() int32 {
	if x, ok := x.GetTermTypes().(*TermQuery_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *TermQuery) GetLongValue() int64 {
	if x, ok := x.GetTermTypes().(*TermQuery_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (x *TermQuery) GetFloatValue() float32 {
	if x, ok := x.GetTermTypes().(*TermQuery_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *TermQuery) GetDoubleValue() float64 {
	if x, ok := x.GetTermTypes().(*TermQuery_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *TermQuery) GetBooleanValue() bool {
	if x, ok := x.GetTermTypes().(*TermQuery_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

type isTermQuery_TermTypes interface {
	isTermQuery_TermTypes()
}

type TermQuery_TextValue struct {
	// TEXT FieldType term to search for.
	TextValue string `protobuf:"bytes,2,opt,name=textValue,proto3,oneof"`
}

type TermQuery_IntValue struct {
	// INT FieldType term to search for.
	IntValue int32 `protobuf:"varint,3,opt,name=intValue,proto3,oneof"`
}

type TermQuery_LongValue struct {
	// LONG FieldType term to search for.
	LongValue int64 `protobuf:"varint,4,opt,name=longValue,proto3,oneof"`
}

type TermQuery_FloatValue struct {
	// FLOAT FieldType term to search for.
	FloatValue float32 `protobuf:"fixed32,5,opt,name=floatValue,proto3,oneof"`
}

type TermQuery_DoubleValue struct {
	// DOUBLE FieldType term to search for.
	DoubleValue float64 `protobuf:"fixed64,6,opt,name=doubleValue,proto3,oneof"`
}

type TermQuery_BooleanValue struct {
	// BOOLEAN FieldType term to search for.
	BooleanValue bool `protobuf:"varint,7,opt,name=booleanValue,proto3,oneof"`
}

func (*TermQuery_TextValue) isTermQuery_TermTypes() {}

func (*TermQuery_IntValue) isTermQuery_TermTypes() {}

func (*TermQuery_LongValue) isTermQuery_TermTypes() {}

func (*TermQuery_FloatValue) isTermQuery_TermTypes() {}

func (*TermQuery_DoubleValue) isTermQuery_TermTypes() {}

func (*TermQuery_BooleanValue) isTermQuery_TermTypes() {}

// Specialization for a disjunction over many terms that behaves like a ConstantScoreQuery over a BooleanQuery containing only BooleanClause.Occur.SHOULD clauses. Only ONE of the types of terms needs to be provided - the one that matches the type of the field.
type TermInSetQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Field in the document to query.
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Types that are assignable to TermTypes:
	//	*TermInSetQuery_TextTerms_
	//	*TermInSetQuery_IntTerms_
	//	*TermInSetQuery_LongTerms_
	//	*TermInSetQuery_FloatTerms_
	//	*TermInSetQuery_DoubleTerms_
	TermTypes isTermInSetQuery_TermTypes `protobuf_oneof:"TermTypes"`
}

func (x *TermInSetQuery) Reset() {
	*x = TermInSetQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermInSetQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermInSetQuery) ProtoMessage() {}

func (x *TermInSetQuery) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermInSetQuery.ProtoReflect.Descriptor instead.
func (*TermInSetQuery) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{8}
}

func (x *TermInSetQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (m *TermInSetQuery) GetTermTypes() isTermInSetQuery_TermTypes {
	if m != nil {
		return m.TermTypes
	}
	return nil
}

func (x *TermInSetQuery) GetTextTerms() *TermInSetQuery_TextTerms {
	if x, ok := x.GetTermTypes().(*TermInSetQuery_TextTerms_); ok {
		return x.TextTerms
	}
	return nil
}

func (x *TermInSetQuery) GetIntTerms() *TermInSetQuery_IntTerms {
	if x, ok := x.GetTermTypes().(*TermInSetQuery_IntTerms_); ok {
		return x.IntTerms
	}
	return nil
}

func (x *TermInSetQuery) GetLongTerms() *TermInSetQuery_LongTerms {
	if x, ok := x.GetTermTypes().(*TermInSetQuery_LongTerms_); ok {
		return x.LongTerms
	}
	return nil
}

func (x *TermInSetQuery) GetFloatTerms() *TermInSetQuery_FloatTerms {
	if x, ok := x.GetTermTypes().(*TermInSetQuery_FloatTerms_); ok {
		return x.FloatTerms
	}
	return nil
}

func (x *TermInSetQuery) GetDoubleTerms() *TermInSetQuery_DoubleTerms {
	if x, ok := x.GetTermTypes().(*TermInSetQuery_DoubleTerms_); ok {
		return x.DoubleTerms
	}
	return nil
}

type isTermInSetQuery_TermTypes interface {
	isTermInSetQuery_TermTypes()
}

type TermInSetQuery_TextTerms_ struct {
	// Text terms to search for.
	TextTerms *TermInSetQuery_TextTerms `protobuf:"bytes,2,opt,name=textTerms,proto3,oneof"`
}

type TermInSetQuery_IntTerms_ struct {
	// Int terms to search for.
	IntTerms *TermInSetQuery_IntTerms `protobuf:"bytes,3,opt,name=intTerms,proto3,oneof"`
}

type TermInSetQuery_LongTerms_ struct {
	// Long terms to search for.
	LongTerms *TermInSetQuery_LongTerms `protobuf:"bytes,4,opt,name=longTerms,proto3,oneof"`
}

type TermInSetQuery_FloatTerms_ struct {
	// Float terms to search for.
	FloatTerms *TermInSetQuery_FloatTerms `protobuf:"bytes,5,opt,name=floatTerms,proto3,oneof"`
}

type TermInSetQuery_DoubleTerms_ struct {
	// Double terms to search for.
	DoubleTerms *TermInSetQuery_DoubleTerms `protobuf:"bytes,6,opt,name=doubleTerms,proto3,oneof"`
}

func (*TermInSetQuery_TextTerms_) isTermInSetQuery_TermTypes() {}

func (*TermInSetQuery_IntTerms_) isTermInSetQuery_TermTypes() {}

func (*TermInSetQuery_LongTerms_) isTermInSetQuery_TermTypes() {}

func (*TermInSetQuery_FloatTerms_) isTermInSetQuery_TermTypes() {}

func (*TermInSetQuery_DoubleTerms_) isTermInSetQuery_TermTypes() {}

// A query that generates the union of documents produced by its subqueries, and that scores each document with the
// maximum score for that document as produced by any subquery, plus a tie breaking increment for any additional matching subqueries.
type DisjunctionMaxQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disjuncts            []*Query `protobuf:"bytes,1,rep,name=disjuncts,proto3" json:"disjuncts,omitempty"`                         // A list of all the disjuncts to add
	TieBreakerMultiplier float32  `protobuf:"fixed32,2,opt,name=tieBreakerMultiplier,proto3" json:"tieBreakerMultiplier,omitempty"` // The score of each non-maximum disjunct for a document is multiplied by this weight and added into the final score.
}

func (x *DisjunctionMaxQuery) Reset() {
	*x = DisjunctionMaxQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisjunctionMaxQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisjunctionMaxQuery) ProtoMessage() {}

func (x *DisjunctionMaxQuery) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisjunctionMaxQuery.ProtoReflect.Descriptor instead.
func (*DisjunctionMaxQuery) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{9}
}

func (x *DisjunctionMaxQuery) GetDisjuncts() []*Query {
	if x != nil {
		return x.Disjuncts
	}
	return nil
}

func (x *DisjunctionMaxQuery) GetTieBreakerMultiplier() float32 {
	if x != nil {
		return x.TieBreakerMultiplier
	}
	return 0
}

// A query that analyzes the text before finding matching documents. The tokens resulting from the analysis are combined using term queries in boolean clauses.
type MatchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field                    string        `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`                                        // Field in the document to query.
	Query                    string        `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`                                        // The text to query with.
	Operator                 MatchOperator `protobuf:"varint,3,opt,name=operator,proto3,enum=luceneserver.MatchOperator" json:"operator,omitempty"` // Boolean logic used to interpret text in the query. The possible values are SHOULD (default) and MUST.
	MinimumNumberShouldMatch int32         `protobuf:"varint,4,opt,name=minimumNumberShouldMatch,proto3" json:"minimumNumberShouldMatch,omitempty"` // Minimum number of optional clauses that must match.
	Analyzer                 *Analyzer     `protobuf:"bytes,5,opt,name=analyzer,proto3" json:"analyzer,omitempty"`                                  // Analyzer used to analyze the query. If not provided, the default search analyzer for the field would be used instead.
	FuzzyParams              *FuzzyParams  `protobuf:"bytes,6,opt,name=fuzzyParams,proto3" json:"fuzzyParams,omitempty"`                            // Parameters to set the fuzziness of the query
}

func (x *MatchQuery) Reset() {
	*x = MatchQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchQuery) ProtoMessage() {}

func (x *MatchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchQuery.ProtoReflect.Descriptor instead.
func (*MatchQuery) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{10}
}

func (x *MatchQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *MatchQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *MatchQuery) GetOperator() MatchOperator {
	if x != nil {
		return x.Operator
	}
	return MatchOperator_SHOULD
}

func (x *MatchQuery) GetMinimumNumberShouldMatch() int32 {
	if x != nil {
		return x.MinimumNumberShouldMatch
	}
	return 0
}

func (x *MatchQuery) GetAnalyzer() *Analyzer {
	if x != nil {
		return x.Analyzer
	}
	return nil
}

func (x *MatchQuery) GetFuzzyParams() *FuzzyParams {
	if x != nil {
		return x.FuzzyParams
	}
	return nil
}

// A query that analyzes the text before finding matching documents. The tokens resulting from the analysis are combined into a PhraseQuery.
type MatchPhraseQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field    string    `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`       // Field in the document to query.
	Query    string    `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`       // The text to query with.
	Slop     int32     `protobuf:"varint,3,opt,name=slop,proto3" json:"slop,omitempty"`        // Edit distance between respective positions of tokens generated by analyzing this query and the positions of terms in a document.
	Analyzer *Analyzer `protobuf:"bytes,4,opt,name=analyzer,proto3" json:"analyzer,omitempty"` // Analyzer used to analyze the query. If not provided, the default search analyzer for the field would be used instead.
}

func (x *MatchPhraseQuery) Reset() {
	*x = MatchPhraseQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPhraseQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPhraseQuery) ProtoMessage() {}

func (x *MatchPhraseQuery) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPhraseQuery.ProtoReflect.Descriptor instead.
func (*MatchPhraseQuery) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{11}
}

func (x *MatchPhraseQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *MatchPhraseQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *MatchPhraseQuery) GetSlop() int32 {
	if x != nil {
		return x.Slop
	}
	return 0
}

func (x *MatchPhraseQuery) GetAnalyzer() *Analyzer {
	if x != nil {
		return x.Analyzer
	}
	return nil
}

// A query that creates a match query for each field provided and wraps all the match queries in a disjunction max query.
type MultiMatchQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields                   []string           `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`                                                                                                     // Fields in the document to query.
	Query                    string             `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`                                                                                                       // The text to query with.
	FieldBoosts              map[string]float32 `protobuf:"bytes,3,rep,name=fieldBoosts,proto3" json:"fieldBoosts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"` // Boosts for each field, if any.
	Operator                 MatchOperator      `protobuf:"varint,4,opt,name=operator,proto3,enum=luceneserver.MatchOperator" json:"operator,omitempty"`                                                                // Boolean logic used to interpret text in the query. The possible values are SHOULD (default) and MUST.
	MinimumNumberShouldMatch int32              `protobuf:"varint,5,opt,name=minimumNumberShouldMatch,proto3" json:"minimumNumberShouldMatch,omitempty"`                                                                // Minimum number of optional clauses that must match.
	Analyzer                 *Analyzer          `protobuf:"bytes,6,opt,name=analyzer,proto3" json:"analyzer,omitempty"`                                                                                                 // Analyzer used to analyze the query. If not provided, the default search analyzer for the field would be used instead.
	FuzzyParams              *FuzzyParams       `protobuf:"bytes,7,opt,name=fuzzyParams,proto3" json:"fuzzyParams,omitempty"`                                                                                           // Parameters to set the fuzziness of the query
	TieBreakerMultiplier     float32            `protobuf:"fixed32,8,opt,name=tieBreakerMultiplier,proto3" json:"tieBreakerMultiplier,omitempty"`                                                                       // The score of each non-maximum match query disjunct for a document will be multiplied by this weight and added into the final score.
}

func (x *MultiMatchQuery) Reset() {
	*x = MultiMatchQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiMatchQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiMatchQuery) ProtoMessage() {}

func (x *MultiMatchQuery) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiMatchQuery.ProtoReflect.Descriptor instead.
func (*MultiMatchQuery) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{12}
}

func (x *MultiMatchQuery) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *MultiMatchQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *MultiMatchQuery) GetFieldBoosts() map[string]float32 {
	if x != nil {
		return x.FieldBoosts
	}
	return nil
}

func (x *MultiMatchQuery) GetOperator() MatchOperator {
	if x != nil {
		return x.Operator
	}
	return MatchOperator_SHOULD
}

func (x *MultiMatchQuery) GetMinimumNumberShouldMatch() int32 {
	if x != nil {
		return x.MinimumNumberShouldMatch
	}
	return 0
}

func (x *MultiMatchQuery) GetAnalyzer() *Analyzer {
	if x != nil {
		return x.Analyzer
	}
	return nil
}

func (x *MultiMatchQuery) GetFuzzyParams() *FuzzyParams {
	if x != nil {
		return x.FuzzyParams
	}
	return nil
}

func (x *MultiMatchQuery) GetTieBreakerMultiplier() float32 {
	if x != nil {
		return x.TieBreakerMultiplier
	}
	return 0
}

// A query that matches documents with values within the specified range. The lower and upper values though provided as strings will be converted to the type of the field. This works with INT, LONG, FLOAT, DOUBLE and DATE_TIME field types.
type RangeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field          string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`                    // Field in the document to query
	Lower          string `protobuf:"bytes,2,opt,name=lower,proto3" json:"lower,omitempty"`                    // Lower bound, inclusive by default
	Upper          string `protobuf:"bytes,3,opt,name=upper,proto3" json:"upper,omitempty"`                    // Upper bound, inclusive by default
	LowerExclusive bool   `protobuf:"varint,4,opt,name=lowerExclusive,proto3" json:"lowerExclusive,omitempty"` // Set true to make lower bound exclusive
	UpperExclusive bool   `protobuf:"varint,5,opt,name=upperExclusive,proto3" json:"upperExclusive,omitempty"` // Set true to make upper bound exclusive
}

func (x *RangeQuery) Reset() {
	*x = RangeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeQuery) ProtoMessage() {}

func (x *RangeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeQuery.ProtoReflect.Descriptor instead.
func (*RangeQuery) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{13}
}

func (x *RangeQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *RangeQuery) GetLower() string {
	if x != nil {
		return x.Lower
	}
	return ""
}

func (x *RangeQuery) GetUpper() string {
	if x != nil {
		return x.Upper
	}
	return ""
}

func (x *RangeQuery) GetLowerExclusive() bool {
	if x != nil {
		return x.LowerExclusive
	}
	return false
}

func (x *RangeQuery) GetUpperExclusive() bool {
	if x != nil {
		return x.UpperExclusive
	}
	return false
}

// A query that matches documents with geopoint within the geo box.
type GeoBoundingBoxQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field       string         `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`             // Field in the document to query
	TopLeft     *latlng.LatLng `protobuf:"bytes,2,opt,name=topLeft,proto3" json:"topLeft,omitempty"`         // top left corner of the geo box
	BottomRight *latlng.LatLng `protobuf:"bytes,3,opt,name=bottomRight,proto3" json:"bottomRight,omitempty"` // bottom right corner of the geo box
}

func (x *GeoBoundingBoxQuery) Reset() {
	*x = GeoBoundingBoxQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoBoundingBoxQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoBoundingBoxQuery) ProtoMessage() {}

func (x *GeoBoundingBoxQuery) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoBoundingBoxQuery.ProtoReflect.Descriptor instead.
func (*GeoBoundingBoxQuery) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{14}
}

func (x *GeoBoundingBoxQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *GeoBoundingBoxQuery) GetTopLeft() *latlng.LatLng {
	if x != nil {
		return x.TopLeft
	}
	return nil
}

func (x *GeoBoundingBoxQuery) GetBottomRight() *latlng.LatLng {
	if x != nil {
		return x.BottomRight
	}
	return nil
}

// A query that matches documents with geo point within the radius of target geo point
type GeoRadiusQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field  string         `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`   // Field in the document to query
	Center *latlng.LatLng `protobuf:"bytes,2,opt,name=center,proto3" json:"center,omitempty"` // target center geo point to calculate distance
	Radius string         `protobuf:"bytes,3,opt,name=radius,proto3" json:"radius,omitempty"` // distance radius  like "12 km". supports m, km and mi, default to m
}

func (x *GeoRadiusQuery) Reset() {
	*x = GeoRadiusQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoRadiusQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoRadiusQuery) ProtoMessage() {}

func (x *GeoRadiusQuery) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoRadiusQuery.ProtoReflect.Descriptor instead.
func (*GeoRadiusQuery) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{15}
}

func (x *GeoRadiusQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *GeoRadiusQuery) GetCenter() *latlng.LatLng {
	if x != nil {
		return x.Center
	}
	return nil
}

func (x *GeoRadiusQuery) GetRadius() string {
	if x != nil {
		return x.Radius
	}
	return ""
}

// A query that matches documents with polygon that contains the geo point.
type GeoPointQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string         `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"` // Field in the document to query
	Point *latlng.LatLng `protobuf:"bytes,2,opt,name=point,proto3" json:"point,omitempty"` // point used to query whether the polygon contains it.
}

func (x *GeoPointQuery) Reset() {
	*x = GeoPointQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoPointQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPointQuery) ProtoMessage() {}

func (x *GeoPointQuery) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPointQuery.ProtoReflect.Descriptor instead.
func (*GeoPointQuery) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{16}
}

func (x *GeoPointQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *GeoPointQuery) GetPoint() *latlng.LatLng {
	if x != nil {
		return x.Point
	}
	return nil
}

// A query that matches documents which contain a value for a field.
type ExistsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"` // Field in the document to query
}

func (x *ExistsQuery) Reset() {
	*x = ExistsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistsQuery) ProtoMessage() {}

func (x *ExistsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistsQuery.ProtoReflect.Descriptor instead.
func (*ExistsQuery) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{17}
}

func (x *ExistsQuery) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

// Defines a full query consisting of a QueryNode which may be one of several types.
type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: Do not use.
	QueryType QueryType `protobuf:"varint,1,opt,name=queryType,proto3,enum=luceneserver.QueryType" json:"queryType,omitempty"` // no longer needed, type inferred from set QueryNode
	Boost     float32   `protobuf:"fixed32,2,opt,name=boost,proto3" json:"boost,omitempty"`                                    // Boost values that are less than one will give less importance to this query compared to other ones while values that are greater than one will give more importance to the scores returned by this query. Boost value of zero will do nothing (default). Boost less than 0 is invalid.
	// Types that are assignable to QueryNode:
	//	*Query_BooleanQuery
	//	*Query_PhraseQuery
	//	*Query_FunctionScoreQuery
	//	*Query_TermQuery
	//	*Query_TermInSetQuery
	//	*Query_DisjunctionMaxQuery
	//	*Query_MatchQuery
	//	*Query_MatchPhraseQuery
	//	*Query_MultiMatchQuery
	//	*Query_RangeQuery
	//	*Query_GeoBoundingBoxQuery
	//	*Query_GeoPointQuery
	//	*Query_NestedQuery
	//	*Query_ExistsQuery
	//	*Query_GeoRadiusQuery
	//	*Query_FunctionFilterQuery
	QueryNode isQuery_QueryNode `protobuf_oneof:"QueryNode"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{18}
}

// Deprecated: Do not use.
func (x *Query) GetQueryType() QueryType {
	if x != nil {
		return x.QueryType
	}
	return QueryType_NONE
}

func (x *Query) GetBoost() float32 {
	if x != nil {
		return x.Boost
	}
	return 0
}

func (m *Query) GetQueryNode() isQuery_QueryNode {
	if m != nil {
		return m.QueryNode
	}
	return nil
}

func (x *Query) GetBooleanQuery() *BooleanQuery {
	if x, ok := x.GetQueryNode().(*Query_BooleanQuery); ok {
		return x.BooleanQuery
	}
	return nil
}

func (x *Query) GetPhraseQuery() *PhraseQuery {
	if x, ok := x.GetQueryNode().(*Query_PhraseQuery); ok {
		return x.PhraseQuery
	}
	return nil
}

func (x *Query) GetFunctionScoreQuery() *FunctionScoreQuery {
	if x, ok := x.GetQueryNode().(*Query_FunctionScoreQuery); ok {
		return x.FunctionScoreQuery
	}
	return nil
}

func (x *Query) GetTermQuery() *TermQuery {
	if x, ok := x.GetQueryNode().(*Query_TermQuery); ok {
		return x.TermQuery
	}
	return nil
}

func (x *Query) GetTermInSetQuery() *TermInSetQuery {
	if x, ok := x.GetQueryNode().(*Query_TermInSetQuery); ok {
		return x.TermInSetQuery
	}
	return nil
}

func (x *Query) GetDisjunctionMaxQuery() *DisjunctionMaxQuery {
	if x, ok := x.GetQueryNode().(*Query_DisjunctionMaxQuery); ok {
		return x.DisjunctionMaxQuery
	}
	return nil
}

func (x *Query) GetMatchQuery() *MatchQuery {
	if x, ok := x.GetQueryNode().(*Query_MatchQuery); ok {
		return x.MatchQuery
	}
	return nil
}

func (x *Query) GetMatchPhraseQuery() *MatchPhraseQuery {
	if x, ok := x.GetQueryNode().(*Query_MatchPhraseQuery); ok {
		return x.MatchPhraseQuery
	}
	return nil
}

func (x *Query) GetMultiMatchQuery() *MultiMatchQuery {
	if x, ok := x.GetQueryNode().(*Query_MultiMatchQuery); ok {
		return x.MultiMatchQuery
	}
	return nil
}

func (x *Query) GetRangeQuery() *RangeQuery {
	if x, ok := x.GetQueryNode().(*Query_RangeQuery); ok {
		return x.RangeQuery
	}
	return nil
}

func (x *Query) GetGeoBoundingBoxQuery() *GeoBoundingBoxQuery {
	if x, ok := x.GetQueryNode().(*Query_GeoBoundingBoxQuery); ok {
		return x.GeoBoundingBoxQuery
	}
	return nil
}

func (x *Query) GetGeoPointQuery() *GeoPointQuery {
	if x, ok := x.GetQueryNode().(*Query_GeoPointQuery); ok {
		return x.GeoPointQuery
	}
	return nil
}

func (x *Query) GetNestedQuery() *NestedQuery {
	if x, ok := x.GetQueryNode().(*Query_NestedQuery); ok {
		return x.NestedQuery
	}
	return nil
}

func (x *Query) GetExistsQuery() *ExistsQuery {
	if x, ok := x.GetQueryNode().(*Query_ExistsQuery); ok {
		return x.ExistsQuery
	}
	return nil
}

func (x *Query) GetGeoRadiusQuery() *GeoRadiusQuery {
	if x, ok := x.GetQueryNode().(*Query_GeoRadiusQuery); ok {
		return x.GeoRadiusQuery
	}
	return nil
}

func (x *Query) GetFunctionFilterQuery() *FunctionFilterQuery {
	if x, ok := x.GetQueryNode().(*Query_FunctionFilterQuery); ok {
		return x.FunctionFilterQuery
	}
	return nil
}

type isQuery_QueryNode interface {
	isQuery_QueryNode()
}

type Query_BooleanQuery struct {
	BooleanQuery *BooleanQuery `protobuf:"bytes,3,opt,name=booleanQuery,proto3,oneof"`
}

type Query_PhraseQuery struct {
	PhraseQuery *PhraseQuery `protobuf:"bytes,4,opt,name=phraseQuery,proto3,oneof"`
}

type Query_FunctionScoreQuery struct {
	FunctionScoreQuery *FunctionScoreQuery `protobuf:"bytes,5,opt,name=functionScoreQuery,proto3,oneof"`
}

type Query_TermQuery struct {
	TermQuery *TermQuery `protobuf:"bytes,6,opt,name=termQuery,proto3,oneof"`
}

type Query_TermInSetQuery struct {
	TermInSetQuery *TermInSetQuery `protobuf:"bytes,7,opt,name=termInSetQuery,proto3,oneof"`
}

type Query_DisjunctionMaxQuery struct {
	DisjunctionMaxQuery *DisjunctionMaxQuery `protobuf:"bytes,8,opt,name=disjunctionMaxQuery,proto3,oneof"`
}

type Query_MatchQuery struct {
	MatchQuery *MatchQuery `protobuf:"bytes,9,opt,name=matchQuery,proto3,oneof"`
}

type Query_MatchPhraseQuery struct {
	MatchPhraseQuery *MatchPhraseQuery `protobuf:"bytes,10,opt,name=matchPhraseQuery,proto3,oneof"`
}

type Query_MultiMatchQuery struct {
	MultiMatchQuery *MultiMatchQuery `protobuf:"bytes,11,opt,name=multiMatchQuery,proto3,oneof"`
}

type Query_RangeQuery struct {
	RangeQuery *RangeQuery `protobuf:"bytes,12,opt,name=rangeQuery,proto3,oneof"`
}

type Query_GeoBoundingBoxQuery struct {
	GeoBoundingBoxQuery *GeoBoundingBoxQuery `protobuf:"bytes,13,opt,name=geoBoundingBoxQuery,proto3,oneof"`
}

type Query_GeoPointQuery struct {
	GeoPointQuery *GeoPointQuery `protobuf:"bytes,14,opt,name=geoPointQuery,proto3,oneof"`
}

type Query_NestedQuery struct {
	NestedQuery *NestedQuery `protobuf:"bytes,15,opt,name=nestedQuery,proto3,oneof"`
}

type Query_ExistsQuery struct {
	ExistsQuery *ExistsQuery `protobuf:"bytes,16,opt,name=existsQuery,proto3,oneof"`
}

type Query_GeoRadiusQuery struct {
	GeoRadiusQuery *GeoRadiusQuery `protobuf:"bytes,17,opt,name=geoRadiusQuery,proto3,oneof"`
}

type Query_FunctionFilterQuery struct {
	FunctionFilterQuery *FunctionFilterQuery `protobuf:"bytes,18,opt,name=functionFilterQuery,proto3,oneof"`
}

func (*Query_BooleanQuery) isQuery_QueryNode() {}

func (*Query_PhraseQuery) isQuery_QueryNode() {}

func (*Query_FunctionScoreQuery) isQuery_QueryNode() {}

func (*Query_TermQuery) isQuery_QueryNode() {}

func (*Query_TermInSetQuery) isQuery_QueryNode() {}

func (*Query_DisjunctionMaxQuery) isQuery_QueryNode() {}

func (*Query_MatchQuery) isQuery_QueryNode() {}

func (*Query_MatchPhraseQuery) isQuery_QueryNode() {}

func (*Query_MultiMatchQuery) isQuery_QueryNode() {}

func (*Query_RangeQuery) isQuery_QueryNode() {}

func (*Query_GeoBoundingBoxQuery) isQuery_QueryNode() {}

func (*Query_GeoPointQuery) isQuery_QueryNode() {}

func (*Query_NestedQuery) isQuery_QueryNode() {}

func (*Query_ExistsQuery) isQuery_QueryNode() {}

func (*Query_GeoRadiusQuery) isQuery_QueryNode() {}

func (*Query_FunctionFilterQuery) isQuery_QueryNode() {}

type SearchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //index to search against
	StartHit  int32  `protobuf:"varint,2,opt,name=startHit,proto3" json:"startHit,omitempty"`  // Which hit to start from (for pagination); default: 0
	TopHits   int32  `protobuf:"varint,3,opt,name=topHits,proto3" json:"topHits,omitempty"`    // How many top hits to retrieve; default: 10. It limits the hits returned, starting from index 0. For pagination: set it to startHit + window_size.
	// Maximum number of seconds spent on each collection phase; note that for
	// multi-pass searches (e.g. query-time grouping), this timeout applies to each phase.
	TimeoutSec     float64         `protobuf:"fixed64,4,opt,name=timeoutSec,proto3" json:"timeoutSec,omitempty"`
	RetrieveFields []string        `protobuf:"bytes,5,rep,name=retrieveFields,proto3" json:"retrieveFields,omitempty"` //Which fields to highlight or retrieve.
	QueryText      string          `protobuf:"bytes,6,opt,name=queryText,proto3" json:"queryText,omitempty"`           //Query text to parse using the specified QueryParser.
	VirtualFields  []*VirtualField `protobuf:"bytes,7,rep,name=virtualFields,proto3" json:"virtualFields,omitempty"`   //Defines virtual fields (name'd dynamic expressions) for this query.
	Query          *Query          `protobuf:"bytes,8,opt,name=query,proto3" json:"query,omitempty"`                   // Full query to execute using QueryNodes
	QuerySort      *QuerySortField `protobuf:"bytes,9,opt,name=querySort,proto3" json:"querySort,omitempty"`           //Sort hits by field (default is by relevance).
	// Types that are assignable to Searcher:
	//	*SearchRequest_IndexGen
	//	*SearchRequest_Version
	//	*SearchRequest_Snapshot
	Searcher               isSearchRequest_Searcher `protobuf_oneof:"Searcher"`
	TotalHitsThreshold     int32                    `protobuf:"varint,13,opt,name=totalHitsThreshold,proto3" json:"totalHitsThreshold,omitempty"`         //By default we count hits accurately up to 1000. This makes sure that we don't spend most time on computing hit counts
	Facets                 []*Facet                 `protobuf:"bytes,14,rep,name=facets,proto3" json:"facets,omitempty"`                                  // Which facets to retrieve
	FetchTasks             []*FetchTask             `protobuf:"bytes,15,rep,name=fetchTasks,proto3" json:"fetchTasks,omitempty"`                          //Any custom tasks that should be performed on top documents after ranking
	DisallowPartialResults bool                     `protobuf:"varint,16,opt,name=disallowPartialResults,proto3" json:"disallowPartialResults,omitempty"` //Should partial result be a failure condition. Applies when a search request times out. If false, the top documents ranking at the point of timeout are used and the request continues. Also, hitTimeout is set to true in the response.
	QueryNestedPath        string                   `protobuf:"bytes,17,opt,name=queryNestedPath,proto3" json:"queryNestedPath,omitempty"`                //nested path we want to query by if we want to query child documents.
	Rescorers              []*Rescorer              `protobuf:"bytes,18,rep,name=rescorers,proto3" json:"rescorers,omitempty"`                            // Rescorers which are executed in-order after the first pass
	//If detailed request execution profiling should be included in the response
	Profile bool `protobuf:"varint,19,opt,name=profile,proto3" json:"profile,omitempty"`
	//Check the search timeout condition after each collection of n documents in a segment. If 0, timeout is only checked on the segment boundary.
	TimeoutCheckEvery int32 `protobuf:"varint,20,opt,name=timeoutCheckEvery,proto3" json:"timeoutCheckEvery,omitempty"`
	//Additional document collectors. Provides support for operations such as aggregation.
	Collectors map[string]*Collector `protobuf:"bytes,21,rep,name=collectors,proto3" json:"collectors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//Stop document collection in search phase after this many documents, 0 for unlimited.
	TerminateAfter int32 `protobuf:"varint,22,opt,name=terminateAfter,proto3" json:"terminateAfter,omitempty"`
	//Set gRPC compression codec to use for response message. If value is unset or invalid, falls back to uncompressed. Valid codecs: identity, gzip, lz4
	ResponseCompression string `protobuf:"bytes,23,opt,name=responseCompression,proto3" json:"responseCompression,omitempty"`
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{19}
}

func (x *SearchRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *SearchRequest) GetStartHit() int32 {
	if x != nil {
		return x.StartHit
	}
	return 0
}

func (x *SearchRequest) GetTopHits() int32 {
	if x != nil {
		return x.TopHits
	}
	return 0
}

func (x *SearchRequest) GetTimeoutSec() float64 {
	if x != nil {
		return x.TimeoutSec
	}
	return 0
}

func (x *SearchRequest) GetRetrieveFields() []string {
	if x != nil {
		return x.RetrieveFields
	}
	return nil
}

func (x *SearchRequest) GetQueryText() string {
	if x != nil {
		return x.QueryText
	}
	return ""
}

func (x *SearchRequest) GetVirtualFields() []*VirtualField {
	if x != nil {
		return x.VirtualFields
	}
	return nil
}

func (x *SearchRequest) GetQuery() *Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchRequest) GetQuerySort() *QuerySortField {
	if x != nil {
		return x.QuerySort
	}
	return nil
}

func (m *SearchRequest) GetSearcher() isSearchRequest_Searcher {
	if m != nil {
		return m.Searcher
	}
	return nil
}

func (x *SearchRequest) GetIndexGen() int64 {
	if x, ok := x.GetSearcher().(*SearchRequest_IndexGen); ok {
		return x.IndexGen
	}
	return 0
}

func (x *SearchRequest) GetVersion() int64 {
	if x, ok := x.GetSearcher().(*SearchRequest_Version); ok {
		return x.Version
	}
	return 0
}

func (x *SearchRequest) GetSnapshot() string {
	if x, ok := x.GetSearcher().(*SearchRequest_Snapshot); ok {
		return x.Snapshot
	}
	return ""
}

func (x *SearchRequest) GetTotalHitsThreshold() int32 {
	if x != nil {
		return x.TotalHitsThreshold
	}
	return 0
}

func (x *SearchRequest) GetFacets() []*Facet {
	if x != nil {
		return x.Facets
	}
	return nil
}

func (x *SearchRequest) GetFetchTasks() []*FetchTask {
	if x != nil {
		return x.FetchTasks
	}
	return nil
}

func (x *SearchRequest) GetDisallowPartialResults() bool {
	if x != nil {
		return x.DisallowPartialResults
	}
	return false
}

func (x *SearchRequest) GetQueryNestedPath() string {
	if x != nil {
		return x.QueryNestedPath
	}
	return ""
}

func (x *SearchRequest) GetRescorers() []*Rescorer {
	if x != nil {
		return x.Rescorers
	}
	return nil
}

func (x *SearchRequest) GetProfile() bool {
	if x != nil {
		return x.Profile
	}
	return false
}

func (x *SearchRequest) GetTimeoutCheckEvery() int32 {
	if x != nil {
		return x.TimeoutCheckEvery
	}
	return 0
}

func (x *SearchRequest) GetCollectors() map[string]*Collector {
	if x != nil {
		return x.Collectors
	}
	return nil
}

func (x *SearchRequest) GetTerminateAfter() int32 {
	if x != nil {
		return x.TerminateAfter
	}
	return 0
}

func (x *SearchRequest) GetResponseCompression() string {
	if x != nil {
		return x.ResponseCompression
	}
	return ""
}

type isSearchRequest_Searcher interface {
	isSearchRequest_Searcher()
}

type SearchRequest_IndexGen struct {
	IndexGen int64 `protobuf:"varint,10,opt,name=indexGen,proto3,oneof"` //Search a generation previously returned by an indexing operation such as #addDocument.  Use this to search a non-committed (near-real-time) view of the index.
}

type SearchRequest_Version struct {
	Version int64 `protobuf:"varint,11,opt,name=version,proto3,oneof"` //Search a specific searcher version.  This is typically used by follow-on searches (e.g., user clicks next page, drills down, or changes sort, etc.) to get the same searcher used by the original search.
}

type SearchRequest_Snapshot struct {
	Snapshot string `protobuf:"bytes,12,opt,name=snapshot,proto3,oneof"` //Search a snapshot previously created with #createSnapshot
}

func (*SearchRequest_IndexGen) isSearchRequest_Searcher() {}

func (*SearchRequest_Version) isSearchRequest_Searcher() {}

func (*SearchRequest_Snapshot) isSearchRequest_Searcher() {}

// Virtual field used during search
type VirtualField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Script *Script `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"` // Script defining this field's values.
	Name   string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`     // Virtual field's name. Must be different from registered fields and any other virtual fields.
}

func (x *VirtualField) Reset() {
	*x = VirtualField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VirtualField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VirtualField) ProtoMessage() {}

func (x *VirtualField) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VirtualField.ProtoReflect.Descriptor instead.
func (*VirtualField) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{20}
}

func (x *VirtualField) GetScript() *Script {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *VirtualField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Script struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang   string                        `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`                                                                                             // script language
	Source string                        `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`                                                                                         // script source
	Params map[string]*Script_ParamValue `protobuf:"bytes,7,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // parameters passed into script execution
}

func (x *Script) Reset() {
	*x = Script{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Script) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Script) ProtoMessage() {}

func (x *Script) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Script.ProtoReflect.Descriptor instead.
func (*Script) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{21}
}

func (x *Script) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Script) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Script) GetParams() map[string]*Script_ParamValue {
	if x != nil {
		return x.Params
	}
	return nil
}

type QuerySortField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoDocScores bool        `protobuf:"varint,1,opt,name=doDocScores,proto3" json:"doDocScores,omitempty"` //Compute the doc score for each collected (costs added CPU); default:false
	DoMaxScore  bool        `protobuf:"varint,2,opt,name=doMaxScore,proto3" json:"doMaxScore,omitempty"`   //Compute the max score across all hits (costs added CPU); default: false
	Fields      *SortFields `protobuf:"bytes,3,opt,name=fields,proto3" json:"fields,omitempty"`            //List of Fields to sort on.
}

func (x *QuerySortField) Reset() {
	*x = QuerySortField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySortField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySortField) ProtoMessage() {}

func (x *QuerySortField) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySortField.ProtoReflect.Descriptor instead.
func (*QuerySortField) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{22}
}

func (x *QuerySortField) GetDoDocScores() bool {
	if x != nil {
		return x.DoDocScores
	}
	return false
}

func (x *QuerySortField) GetDoMaxScore() bool {
	if x != nil {
		return x.DoMaxScore
	}
	return false
}

func (x *QuerySortField) GetFields() *SortFields {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Fields to sort on either during index time or search time
type SortFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SortedFields []*SortType `protobuf:"bytes,1,rep,name=sortedFields,proto3" json:"sortedFields,omitempty"`
}

func (x *SortFields) Reset() {
	*x = SortFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortFields) ProtoMessage() {}

func (x *SortFields) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortFields.ProtoReflect.Descriptor instead.
func (*SortFields) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{23}
}

func (x *SortFields) GetSortedFields() []*SortType {
	if x != nil {
		return x.SortedFields
	}
	return nil
}

// "The field to sort on. Pass <code>docid</code> for index order and <code>score</code> for relevance sort.
type SortType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName string   `protobuf:"bytes,1,opt,name=fieldName,proto3" json:"fieldName,omitempty"`                           // name of field to sort
	Selector  Selector `protobuf:"varint,2,opt,name=selector,proto3,enum=luceneserver.Selector" json:"selector,omitempty"` // For multi valued fields, how to select which value is used for sorting
	Origin    *Point   `protobuf:"bytes,3,opt,name=origin,proto3" json:"origin,omitempty"`                                 // For distance sort, the point that we measure distance from
	// Whether missing values should sort last instead of first.
	//Note that this runs \"before\" reverse, so if you sort missing first and reverse=true then missing values will
	//be at the end.
	MissingLat bool `protobuf:"varint,4,opt,name=missingLat,proto3" json:"missingLat,omitempty"`
	// Sort in reverse of the field's natural order
	Reverse bool `protobuf:"varint,5,opt,name=reverse,proto3" json:"reverse,omitempty"`
}

func (x *SortType) Reset() {
	*x = SortType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortType) ProtoMessage() {}

func (x *SortType) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortType.ProtoReflect.Descriptor instead.
func (*SortType) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{24}
}

func (x *SortType) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *SortType) GetSelector() Selector {
	if x != nil {
		return x.Selector
	}
	return Selector_MIN
}

func (x *SortType) GetOrigin() *Point {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *SortType) GetMissingLat() bool {
	if x != nil {
		return x.MissingLat
	}
	return false
}

func (x *SortType) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

type TotalHits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Relation TotalHits_Relation `protobuf:"varint,1,opt,name=relation,proto3,enum=luceneserver.TotalHits_Relation" json:"relation,omitempty"`
	//* The value of the total hit count. Must be interpreted in the context of * {#relation}.
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TotalHits) Reset() {
	*x = TotalHits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TotalHits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TotalHits) ProtoMessage() {}

func (x *TotalHits) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TotalHits.ProtoReflect.Descriptor instead.
func (*TotalHits) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{25}
}

func (x *TotalHits) GetRelation() TotalHits_Relation {
	if x != nil {
		return x.Relation
	}
	return TotalHits_EQUAL_TO
}

func (x *TotalHits) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Point representation
type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`   // Latitude of the point
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"` // Longitude of the point
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{26}
}

func (x *Point) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Point) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type SearchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diagnostics *SearchResponse_Diagnostics `protobuf:"bytes,1,opt,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	HitTimeout  bool                        `protobuf:"varint,2,opt,name=hitTimeout,proto3" json:"hitTimeout,omitempty"` // Set to true if search times out and a degraded response is returned
	TotalHits   *TotalHits                  `protobuf:"bytes,3,opt,name=totalHits,proto3" json:"totalHits,omitempty"`
	Hits        []*SearchResponse_Hit       `protobuf:"bytes,4,rep,name=hits,proto3" json:"hits,omitempty"`
	SearchState *SearchResponse_SearchState `protobuf:"bytes,5,opt,name=searchState,proto3" json:"searchState,omitempty"`
	FacetResult []*FacetResult              `protobuf:"bytes,6,rep,name=facetResult,proto3" json:"facetResult,omitempty"` ////Counts or aggregates for a single dimension
	// Detailed stats returned when profile=true in request
	ProfileResult *ProfileResult `protobuf:"bytes,7,opt,name=profileResult,proto3" json:"profileResult,omitempty"`
	// Results from any additional document collectors
	CollectorResults map[string]*CollectorResult `protobuf:"bytes,8,rep,name=collectorResults,proto3" json:"collectorResults,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If this query hit the terminateAfter threshold specified in the request
	TerminatedEarly bool `protobuf:"varint,9,opt,name=terminatedEarly,proto3" json:"terminatedEarly,omitempty"`
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{27}
}

func (x *SearchResponse) GetDiagnostics() *SearchResponse_Diagnostics {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *SearchResponse) GetHitTimeout() bool {
	if x != nil {
		return x.HitTimeout
	}
	return false
}

func (x *SearchResponse) GetTotalHits() *TotalHits {
	if x != nil {
		return x.TotalHits
	}
	return nil
}

func (x *SearchResponse) GetHits() []*SearchResponse_Hit {
	if x != nil {
		return x.Hits
	}
	return nil
}

func (x *SearchResponse) GetSearchState() *SearchResponse_SearchState {
	if x != nil {
		return x.SearchState
	}
	return nil
}

func (x *SearchResponse) GetFacetResult() []*FacetResult {
	if x != nil {
		return x.FacetResult
	}
	return nil
}

func (x *SearchResponse) GetProfileResult() *ProfileResult {
	if x != nil {
		return x.ProfileResult
	}
	return nil
}

func (x *SearchResponse) GetCollectorResults() map[string]*CollectorResult {
	if x != nil {
		return x.CollectorResults
	}
	return nil
}

func (x *SearchResponse) GetTerminatedEarly() bool {
	if x != nil {
		return x.TerminatedEarly
	}
	return false
}

type NumericRangeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label        string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`                //Label for this range
	Min          int64  `protobuf:"varint,2,opt,name=min,proto3" json:"min,omitempty"`                   //Min value for the range
	MinInclusive bool   `protobuf:"varint,3,opt,name=minInclusive,proto3" json:"minInclusive,omitempty"` //True if the min value is inclusive
	Max          int64  `protobuf:"varint,4,opt,name=max,proto3" json:"max,omitempty"`                   //Max value for the range
	MaxInclusive bool   `protobuf:"varint,5,opt,name=maxInclusive,proto3" json:"maxInclusive,omitempty"` //True if the max value is inclusive
}

func (x *NumericRangeType) Reset() {
	*x = NumericRangeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumericRangeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumericRangeType) ProtoMessage() {}

func (x *NumericRangeType) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumericRangeType.ProtoReflect.Descriptor instead.
func (*NumericRangeType) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{28}
}

func (x *NumericRangeType) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *NumericRangeType) GetMin() int64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *NumericRangeType) GetMinInclusive() bool {
	if x != nil {
		return x.MinInclusive
	}
	return false
}

func (x *NumericRangeType) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

func (x *NumericRangeType) GetMaxInclusive() bool {
	if x != nil {
		return x.MaxInclusive
	}
	return false
}

type Facet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dim           string              `protobuf:"bytes,1,opt,name=dim,proto3" json:"dim,omitempty"`                      //Dimension (field)
	Paths         []string            `protobuf:"bytes,2,rep,name=paths,proto3" json:"paths,omitempty"`                  //Prefix path to facet 'under'
	NumericRange  []*NumericRangeType `protobuf:"bytes,3,rep,name=numericRange,proto3" json:"numericRange,omitempty"`    //Custom numeric ranges.  Field must be indexed with facet=numericRange.
	UseOrdsCache  bool                `protobuf:"varint,4,opt,name=useOrdsCache,proto3" json:"useOrdsCache,omitempty"`   // True if the ordinals cache should be used
	Labels        []string            `protobuf:"bytes,5,rep,name=labels,proto3" json:"labels,omitempty"`                // Specific facet labels to retrieve
	TopN          int32               `protobuf:"varint,6,opt,name=topN,proto3" json:"topN,omitempty"`                   //How many top facets to return
	Script        *Script             `protobuf:"bytes,7,opt,name=script,proto3" json:"script,omitempty"`                //FacetScript definition to use in place of index facet
	SampleTopDocs int32               `protobuf:"varint,8,opt,name=sampleTopDocs,proto3" json:"sampleTopDocs,omitempty"` //Facet over the top N ranked documents, instead of all hits. Only works with field doc values.
	Name          string              `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`                    //Name for this facet
}

func (x *Facet) Reset() {
	*x = Facet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Facet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Facet) ProtoMessage() {}

func (x *Facet) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Facet.ProtoReflect.Descriptor instead.
func (*Facet) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{29}
}

func (x *Facet) GetDim() string {
	if x != nil {
		return x.Dim
	}
	return ""
}

func (x *Facet) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *Facet) GetNumericRange() []*NumericRangeType {
	if x != nil {
		return x.NumericRange
	}
	return nil
}

func (x *Facet) GetUseOrdsCache() bool {
	if x != nil {
		return x.UseOrdsCache
	}
	return false
}

func (x *Facet) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Facet) GetTopN() int32 {
	if x != nil {
		return x.TopN
	}
	return 0
}

func (x *Facet) GetScript() *Script {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *Facet) GetSampleTopDocs() int32 {
	if x != nil {
		return x.SampleTopDocs
	}
	return 0
}

func (x *Facet) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FacetResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dim         string           `protobuf:"bytes,1,opt,name=dim,proto3" json:"dim,omitempty"`                 //Dimension that was requested
	Path        []string         `protobuf:"bytes,2,rep,name=path,proto3" json:"path,omitempty"`               //Path whose children were requested.
	Value       float64          `protobuf:"fixed64,3,opt,name=value,proto3" json:"value,omitempty"`           //Total value for this path (sum of all child counts, or sum of all child values), even those not included in the topN.
	LabelValues []*LabelAndValue `protobuf:"bytes,4,rep,name=labelValues,proto3" json:"labelValues,omitempty"` // Child counts.
	ChildCount  int64            `protobuf:"varint,5,opt,name=childCount,proto3" json:"childCount,omitempty"`  //How many child labels were encountered.
	Name        string           `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`               //Name for this facet
}

func (x *FacetResult) Reset() {
	*x = FacetResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacetResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacetResult) ProtoMessage() {}

func (x *FacetResult) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacetResult.ProtoReflect.Descriptor instead.
func (*FacetResult) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{30}
}

func (x *FacetResult) GetDim() string {
	if x != nil {
		return x.Dim
	}
	return ""
}

func (x *FacetResult) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *FacetResult) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *FacetResult) GetLabelValues() []*LabelAndValue {
	if x != nil {
		return x.LabelValues
	}
	return nil
}

func (x *FacetResult) GetChildCount() int64 {
	if x != nil {
		return x.ChildCount
	}
	return 0
}

func (x *FacetResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LabelAndValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string  `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`   //Facet's label.
	Value float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"` // Value associated with this label.
}

func (x *LabelAndValue) Reset() {
	*x = LabelAndValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabelAndValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabelAndValue) ProtoMessage() {}

func (x *LabelAndValue) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabelAndValue.ProtoReflect.Descriptor instead.
func (*LabelAndValue) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{31}
}

func (x *LabelAndValue) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *LabelAndValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type FetchTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`     //Name of task, as registered by a FetchTaskPlugin
	Params *structpb.Struct `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"` //Optional task parameters
}

func (x *FetchTask) Reset() {
	*x = FetchTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchTask) ProtoMessage() {}

func (x *FetchTask) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchTask.ProtoReflect.Descriptor instead.
func (*FetchTask) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{32}
}

func (x *FetchTask) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FetchTask) GetParams() *structpb.Struct {
	if x != nil {
		return x.Params
	}
	return nil
}

// Defines an entry point for using a rescorer from plugin
type PluginRescorer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Params *structpb.Struct `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"` // arguments passed to the plugin
}

func (x *PluginRescorer) Reset() {
	*x = PluginRescorer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginRescorer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginRescorer) ProtoMessage() {}

func (x *PluginRescorer) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginRescorer.ProtoReflect.Descriptor instead.
func (*PluginRescorer) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{33}
}

func (x *PluginRescorer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginRescorer) GetParams() *structpb.Struct {
	if x != nil {
		return x.Params
	}
	return nil
}

// Defines a rescorer which uses query to rescore documents in the second pass
type QueryRescorer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RescoreQuery       *Query  `protobuf:"bytes,1,opt,name=rescoreQuery,proto3" json:"rescoreQuery,omitempty"`
	QueryWeight        float64 `protobuf:"fixed64,2,opt,name=queryWeight,proto3" json:"queryWeight,omitempty"`
	RescoreQueryWeight float64 `protobuf:"fixed64,3,opt,name=rescoreQueryWeight,proto3" json:"rescoreQueryWeight,omitempty"`
}

func (x *QueryRescorer) Reset() {
	*x = QueryRescorer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRescorer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRescorer) ProtoMessage() {}

func (x *QueryRescorer) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRescorer.ProtoReflect.Descriptor instead.
func (*QueryRescorer) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{34}
}

func (x *QueryRescorer) GetRescoreQuery() *Query {
	if x != nil {
		return x.RescoreQuery
	}
	return nil
}

func (x *QueryRescorer) GetQueryWeight() float64 {
	if x != nil {
		return x.QueryWeight
	}
	return 0
}

func (x *QueryRescorer) GetRescoreQueryWeight() float64 {
	if x != nil {
		return x.RescoreQueryWeight
	}
	return 0
}

// Defines a rescorer which is executed after the first search pass
type Rescorer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WindowSize int32 `protobuf:"varint,1,opt,name=windowSize,proto3" json:"windowSize,omitempty"`
	// Types that are assignable to Rescorers:
	//	*Rescorer_QueryRescorer
	//	*Rescorer_PluginRescorer
	Rescorers isRescorer_Rescorers `protobuf_oneof:"Rescorers"`
	// Must be unique for each Rescorer
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Rescorer) Reset() {
	*x = Rescorer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rescorer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rescorer) ProtoMessage() {}

func (x *Rescorer) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rescorer.ProtoReflect.Descriptor instead.
func (*Rescorer) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{35}
}

func (x *Rescorer) GetWindowSize() int32 {
	if x != nil {
		return x.WindowSize
	}
	return 0
}

func (m *Rescorer) GetRescorers() isRescorer_Rescorers {
	if m != nil {
		return m.Rescorers
	}
	return nil
}

func (x *Rescorer) GetQueryRescorer() *QueryRescorer {
	if x, ok := x.GetRescorers().(*Rescorer_QueryRescorer); ok {
		return x.QueryRescorer
	}
	return nil
}

func (x *Rescorer) GetPluginRescorer() *PluginRescorer {
	if x, ok := x.GetRescorers().(*Rescorer_PluginRescorer); ok {
		return x.PluginRescorer
	}
	return nil
}

func (x *Rescorer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type isRescorer_Rescorers interface {
	isRescorer_Rescorers()
}

type Rescorer_QueryRescorer struct {
	QueryRescorer *QueryRescorer `protobuf:"bytes,2,opt,name=queryRescorer,proto3,oneof"`
}

type Rescorer_PluginRescorer struct {
	PluginRescorer *PluginRescorer `protobuf:"bytes,3,opt,name=pluginRescorer,proto3,oneof"`
}

func (*Rescorer_QueryRescorer) isRescorer_Rescorers() {}

func (*Rescorer_PluginRescorer) isRescorer_Rescorers() {}

// Defines detailed profiling stats for queries that set profile=true
type ProfileResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SearchStats    *ProfileResult_SearchStats `protobuf:"bytes,1,opt,name=searchStats,proto3" json:"searchStats,omitempty"`
	ParsedQuery    string                     `protobuf:"bytes,2,opt,name=parsedQuery,proto3" json:"parsedQuery,omitempty"`
	RewrittenQuery string                     `protobuf:"bytes,3,opt,name=rewrittenQuery,proto3" json:"rewrittenQuery,omitempty"`
	DrillDownQuery string                     `protobuf:"bytes,4,opt,name=drillDownQuery,proto3" json:"drillDownQuery,omitempty"`
}

func (x *ProfileResult) Reset() {
	*x = ProfileResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileResult) ProtoMessage() {}

func (x *ProfileResult) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileResult.ProtoReflect.Descriptor instead.
func (*ProfileResult) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{36}
}

func (x *ProfileResult) GetSearchStats() *ProfileResult_SearchStats {
	if x != nil {
		return x.SearchStats
	}
	return nil
}

func (x *ProfileResult) GetParsedQuery() string {
	if x != nil {
		return x.ParsedQuery
	}
	return ""
}

func (x *ProfileResult) GetRewrittenQuery() string {
	if x != nil {
		return x.RewrittenQuery
	}
	return ""
}

func (x *ProfileResult) GetDrillDownQuery() string {
	if x != nil {
		return x.DrillDownQuery
	}
	return ""
}

//Definition of additional document collector.
type Collector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Collectors:
	//	*Collector_Terms
	//	*Collector_PluginCollector
	Collectors isCollector_Collectors `protobuf_oneof:"Collectors"`
}

func (x *Collector) Reset() {
	*x = Collector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Collector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Collector) ProtoMessage() {}

func (x *Collector) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Collector.ProtoReflect.Descriptor instead.
func (*Collector) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{37}
}

func (m *Collector) GetCollectors() isCollector_Collectors {
	if m != nil {
		return m.Collectors
	}
	return nil
}

func (x *Collector) GetTerms() *TermsCollector {
	if x, ok := x.GetCollectors().(*Collector_Terms); ok {
		return x.Terms
	}
	return nil
}

func (x *Collector) GetPluginCollector() *PluginCollector {
	if x, ok := x.GetCollectors().(*Collector_PluginCollector); ok {
		return x.PluginCollector
	}
	return nil
}

type isCollector_Collectors interface {
	isCollector_Collectors()
}

type Collector_Terms struct {
	//Collector for aggregating based on term values.
	Terms *TermsCollector `protobuf:"bytes,1,opt,name=terms,proto3,oneof"`
}

type Collector_PluginCollector struct {
	PluginCollector *PluginCollector `protobuf:"bytes,2,opt,name=pluginCollector,proto3,oneof"`
}

func (*Collector_Terms) isCollector_Collectors() {}

func (*Collector_PluginCollector) isCollector_Collectors() {}

// Defines an entry point for using a collector from a plugin
type PluginCollector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Params *structpb.Struct `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"` // arguments passed to the plugin
}

func (x *PluginCollector) Reset() {
	*x = PluginCollector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginCollector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginCollector) ProtoMessage() {}

func (x *PluginCollector) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginCollector.ProtoReflect.Descriptor instead.
func (*PluginCollector) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{38}
}

func (x *PluginCollector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginCollector) GetParams() *structpb.Struct {
	if x != nil {
		return x.Params
	}
	return nil
}

//Definition of term aggregating collector.
type TermsCollector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TermsSource:
	//	*TermsCollector_Field
	//	*TermsCollector_Script
	TermsSource isTermsCollector_TermsSource `protobuf_oneof:"TermsSource"`
	//Maximum number of top terms to return.
	Size int32 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *TermsCollector) Reset() {
	*x = TermsCollector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermsCollector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermsCollector) ProtoMessage() {}

func (x *TermsCollector) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermsCollector.ProtoReflect.Descriptor instead.
func (*TermsCollector) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{39}
}

func (m *TermsCollector) GetTermsSource() isTermsCollector_TermsSource {
	if m != nil {
		return m.TermsSource
	}
	return nil
}

func (x *TermsCollector) GetField() string {
	if x, ok := x.GetTermsSource().(*TermsCollector_Field); ok {
		return x.Field
	}
	return ""
}

func (x *TermsCollector) GetScript() *Script {
	if x, ok := x.GetTermsSource().(*TermsCollector_Script); ok {
		return x.Script
	}
	return nil
}

func (x *TermsCollector) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type isTermsCollector_TermsSource interface {
	isTermsCollector_TermsSource()
}

type TermsCollector_Field struct {
	// Placeholder: TODO implement
	Field string `protobuf:"bytes,1,opt,name=field,proto3,oneof"`
}

type TermsCollector_Script struct {
	//Use FacetScript definition to produce terms.
	Script *Script `protobuf:"bytes,2,opt,name=script,proto3,oneof"`
}

func (*TermsCollector_Field) isTermsCollector_TermsSource() {}

func (*TermsCollector_Script) isTermsCollector_TermsSource() {}

type CollectorResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CollectorResults:
	//	*CollectorResult_BucketResult
	//	*CollectorResult_AnyResult
	CollectorResults isCollectorResult_CollectorResults `protobuf_oneof:"CollectorResults"`
}

func (x *CollectorResult) Reset() {
	*x = CollectorResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectorResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectorResult) ProtoMessage() {}

func (x *CollectorResult) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectorResult.ProtoReflect.Descriptor instead.
func (*CollectorResult) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{40}
}

func (m *CollectorResult) GetCollectorResults() isCollectorResult_CollectorResults {
	if m != nil {
		return m.CollectorResults
	}
	return nil
}

func (x *CollectorResult) GetBucketResult() *BucketResult {
	if x, ok := x.GetCollectorResults().(*CollectorResult_BucketResult); ok {
		return x.BucketResult
	}
	return nil
}

func (x *CollectorResult) GetAnyResult() *anypb.Any {
	if x, ok := x.GetCollectorResults().(*CollectorResult_AnyResult); ok {
		return x.AnyResult
	}
	return nil
}

type isCollectorResult_CollectorResults interface {
	isCollectorResult_CollectorResults()
}

type CollectorResult_BucketResult struct {
	//Result of collector that produces buckets and counts.
	BucketResult *BucketResult `protobuf:"bytes,1,opt,name=bucketResult,proto3,oneof"`
}

type CollectorResult_AnyResult struct {
	//Flexible collector result for additional document collectors
	AnyResult *anypb.Any `protobuf:"bytes,2,opt,name=anyResult,proto3,oneof"`
}

func (*CollectorResult_BucketResult) isCollectorResult_CollectorResults() {}

func (*CollectorResult_AnyResult) isCollectorResult_CollectorResults() {}

type BucketResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []*BucketResult_Bucket `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
	//Number of unique buckets, including those not in the buckets list.
	TotalBuckets int32 `protobuf:"varint,2,opt,name=totalBuckets,proto3" json:"totalBuckets,omitempty"`
	//Number of other collected counts not represented in the buckets' counts.
	TotalOtherCounts int32 `protobuf:"varint,3,opt,name=totalOtherCounts,proto3" json:"totalOtherCounts,omitempty"`
}

func (x *BucketResult) Reset() {
	*x = BucketResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketResult) ProtoMessage() {}

func (x *BucketResult) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketResult.ProtoReflect.Descriptor instead.
func (*BucketResult) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{41}
}

func (x *BucketResult) GetBuckets() []*BucketResult_Bucket {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *BucketResult) GetTotalBuckets() int32 {
	if x != nil {
		return x.TotalBuckets
	}
	return 0
}

func (x *BucketResult) GetTotalOtherCounts() int32 {
	if x != nil {
		return x.TotalOtherCounts
	}
	return 0
}

type TermInSetQuery_TextTerms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terms []string `protobuf:"bytes,1,rep,name=terms,proto3" json:"terms,omitempty"`
}

func (x *TermInSetQuery_TextTerms) Reset() {
	*x = TermInSetQuery_TextTerms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermInSetQuery_TextTerms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermInSetQuery_TextTerms) ProtoMessage() {}

func (x *TermInSetQuery_TextTerms) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermInSetQuery_TextTerms.ProtoReflect.Descriptor instead.
func (*TermInSetQuery_TextTerms) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{8, 0}
}

func (x *TermInSetQuery_TextTerms) GetTerms() []string {
	if x != nil {
		return x.Terms
	}
	return nil
}

type TermInSetQuery_IntTerms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terms []int32 `protobuf:"varint,1,rep,packed,name=terms,proto3" json:"terms,omitempty"`
}

func (x *TermInSetQuery_IntTerms) Reset() {
	*x = TermInSetQuery_IntTerms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermInSetQuery_IntTerms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermInSetQuery_IntTerms) ProtoMessage() {}

func (x *TermInSetQuery_IntTerms) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermInSetQuery_IntTerms.ProtoReflect.Descriptor instead.
func (*TermInSetQuery_IntTerms) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{8, 1}
}

func (x *TermInSetQuery_IntTerms) GetTerms() []int32 {
	if x != nil {
		return x.Terms
	}
	return nil
}

type TermInSetQuery_LongTerms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terms []int64 `protobuf:"varint,1,rep,packed,name=terms,proto3" json:"terms,omitempty"`
}

func (x *TermInSetQuery_LongTerms) Reset() {
	*x = TermInSetQuery_LongTerms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermInSetQuery_LongTerms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermInSetQuery_LongTerms) ProtoMessage() {}

func (x *TermInSetQuery_LongTerms) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermInSetQuery_LongTerms.ProtoReflect.Descriptor instead.
func (*TermInSetQuery_LongTerms) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{8, 2}
}

func (x *TermInSetQuery_LongTerms) GetTerms() []int64 {
	if x != nil {
		return x.Terms
	}
	return nil
}

type TermInSetQuery_FloatTerms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terms []float32 `protobuf:"fixed32,1,rep,packed,name=terms,proto3" json:"terms,omitempty"`
}

func (x *TermInSetQuery_FloatTerms) Reset() {
	*x = TermInSetQuery_FloatTerms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermInSetQuery_FloatTerms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermInSetQuery_FloatTerms) ProtoMessage() {}

func (x *TermInSetQuery_FloatTerms) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermInSetQuery_FloatTerms.ProtoReflect.Descriptor instead.
func (*TermInSetQuery_FloatTerms) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{8, 3}
}

func (x *TermInSetQuery_FloatTerms) GetTerms() []float32 {
	if x != nil {
		return x.Terms
	}
	return nil
}

type TermInSetQuery_DoubleTerms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Terms []float64 `protobuf:"fixed64,1,rep,packed,name=terms,proto3" json:"terms,omitempty"`
}

func (x *TermInSetQuery_DoubleTerms) Reset() {
	*x = TermInSetQuery_DoubleTerms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TermInSetQuery_DoubleTerms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TermInSetQuery_DoubleTerms) ProtoMessage() {}

func (x *TermInSetQuery_DoubleTerms) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TermInSetQuery_DoubleTerms.ProtoReflect.Descriptor instead.
func (*TermInSetQuery_DoubleTerms) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{8, 4}
}

func (x *TermInSetQuery_DoubleTerms) GetTerms() []float64 {
	if x != nil {
		return x.Terms
	}
	return nil
}

// script parameter entry
type Script_ParamValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ParamValues:
	//	*Script_ParamValue_TextValue
	//	*Script_ParamValue_BooleanValue
	//	*Script_ParamValue_IntValue
	//	*Script_ParamValue_LongValue
	//	*Script_ParamValue_FloatValue
	//	*Script_ParamValue_DoubleValue
	//	*Script_ParamValue_NullValue
	//	*Script_ParamValue_ListValue
	//	*Script_ParamValue_StructValue
	ParamValues isScript_ParamValue_ParamValues `protobuf_oneof:"ParamValues"`
}

func (x *Script_ParamValue) Reset() {
	*x = Script_ParamValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Script_ParamValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Script_ParamValue) ProtoMessage() {}

func (x *Script_ParamValue) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Script_ParamValue.ProtoReflect.Descriptor instead.
func (*Script_ParamValue) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{21, 0}
}

func (m *Script_ParamValue) GetParamValues() isScript_ParamValue_ParamValues {
	if m != nil {
		return m.ParamValues
	}
	return nil
}

func (x *Script_ParamValue) GetTextValue() string {
	if x, ok := x.GetParamValues().(*Script_ParamValue_TextValue); ok {
		return x.TextValue
	}
	return ""
}

func (x *Script_ParamValue) GetBooleanValue() bool {
	if x, ok := x.GetParamValues().(*Script_ParamValue_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (x *Script_ParamValue) GetIntValue() int32 {
	if x, ok := x.GetParamValues().(*Script_ParamValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *Script_ParamValue) GetLongValue() int64 {
	if x, ok := x.GetParamValues().(*Script_ParamValue_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (x *Script_ParamValue) GetFloatValue() float32 {
	if x, ok := x.GetParamValues().(*Script_ParamValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *Script_ParamValue) GetDoubleValue() float64 {
	if x, ok := x.GetParamValues().(*Script_ParamValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *Script_ParamValue) GetNullValue() Script_ParamNullValue {
	if x, ok := x.GetParamValues().(*Script_ParamValue_NullValue); ok {
		return x.NullValue
	}
	return Script_NULL_VALUE
}

func (x *Script_ParamValue) GetListValue() *Script_ParamListValue {
	if x, ok := x.GetParamValues().(*Script_ParamValue_ListValue); ok {
		return x.ListValue
	}
	return nil
}

func (x *Script_ParamValue) GetStructValue() *Script_ParamStructValue {
	if x, ok := x.GetParamValues().(*Script_ParamValue_StructValue); ok {
		return x.StructValue
	}
	return nil
}

type isScript_ParamValue_ParamValues interface {
	isScript_ParamValue_ParamValues()
}

type Script_ParamValue_TextValue struct {
	TextValue string `protobuf:"bytes,1,opt,name=textValue,proto3,oneof"`
}

type Script_ParamValue_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,2,opt,name=booleanValue,proto3,oneof"`
}

type Script_ParamValue_IntValue struct {
	IntValue int32 `protobuf:"varint,3,opt,name=intValue,proto3,oneof"`
}

type Script_ParamValue_LongValue struct {
	LongValue int64 `protobuf:"varint,4,opt,name=longValue,proto3,oneof"`
}

type Script_ParamValue_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,5,opt,name=floatValue,proto3,oneof"`
}

type Script_ParamValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,6,opt,name=doubleValue,proto3,oneof"`
}

type Script_ParamValue_NullValue struct {
	NullValue Script_ParamNullValue `protobuf:"varint,7,opt,name=nullValue,proto3,enum=luceneserver.Script_ParamNullValue,oneof"`
}

type Script_ParamValue_ListValue struct {
	ListValue *Script_ParamListValue `protobuf:"bytes,8,opt,name=listValue,proto3,oneof"`
}

type Script_ParamValue_StructValue struct {
	StructValue *Script_ParamStructValue `protobuf:"bytes,9,opt,name=structValue,proto3,oneof"`
}

func (*Script_ParamValue_TextValue) isScript_ParamValue_ParamValues() {}

func (*Script_ParamValue_BooleanValue) isScript_ParamValue_ParamValues() {}

func (*Script_ParamValue_IntValue) isScript_ParamValue_ParamValues() {}

func (*Script_ParamValue_LongValue) isScript_ParamValue_ParamValues() {}

func (*Script_ParamValue_FloatValue) isScript_ParamValue_ParamValues() {}

func (*Script_ParamValue_DoubleValue) isScript_ParamValue_ParamValues() {}

func (*Script_ParamValue_NullValue) isScript_ParamValue_ParamValues() {}

func (*Script_ParamValue_ListValue) isScript_ParamValue_ParamValues() {}

func (*Script_ParamValue_StructValue) isScript_ParamValue_ParamValues() {}

// map parameter value
type Script_ParamStructValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields map[string]*Script_ParamValue `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Script_ParamStructValue) Reset() {
	*x = Script_ParamStructValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Script_ParamStructValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Script_ParamStructValue) ProtoMessage() {}

func (x *Script_ParamStructValue) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Script_ParamStructValue.ProtoReflect.Descriptor instead.
func (*Script_ParamStructValue) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{21, 1}
}

func (x *Script_ParamStructValue) GetFields() map[string]*Script_ParamValue {
	if x != nil {
		return x.Fields
	}
	return nil
}

// list parameter value
type Script_ParamListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*Script_ParamValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Script_ParamListValue) Reset() {
	*x = Script_ParamListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Script_ParamListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Script_ParamListValue) ProtoMessage() {}

func (x *Script_ParamListValue) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Script_ParamListValue.ProtoReflect.Descriptor instead.
func (*Script_ParamListValue) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{21, 2}
}

func (x *Script_ParamListValue) GetValues() []*Script_ParamValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type SearchResponse_Diagnostics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query debug has been moved to ProfileResult
	//
	// Deprecated: Do not use.
	ParsedQuery string `protobuf:"bytes,1,opt,name=parsedQuery,proto3" json:"parsedQuery,omitempty"`
	// Deprecated: Do not use.
	RewrittenQuery string `protobuf:"bytes,2,opt,name=rewrittenQuery,proto3" json:"rewrittenQuery,omitempty"`
	// Deprecated: Do not use.
	DrillDownQuery            string             `protobuf:"bytes,3,opt,name=drillDownQuery,proto3" json:"drillDownQuery,omitempty"`
	FirstPassSearchTimeMs     float64            `protobuf:"fixed64,4,opt,name=firstPassSearchTimeMs,proto3" json:"firstPassSearchTimeMs,omitempty"`
	HighlightTimeMs           float64            `protobuf:"fixed64,5,opt,name=highlightTimeMs,proto3" json:"highlightTimeMs,omitempty"`
	GetFieldsTimeMs           float64            `protobuf:"fixed64,6,opt,name=getFieldsTimeMs,proto3" json:"getFieldsTimeMs,omitempty"`
	NewSnapshotSearcherOpenMs float64            `protobuf:"fixed64,7,opt,name=newSnapshotSearcherOpenMs,proto3" json:"newSnapshotSearcherOpenMs,omitempty"`
	NrtWaitTimeMs             float64            `protobuf:"fixed64,8,opt,name=nrtWaitTimeMs,proto3" json:"nrtWaitTimeMs,omitempty"`
	FacetTimeMs               map[string]float64 `protobuf:"bytes,9,rep,name=facetTimeMs,proto3" json:"facetTimeMs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	RescoreTimeMs             float64            `protobuf:"fixed64,10,opt,name=rescoreTimeMs,proto3" json:"rescoreTimeMs,omitempty"`
	RescorersTimeMs           map[string]float64 `protobuf:"bytes,11,rep,name=rescorersTimeMs,proto3" json:"rescorersTimeMs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *SearchResponse_Diagnostics) Reset() {
	*x = SearchResponse_Diagnostics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse_Diagnostics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse_Diagnostics) ProtoMessage() {}

func (x *SearchResponse_Diagnostics) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse_Diagnostics.ProtoReflect.Descriptor instead.
func (*SearchResponse_Diagnostics) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{27, 0}
}

// Deprecated: Do not use.
func (x *SearchResponse_Diagnostics) GetParsedQuery() string {
	if x != nil {
		return x.ParsedQuery
	}
	return ""
}

// Deprecated: Do not use.
func (x *SearchResponse_Diagnostics) GetRewrittenQuery() string {
	if x != nil {
		return x.RewrittenQuery
	}
	return ""
}

// Deprecated: Do not use.
func (x *SearchResponse_Diagnostics) GetDrillDownQuery() string {
	if x != nil {
		return x.DrillDownQuery
	}
	return ""
}

func (x *SearchResponse_Diagnostics) GetFirstPassSearchTimeMs() float64 {
	if x != nil {
		return x.FirstPassSearchTimeMs
	}
	return 0
}

func (x *SearchResponse_Diagnostics) GetHighlightTimeMs() float64 {
	if x != nil {
		return x.HighlightTimeMs
	}
	return 0
}

func (x *SearchResponse_Diagnostics) GetGetFieldsTimeMs() float64 {
	if x != nil {
		return x.GetFieldsTimeMs
	}
	return 0
}

func (x *SearchResponse_Diagnostics) GetNewSnapshotSearcherOpenMs() float64 {
	if x != nil {
		return x.NewSnapshotSearcherOpenMs
	}
	return 0
}

func (x *SearchResponse_Diagnostics) GetNrtWaitTimeMs() float64 {
	if x != nil {
		return x.NrtWaitTimeMs
	}
	return 0
}

func (x *SearchResponse_Diagnostics) GetFacetTimeMs() map[string]float64 {
	if x != nil {
		return x.FacetTimeMs
	}
	return nil
}

func (x *SearchResponse_Diagnostics) GetRescoreTimeMs() float64 {
	if x != nil {
		return x.RescoreTimeMs
	}
	return 0
}

func (x *SearchResponse_Diagnostics) GetRescorersTimeMs() map[string]float64 {
	if x != nil {
		return x.RescorersTimeMs
	}
	return nil
}

type SearchResponse_Hit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LuceneDocId  int32                                              `protobuf:"varint,1,opt,name=luceneDocId,proto3" json:"luceneDocId,omitempty"`
	Score        float64                                            `protobuf:"fixed64,2,opt,name=score,proto3" json:"score,omitempty"`
	Fields       map[string]*SearchResponse_Hit_CompositeFieldValue `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`             // Field name to value
	SortedFields map[string]*SearchResponse_Hit_CompositeFieldValue `protobuf:"bytes,4,rep,name=sortedFields,proto3" json:"sortedFields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Sorted field name to value
}

func (x *SearchResponse_Hit) Reset() {
	*x = SearchResponse_Hit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse_Hit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse_Hit) ProtoMessage() {}

func (x *SearchResponse_Hit) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse_Hit.ProtoReflect.Descriptor instead.
func (*SearchResponse_Hit) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{27, 1}
}

func (x *SearchResponse_Hit) GetLuceneDocId() int32 {
	if x != nil {
		return x.LuceneDocId
	}
	return 0
}

func (x *SearchResponse_Hit) GetScore() float64 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SearchResponse_Hit) GetFields() map[string]*SearchResponse_Hit_CompositeFieldValue {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SearchResponse_Hit) GetSortedFields() map[string]*SearchResponse_Hit_CompositeFieldValue {
	if x != nil {
		return x.SortedFields
	}
	return nil
}

type SearchResponse_SearchState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp       int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SearcherVersion int64    `protobuf:"varint,2,opt,name=searcherVersion,proto3" json:"searcherVersion,omitempty"`
	LastDocId       int32    `protobuf:"varint,3,opt,name=lastDocId,proto3" json:"lastDocId,omitempty"`
	LastFieldValues []string `protobuf:"bytes,4,rep,name=lastFieldValues,proto3" json:"lastFieldValues,omitempty"`
	LastScore       float32  `protobuf:"fixed32,5,opt,name=lastScore,proto3" json:"lastScore,omitempty"`
}

func (x *SearchResponse_SearchState) Reset() {
	*x = SearchResponse_SearchState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse_SearchState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse_SearchState) ProtoMessage() {}

func (x *SearchResponse_SearchState) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse_SearchState.ProtoReflect.Descriptor instead.
func (*SearchResponse_SearchState) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{27, 2}
}

func (x *SearchResponse_SearchState) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SearchResponse_SearchState) GetSearcherVersion() int64 {
	if x != nil {
		return x.SearcherVersion
	}
	return 0
}

func (x *SearchResponse_SearchState) GetLastDocId() int32 {
	if x != nil {
		return x.LastDocId
	}
	return 0
}

func (x *SearchResponse_SearchState) GetLastFieldValues() []string {
	if x != nil {
		return x.LastFieldValues
	}
	return nil
}

func (x *SearchResponse_SearchState) GetLastScore() float32 {
	if x != nil {
		return x.LastScore
	}
	return 0
}

type SearchResponse_Hit_FieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FieldValues:
	//	*SearchResponse_Hit_FieldValue_TextValue
	//	*SearchResponse_Hit_FieldValue_BooleanValue
	//	*SearchResponse_Hit_FieldValue_IntValue
	//	*SearchResponse_Hit_FieldValue_LongValue
	//	*SearchResponse_Hit_FieldValue_FloatValue
	//	*SearchResponse_Hit_FieldValue_DoubleValue
	//	*SearchResponse_Hit_FieldValue_LatLngValue
	//	*SearchResponse_Hit_FieldValue_StructValue
	//	*SearchResponse_Hit_FieldValue_VectorValue
	FieldValues isSearchResponse_Hit_FieldValue_FieldValues `protobuf_oneof:"FieldValues"`
}

func (x *SearchResponse_Hit_FieldValue) Reset() {
	*x = SearchResponse_Hit_FieldValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse_Hit_FieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse_Hit_FieldValue) ProtoMessage() {}

func (x *SearchResponse_Hit_FieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse_Hit_FieldValue.ProtoReflect.Descriptor instead.
func (*SearchResponse_Hit_FieldValue) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{27, 1, 0}
}

func (m *SearchResponse_Hit_FieldValue) GetFieldValues() isSearchResponse_Hit_FieldValue_FieldValues {
	if m != nil {
		return m.FieldValues
	}
	return nil
}

func (x *SearchResponse_Hit_FieldValue) GetTextValue() string {
	if x, ok := x.GetFieldValues().(*SearchResponse_Hit_FieldValue_TextValue); ok {
		return x.TextValue
	}
	return ""
}

func (x *SearchResponse_Hit_FieldValue) GetBooleanValue() bool {
	if x, ok := x.GetFieldValues().(*SearchResponse_Hit_FieldValue_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (x *SearchResponse_Hit_FieldValue) GetIntValue() int32 {
	if x, ok := x.GetFieldValues().(*SearchResponse_Hit_FieldValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *SearchResponse_Hit_FieldValue) GetLongValue() int64 {
	if x, ok := x.GetFieldValues().(*SearchResponse_Hit_FieldValue_LongValue); ok {
		return x.LongValue
	}
	return 0
}

func (x *SearchResponse_Hit_FieldValue) GetFloatValue() float32 {
	if x, ok := x.GetFieldValues().(*SearchResponse_Hit_FieldValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *SearchResponse_Hit_FieldValue) GetDoubleValue() float64 {
	if x, ok := x.GetFieldValues().(*SearchResponse_Hit_FieldValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *SearchResponse_Hit_FieldValue) GetLatLngValue() *latlng.LatLng {
	if x, ok := x.GetFieldValues().(*SearchResponse_Hit_FieldValue_LatLngValue); ok {
		return x.LatLngValue
	}
	return nil
}

func (x *SearchResponse_Hit_FieldValue) GetStructValue() *structpb.Struct {
	if x, ok := x.GetFieldValues().(*SearchResponse_Hit_FieldValue_StructValue); ok {
		return x.StructValue
	}
	return nil
}

func (x *SearchResponse_Hit_FieldValue) GetVectorValue() *SearchResponse_Hit_FieldValue_Vector {
	if x, ok := x.GetFieldValues().(*SearchResponse_Hit_FieldValue_VectorValue); ok {
		return x.VectorValue
	}
	return nil
}

type isSearchResponse_Hit_FieldValue_FieldValues interface {
	isSearchResponse_Hit_FieldValue_FieldValues()
}

type SearchResponse_Hit_FieldValue_TextValue struct {
	TextValue string `protobuf:"bytes,1,opt,name=textValue,proto3,oneof"` // Value for ATOM and TEXT  FieldType
}

type SearchResponse_Hit_FieldValue_BooleanValue struct {
	BooleanValue bool `protobuf:"varint,2,opt,name=booleanValue,proto3,oneof"` // Value for BOOLEAN FieldType
}

type SearchResponse_Hit_FieldValue_IntValue struct {
	IntValue int32 `protobuf:"varint,3,opt,name=intValue,proto3,oneof"` // Value for INT FieldType
}

type SearchResponse_Hit_FieldValue_LongValue struct {
	LongValue int64 `protobuf:"varint,4,opt,name=longValue,proto3,oneof"` // Value for LONG and DATE_TIME (as milliseconds since epoch in UTC zone) FieldType
}

type SearchResponse_Hit_FieldValue_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,5,opt,name=floatValue,proto3,oneof"` // Value for FLOAT FieldType
}

type SearchResponse_Hit_FieldValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,6,opt,name=doubleValue,proto3,oneof"` // Value for DOUBLE FieldType
}

type SearchResponse_Hit_FieldValue_LatLngValue struct {
	LatLngValue *latlng.LatLng `protobuf:"bytes,7,opt,name=latLngValue,proto3,oneof"` // Value for LAT_LON FieldType
}

type SearchResponse_Hit_FieldValue_StructValue struct {
	StructValue *structpb.Struct `protobuf:"bytes,8,opt,name=structValue,proto3,oneof"` // Value for structured data
}

type SearchResponse_Hit_FieldValue_VectorValue struct {
	// Value for VECTOR FieldType
	VectorValue *SearchResponse_Hit_FieldValue_Vector `protobuf:"bytes,9,opt,name=vectorValue,proto3,oneof"`
}

func (*SearchResponse_Hit_FieldValue_TextValue) isSearchResponse_Hit_FieldValue_FieldValues() {}

func (*SearchResponse_Hit_FieldValue_BooleanValue) isSearchResponse_Hit_FieldValue_FieldValues() {}

func (*SearchResponse_Hit_FieldValue_IntValue) isSearchResponse_Hit_FieldValue_FieldValues() {}

func (*SearchResponse_Hit_FieldValue_LongValue) isSearchResponse_Hit_FieldValue_FieldValues() {}

func (*SearchResponse_Hit_FieldValue_FloatValue) isSearchResponse_Hit_FieldValue_FieldValues() {}

func (*SearchResponse_Hit_FieldValue_DoubleValue) isSearchResponse_Hit_FieldValue_FieldValues() {}

func (*SearchResponse_Hit_FieldValue_LatLngValue) isSearchResponse_Hit_FieldValue_FieldValues() {}

func (*SearchResponse_Hit_FieldValue_StructValue) isSearchResponse_Hit_FieldValue_FieldValues() {}

func (*SearchResponse_Hit_FieldValue_VectorValue) isSearchResponse_Hit_FieldValue_FieldValues() {}

type SearchResponse_Hit_CompositeFieldValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldValue []*SearchResponse_Hit_FieldValue `protobuf:"bytes,3,rep,name=fieldValue,proto3" json:"fieldValue,omitempty"`
}

func (x *SearchResponse_Hit_CompositeFieldValue) Reset() {
	*x = SearchResponse_Hit_CompositeFieldValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse_Hit_CompositeFieldValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse_Hit_CompositeFieldValue) ProtoMessage() {}

func (x *SearchResponse_Hit_CompositeFieldValue) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse_Hit_CompositeFieldValue.ProtoReflect.Descriptor instead.
func (*SearchResponse_Hit_CompositeFieldValue) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{27, 1, 1}
}

func (x *SearchResponse_Hit_CompositeFieldValue) GetFieldValue() []*SearchResponse_Hit_FieldValue {
	if x != nil {
		return x.FieldValue
	}
	return nil
}

type SearchResponse_Hit_FieldValue_Vector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []float32 `protobuf:"fixed32,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *SearchResponse_Hit_FieldValue_Vector) Reset() {
	*x = SearchResponse_Hit_FieldValue_Vector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchResponse_Hit_FieldValue_Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse_Hit_FieldValue_Vector) ProtoMessage() {}

func (x *SearchResponse_Hit_FieldValue_Vector) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse_Hit_FieldValue_Vector.ProtoReflect.Descriptor instead.
func (*SearchResponse_Hit_FieldValue_Vector) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{27, 1, 0, 0}
}

func (x *SearchResponse_Hit_FieldValue_Vector) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

type ProfileResult_AdditionalCollectorStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sum of all collection time
	CollectTimeMs float64 `protobuf:"fixed64,1,opt,name=collectTimeMs,proto3" json:"collectTimeMs,omitempty"`
}

func (x *ProfileResult_AdditionalCollectorStats) Reset() {
	*x = ProfileResult_AdditionalCollectorStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileResult_AdditionalCollectorStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileResult_AdditionalCollectorStats) ProtoMessage() {}

func (x *ProfileResult_AdditionalCollectorStats) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileResult_AdditionalCollectorStats.ProtoReflect.Descriptor instead.
func (*ProfileResult_AdditionalCollectorStats) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{36, 0}
}

func (x *ProfileResult_AdditionalCollectorStats) GetCollectTimeMs() float64 {
	if x != nil {
		return x.CollectTimeMs
	}
	return 0
}

type ProfileResult_CollectorStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If collection for this index slice was terminated early, such as by a timeout.
	Terminated   bool                          `protobuf:"varint,1,opt,name=terminated,proto3" json:"terminated,omitempty"`
	SegmentStats []*ProfileResult_SegmentStats `protobuf:"bytes,2,rep,name=segmentStats,proto3" json:"segmentStats,omitempty"`
	// Total docs collected by this collector
	TotalCollectedCount int32 `protobuf:"varint,3,opt,name=totalCollectedCount,proto3" json:"totalCollectedCount,omitempty"`
	// Sum of all segment collection time
	TotalCollectTimeMs float64 `protobuf:"fixed64,4,opt,name=totalCollectTimeMs,proto3" json:"totalCollectTimeMs,omitempty"`
	// Stats for additional collection operations
	AdditionalCollectorStats map[string]*ProfileResult_AdditionalCollectorStats `protobuf:"bytes,5,rep,name=additionalCollectorStats,proto3" json:"additionalCollectorStats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ProfileResult_CollectorStats) Reset() {
	*x = ProfileResult_CollectorStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileResult_CollectorStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileResult_CollectorStats) ProtoMessage() {}

func (x *ProfileResult_CollectorStats) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileResult_CollectorStats.ProtoReflect.Descriptor instead.
func (*ProfileResult_CollectorStats) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{36, 1}
}

func (x *ProfileResult_CollectorStats) GetTerminated() bool {
	if x != nil {
		return x.Terminated
	}
	return false
}

func (x *ProfileResult_CollectorStats) GetSegmentStats() []*ProfileResult_SegmentStats {
	if x != nil {
		return x.SegmentStats
	}
	return nil
}

func (x *ProfileResult_CollectorStats) GetTotalCollectedCount() int32 {
	if x != nil {
		return x.TotalCollectedCount
	}
	return 0
}

func (x *ProfileResult_CollectorStats) GetTotalCollectTimeMs() float64 {
	if x != nil {
		return x.TotalCollectTimeMs
	}
	return 0
}

func (x *ProfileResult_CollectorStats) GetAdditionalCollectorStats() map[string]*ProfileResult_AdditionalCollectorStats {
	if x != nil {
		return x.AdditionalCollectorStats
	}
	return nil
}

type ProfileResult_SegmentStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total docs in segment
	MaxDoc int32 `protobuf:"varint,1,opt,name=maxDoc,proto3" json:"maxDoc,omitempty"`
	// Total live docs in segment
	NumDocs int32 `protobuf:"varint,2,opt,name=numDocs,proto3" json:"numDocs,omitempty"`
	// How many docs were collected
	CollectedCount int32 `protobuf:"varint,3,opt,name=collectedCount,proto3" json:"collectedCount,omitempty"`
	// Start time of segment processing in relation to the start of the search phase
	RelativeStartTimeMs float64 `protobuf:"fixed64,4,opt,name=relativeStartTimeMs,proto3" json:"relativeStartTimeMs,omitempty"`
	// Collection duration
	CollectTimeMs float64 `protobuf:"fixed64,5,opt,name=collectTimeMs,proto3" json:"collectTimeMs,omitempty"`
}

func (x *ProfileResult_SegmentStats) Reset() {
	*x = ProfileResult_SegmentStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileResult_SegmentStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileResult_SegmentStats) ProtoMessage() {}

func (x *ProfileResult_SegmentStats) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileResult_SegmentStats.ProtoReflect.Descriptor instead.
func (*ProfileResult_SegmentStats) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{36, 2}
}

func (x *ProfileResult_SegmentStats) GetMaxDoc() int32 {
	if x != nil {
		return x.MaxDoc
	}
	return 0
}

func (x *ProfileResult_SegmentStats) GetNumDocs() int32 {
	if x != nil {
		return x.NumDocs
	}
	return 0
}

func (x *ProfileResult_SegmentStats) GetCollectedCount() int32 {
	if x != nil {
		return x.CollectedCount
	}
	return 0
}

func (x *ProfileResult_SegmentStats) GetRelativeStartTimeMs() float64 {
	if x != nil {
		return x.RelativeStartTimeMs
	}
	return 0
}

func (x *ProfileResult_SegmentStats) GetCollectTimeMs() float64 {
	if x != nil {
		return x.CollectTimeMs
	}
	return 0
}

type ProfileResult_SearchStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total time for all document collection
	TotalCollectTimeMs float64 `protobuf:"fixed64,1,opt,name=totalCollectTimeMs,proto3" json:"totalCollectTimeMs,omitempty"`
	// Total time to reduce results from all parallel search slices
	TotalReduceTimeMs float64                         `protobuf:"fixed64,2,opt,name=totalReduceTimeMs,proto3" json:"totalReduceTimeMs,omitempty"`
	CollectorStats    []*ProfileResult_CollectorStats `protobuf:"bytes,3,rep,name=collectorStats,proto3" json:"collectorStats,omitempty"`
}

func (x *ProfileResult_SearchStats) Reset() {
	*x = ProfileResult_SearchStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfileResult_SearchStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfileResult_SearchStats) ProtoMessage() {}

func (x *ProfileResult_SearchStats) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfileResult_SearchStats.ProtoReflect.Descriptor instead.
func (*ProfileResult_SearchStats) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{36, 3}
}

func (x *ProfileResult_SearchStats) GetTotalCollectTimeMs() float64 {
	if x != nil {
		return x.TotalCollectTimeMs
	}
	return 0
}

func (x *ProfileResult_SearchStats) GetTotalReduceTimeMs() float64 {
	if x != nil {
		return x.TotalReduceTimeMs
	}
	return 0
}

func (x *ProfileResult_SearchStats) GetCollectorStats() []*ProfileResult_CollectorStats {
	if x != nil {
		return x.CollectorStats
	}
	return nil
}

type BucketResult_Bucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BucketResult_Bucket) Reset() {
	*x = BucketResult_Bucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_search_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketResult_Bucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketResult_Bucket) ProtoMessage() {}

func (x *BucketResult_Bucket) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_search_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketResult_Bucket.ProtoReflect.Descriptor instead.
func (*BucketResult_Bucket) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_search_proto_rawDescGZIP(), []int{41, 0}
}

func (x *BucketResult_Bucket) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *BucketResult_Bucket) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_yelp_nrtsearch_search_proto protoreflect.FileDescriptor

var file_yelp_nrtsearch_search_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x79, 0x65, 0x6c, 0x70, 0x2f, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x2f, 0x6c, 0x61, 0x74, 0x6c, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x79, 0x65, 0x6c, 0x70, 0x2f, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x01,
	0x0a, 0x0d, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x6f, 0x63,
	0x63, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x52, 0x05, 0x6f, 0x63,
	0x63, 0x75, 0x72, 0x22, 0x37, 0x0a, 0x05, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x55, 0x53, 0x54,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x4d, 0x55, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x10, 0x03, 0x22, 0x9b, 0x01, 0x0a,
	0x0b, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x61, 0x78, 0x45, 0x64, 0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x61, 0x78, 0x45, 0x64, 0x69, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d,
	0x6d, 0x61, 0x78, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x0c, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x07, 0x63,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x22, 0x4d,
	0x0a, 0x0b, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x22, 0x6d, 0x0a,
	0x12, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2c,
	0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x43, 0x0a, 0x13,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x22, 0xca, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x29, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x41, 0x0a, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x22, 0x39, 0x0a, 0x09, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x56,
	0x47, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03,
	0x4d, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x55, 0x4d, 0x10, 0x04, 0x22, 0xf8,
	0x01, 0x0a, 0x09, 0x54, 0x65, 0x72, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1e, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x20, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x54, 0x65, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xd2, 0x04, 0x0a, 0x0e, 0x54, 0x65,
	0x72, 0x6d, 0x49, 0x6e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x46, 0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x53, 0x65, 0x74, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x48, 0x00, 0x52,
	0x09, 0x74, 0x65, 0x78, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x69, 0x6e,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x49, 0x6e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x54, 0x65,
	0x72, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12,
	0x46, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x54, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x49,
	0x6e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x54,
	0x65, 0x72, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x72, 0x6d,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x53, 0x65, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x72, 0x6d,
	0x73, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x73,
	0x1a, 0x21, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65,
	0x72, 0x6d, 0x73, 0x1a, 0x20, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x65, 0x72, 0x6d, 0x73, 0x1a, 0x21, 0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67, 0x54, 0x65, 0x72,
	0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x1a, 0x22, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x1a, 0x23, 0x0a, 0x0b,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x65, 0x72, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d,
	0x73, 0x42, 0x0b, 0x0a, 0x09, 0x54, 0x65, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x7c,
	0x0a, 0x13, 0x44, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x09, 0x64,
	0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x69, 0x65, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x74, 0x69, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x22, 0x9e, 0x02, 0x0a,
	0x0a, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x3a, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x08,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72,
	0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x0b, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x86, 0x01,
	0x0a, 0x10, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c,
	0x6f, 0x70, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x08, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x22, 0xeb, 0x03, 0x0a, 0x0f, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x50, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x3a, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x32, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x0b, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x32, 0x0a, 0x14, 0x74, 0x69, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14,
	0x74, 0x69, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x1a, 0x3e, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x6f, 0x6f,
	0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e, 0x01, 0x0a, 0x0a, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6c,
	0x6f, 0x77, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x75, 0x70, 0x70, 0x65, 0x72, 0x45, 0x78, 0x63, 0x6c,
	0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x6f, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x4c, 0x65, 0x66, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x4c, 0x65,
	0x66, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x0b, 0x62, 0x6f,
	0x74, 0x74, 0x6f, 0x6d, 0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0x6b, 0x0a, 0x0e, 0x47, 0x65, 0x6f,
	0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x2b, 0x0a, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x50, 0x0a, 0x0d, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x29, 0x0a,
	0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6e,
	0x67, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x23, 0x0a, 0x0b, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xdc, 0x09,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x68, 0x72, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x68,
	0x72, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x12, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a,
	0x09, 0x74, 0x65, 0x72, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x54, 0x65, 0x72, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x72,
	0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x46, 0x0a, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x49, 0x6e,
	0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65,
	0x72, 0x6d, 0x49, 0x6e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e,
	0x74, 0x65, 0x72, 0x6d, 0x49, 0x6e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x55,
	0x0a, 0x13, 0x64, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x6a, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x13, 0x64, 0x69, 0x73, 0x6a, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x4c, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x49, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x0a, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x13, 0x67, 0x65, 0x6f, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x6f, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f,
	0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x13, 0x67, 0x65, 0x6f, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x43, 0x0a,
	0x0d, 0x67, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x0d, 0x67, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x46, 0x0a, 0x0e, 0x67, 0x65, 0x6f, 0x52, 0x61, 0x64, 0x69, 0x75, 0x73, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x6f, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0e, 0x67, 0x65, 0x6f, 0x52, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x13, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x13, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x0b, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0xcb, 0x08, 0x0a,
	0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x48, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6f, 0x70, 0x48,
	0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x6f, 0x70, 0x48, 0x69,
	0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0d, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f,
	0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x09, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x72,
	0x74, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x65, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x65, 0x6e, 0x12,
	0x1a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x08, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x48, 0x69, 0x74, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x69, 0x74, 0x73,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x61, 0x63,
	0x65, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x06,
	0x66, 0x61, 0x63, 0x65, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12,
	0x36, 0x0a, 0x16, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x34, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x73, 0x18, 0x12,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x45, 0x76, 0x65, 0x72, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x72, 0x79, 0x12,
	0x4b, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x15, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x56, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0a,
	0x0a, 0x08, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x0c, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb0, 0x07, 0x0a,
	0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0xba, 0x03,
	0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x09,
	0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0c,
	0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1e, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x20, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x6c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x49, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0xb9, 0x01, 0x0a, 0x10, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x49, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x5a, 0x0a, 0x0b, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x1a, 0x5a, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x20, 0x0a,
	0x0e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x00, 0x22,
	0x84, 0x01, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x44, 0x6f, 0x63, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x6f, 0x44, 0x6f, 0x63, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x4d, 0x61, 0x78, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x6f, 0x4d, 0x61, 0x78, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x48, 0x0a, 0x0a, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x22, 0xc3, 0x01, 0x0a, 0x08, 0x53, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x2b, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x09, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x48, 0x69, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x69, 0x74, 0x73, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x36, 0x0a, 0x08, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48,
	0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x10, 0x01,
	0x22, 0x41, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x22, 0xcd, 0x14, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x68, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x69, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x69, 0x74, 0x73, 0x52, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x69, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x68, 0x69, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x69, 0x74, 0x52, 0x04, 0x68, 0x69, 0x74, 0x73, 0x12,
	0x4a, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x66,
	0x61, 0x63, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x66, 0x61, 0x63,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x5e, 0x0a, 0x10, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x61, 0x72, 0x6c, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x61, 0x72, 0x6c, 0x79, 0x1a, 0xe9, 0x05, 0x0a, 0x0b, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x0e, 0x72,
	0x65, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x74,
	0x65, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x0e, 0x64, 0x72, 0x69, 0x6c, 0x6c,
	0x44, 0x6f, 0x77, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0e, 0x64, 0x72, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x15, 0x66, 0x69, 0x72, 0x73, 0x74, 0x50, 0x61, 0x73, 0x73, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x69, 0x67,
	0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x67, 0x65,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x3c, 0x0a,
	0x19, 0x6e, 0x65, 0x77, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x19, 0x6e, 0x65, 0x77, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x4d, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e,
	0x72, 0x74, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x6e, 0x72, 0x74, 0x57, 0x61, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x12, 0x5b, 0x0a, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x66, 0x61, 0x63, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x73, 0x12, 0x67, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x1a, 0x3e, 0x0a,
	0x10, 0x46, 0x61, 0x63, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x42, 0x0a,
	0x14, 0x52, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0xfd, 0x07, 0x0a, 0x03, 0x48, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x44, 0x6f, 0x63, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x44, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x12, 0x44, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x48, 0x69, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x69, 0x74, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a,
	0xd3, 0x03, 0x0a, 0x0a, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e,
	0x0a, 0x09, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24,
	0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x4c,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4c, 0x61, 0x74, 0x4c,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x61, 0x74, 0x4c, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x56,
	0x0a, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x48, 0x69, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1e, 0x0a, 0x06, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x62, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48,
	0x69, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x6f, 0x0a, 0x0b, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x75, 0x0a, 0x11, 0x53, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48,
	0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0xbb, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x44, 0x6f, 0x63, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x61,
	0x73, 0x74, 0x44, 0x6f, 0x63, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x1a,
	0x62, 0x0a, 0x15, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x63, 0x6c, 0x75,
	0x73, 0x69, 0x76, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x63,
	0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x76, 0x65, 0x22, 0xab, 0x02, 0x0a, 0x05, 0x46,
	0x61, 0x63, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x64, 0x69, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x42, 0x0a, 0x0c,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x73, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x73, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x6f, 0x70, 0x4e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4e,
	0x12, 0x2c, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x6f, 0x70, 0x44, 0x6f, 0x63, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x6f, 0x70,
	0x44, 0x6f, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x0b, 0x46, 0x61, 0x63,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x41, 0x6e,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x0d, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x50, 0x0a, 0x09, 0x46, 0x65, 0x74, 0x63, 0x68, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x55, 0x0a, 0x0e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x9a, 0x01,
	0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x12,
	0x37, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x72, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x08, 0x52,
	0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x63, 0x6f, 0x72,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x72, 0x73, 0x22, 0x81, 0x09, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x74, 0x65,
	0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65,
	0x77, 0x72, 0x69, 0x74, 0x74, 0x65, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x0e,
	0x64, 0x72, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x72, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x1a, 0x40, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x1a, 0xeb, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x18, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x18, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x1a, 0x81, 0x01, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x4a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xc0, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x63, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x13, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x4d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x1a, 0xbf, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x52, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x09, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x74, 0x65, 0x72, 0x6d, 0x73, 0x12, 0x49, 0x0a,
	0x0f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x0c, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x56, 0x0a, 0x0f, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x7b,
	0x0a, 0x0e, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x16, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x54, 0x65, 0x72, 0x6d, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x9d, 0x01, 0x0a, 0x0f,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x40, 0x0a, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x34, 0x0a, 0x09, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x0c,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x07,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x1a, 0x30, 0x0a, 0x06, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x25, 0x0a, 0x0d, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x55, 0x53, 0x54,
	0x10, 0x01, 0x2a, 0x96, 0x02, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4f,
	0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x43, 0x4f, 0x52,
	0x45, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x45, 0x52,
	0x4d, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x52,
	0x4d, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x05,
	0x12, 0x13, 0x0a, 0x0f, 0x44, 0x49, 0x53, 0x4a, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x41, 0x58, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x07,
	0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x50, 0x48, 0x52, 0x41, 0x53, 0x45,
	0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x0a, 0x12, 0x14,
	0x0a, 0x10, 0x47, 0x45, 0x4f, 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x42,
	0x4f, 0x58, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x45, 0x4f, 0x5f, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x53, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12,
	0x0a, 0x0a, 0x06, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x47,
	0x45, 0x4f, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x55, 0x53, 0x10, 0x0f, 0x2a, 0x3c, 0x0a, 0x08, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x49, 0x4e, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x58, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x49, 0x44,
	0x44, 0x4c, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x49, 0x44,
	0x44, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x03, 0x42, 0x58, 0x0a, 0x1e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x65, 0x6c, 0x70, 0x2e, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x42, 0x13, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x19, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x59,
	0x65, 0x6c, 0x70, 0x2f, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0xa2, 0x02, 0x03,
	0x48, 0x4c, 0x57, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yelp_nrtsearch_search_proto_rawDescOnce sync.Once
	file_yelp_nrtsearch_search_proto_rawDescData = file_yelp_nrtsearch_search_proto_rawDesc
)

func file_yelp_nrtsearch_search_proto_rawDescGZIP() []byte {
	file_yelp_nrtsearch_search_proto_rawDescOnce.Do(func() {
		file_yelp_nrtsearch_search_proto_rawDescData = protoimpl.X.CompressGZIP(file_yelp_nrtsearch_search_proto_rawDescData)
	})
	return file_yelp_nrtsearch_search_proto_rawDescData
}

var file_yelp_nrtsearch_search_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_yelp_nrtsearch_search_proto_msgTypes = make([]protoimpl.MessageInfo, 71)
var file_yelp_nrtsearch_search_proto_goTypes = []interface{}{
	(MatchOperator)(0),                    // 0: luceneserver.MatchOperator
	(QueryType)(0),                        // 1: luceneserver.QueryType
	(Selector)(0),                         // 2: luceneserver.Selector
	(BooleanClause_Occur)(0),              // 3: luceneserver.BooleanClause.Occur
	(NestedQuery_ScoreMode)(0),            // 4: luceneserver.NestedQuery.ScoreMode
	(Script_ParamNullValue)(0),            // 5: luceneserver.Script.ParamNullValue
	(TotalHits_Relation)(0),               // 6: luceneserver.TotalHits.Relation
	(*BooleanClause)(nil),                 // 7: luceneserver.BooleanClause
	(*FuzzyParams)(nil),                   // 8: luceneserver.FuzzyParams
	(*BooleanQuery)(nil),                  // 9: luceneserver.BooleanQuery
	(*PhraseQuery)(nil),                   // 10: luceneserver.PhraseQuery
	(*FunctionScoreQuery)(nil),            // 11: luceneserver.FunctionScoreQuery
	(*FunctionFilterQuery)(nil),           // 12: luceneserver.FunctionFilterQuery
	(*NestedQuery)(nil),                   // 13: luceneserver.NestedQuery
	(*TermQuery)(nil),                     // 14: luceneserver.TermQuery
	(*TermInSetQuery)(nil),                // 15: luceneserver.TermInSetQuery
	(*DisjunctionMaxQuery)(nil),           // 16: luceneserver.DisjunctionMaxQuery
	(*MatchQuery)(nil),                    // 17: luceneserver.MatchQuery
	(*MatchPhraseQuery)(nil),              // 18: luceneserver.MatchPhraseQuery
	(*MultiMatchQuery)(nil),               // 19: luceneserver.MultiMatchQuery
	(*RangeQuery)(nil),                    // 20: luceneserver.RangeQuery
	(*GeoBoundingBoxQuery)(nil),           // 21: luceneserver.GeoBoundingBoxQuery
	(*GeoRadiusQuery)(nil),                // 22: luceneserver.GeoRadiusQuery
	(*GeoPointQuery)(nil),                 // 23: luceneserver.GeoPointQuery
	(*ExistsQuery)(nil),                   // 24: luceneserver.ExistsQuery
	(*Query)(nil),                         // 25: luceneserver.Query
	(*SearchRequest)(nil),                 // 26: luceneserver.SearchRequest
	(*VirtualField)(nil),                  // 27: luceneserver.VirtualField
	(*Script)(nil),                        // 28: luceneserver.Script
	(*QuerySortField)(nil),                // 29: luceneserver.QuerySortField
	(*SortFields)(nil),                    // 30: luceneserver.SortFields
	(*SortType)(nil),                      // 31: luceneserver.SortType
	(*TotalHits)(nil),                     // 32: luceneserver.TotalHits
	(*Point)(nil),                         // 33: luceneserver.Point
	(*SearchResponse)(nil),                // 34: luceneserver.SearchResponse
	(*NumericRangeType)(nil),              // 35: luceneserver.NumericRangeType
	(*Facet)(nil),                         // 36: luceneserver.Facet
	(*FacetResult)(nil),                   // 37: luceneserver.FacetResult
	(*LabelAndValue)(nil),                 // 38: luceneserver.LabelAndValue
	(*FetchTask)(nil),                     // 39: luceneserver.FetchTask
	(*PluginRescorer)(nil),                // 40: luceneserver.PluginRescorer
	(*QueryRescorer)(nil),                 // 41: luceneserver.QueryRescorer
	(*Rescorer)(nil),                      // 42: luceneserver.Rescorer
	(*ProfileResult)(nil),                 // 43: luceneserver.ProfileResult
	(*Collector)(nil),                     // 44: luceneserver.Collector
	(*PluginCollector)(nil),               // 45: luceneserver.PluginCollector
	(*TermsCollector)(nil),                // 46: luceneserver.TermsCollector
	(*CollectorResult)(nil),               // 47: luceneserver.CollectorResult
	(*BucketResult)(nil),                  // 48: luceneserver.BucketResult
	(*TermInSetQuery_TextTerms)(nil),      // 49: luceneserver.TermInSetQuery.TextTerms
	(*TermInSetQuery_IntTerms)(nil),       // 50: luceneserver.TermInSetQuery.IntTerms
	(*TermInSetQuery_LongTerms)(nil),      // 51: luceneserver.TermInSetQuery.LongTerms
	(*TermInSetQuery_FloatTerms)(nil),     // 52: luceneserver.TermInSetQuery.FloatTerms
	(*TermInSetQuery_DoubleTerms)(nil),    // 53: luceneserver.TermInSetQuery.DoubleTerms
	nil,                                   // 54: luceneserver.MultiMatchQuery.FieldBoostsEntry
	nil,                                   // 55: luceneserver.SearchRequest.CollectorsEntry
	(*Script_ParamValue)(nil),             // 56: luceneserver.Script.ParamValue
	(*Script_ParamStructValue)(nil),       // 57: luceneserver.Script.ParamStructValue
	(*Script_ParamListValue)(nil),         // 58: luceneserver.Script.ParamListValue
	nil,                                   // 59: luceneserver.Script.ParamsEntry
	nil,                                   // 60: luceneserver.Script.ParamStructValue.FieldsEntry
	(*SearchResponse_Diagnostics)(nil),    // 61: luceneserver.SearchResponse.Diagnostics
	(*SearchResponse_Hit)(nil),            // 62: luceneserver.SearchResponse.Hit
	(*SearchResponse_SearchState)(nil),    // 63: luceneserver.SearchResponse.SearchState
	nil,                                   // 64: luceneserver.SearchResponse.CollectorResultsEntry
	nil,                                   // 65: luceneserver.SearchResponse.Diagnostics.FacetTimeMsEntry
	nil,                                   // 66: luceneserver.SearchResponse.Diagnostics.RescorersTimeMsEntry
	(*SearchResponse_Hit_FieldValue)(nil), // 67: luceneserver.SearchResponse.Hit.FieldValue
	(*SearchResponse_Hit_CompositeFieldValue)(nil), // 68: luceneserver.SearchResponse.Hit.CompositeFieldValue
	nil, // 69: luceneserver.SearchResponse.Hit.FieldsEntry
	nil, // 70: luceneserver.SearchResponse.Hit.SortedFieldsEntry
	(*SearchResponse_Hit_FieldValue_Vector)(nil),   // 71: luceneserver.SearchResponse.Hit.FieldValue.Vector
	(*ProfileResult_AdditionalCollectorStats)(nil), // 72: luceneserver.ProfileResult.AdditionalCollectorStats
	(*ProfileResult_CollectorStats)(nil),           // 73: luceneserver.ProfileResult.CollectorStats
	(*ProfileResult_SegmentStats)(nil),             // 74: luceneserver.ProfileResult.SegmentStats
	(*ProfileResult_SearchStats)(nil),              // 75: luceneserver.ProfileResult.SearchStats
	nil,                                            // 76: luceneserver.ProfileResult.CollectorStats.AdditionalCollectorStatsEntry
	(*BucketResult_Bucket)(nil),                    // 77: luceneserver.BucketResult.Bucket
	(*Analyzer)(nil),                               // 78: luceneserver.Analyzer
	(*latlng.LatLng)(nil),                          // 79: google.type.LatLng
	(*structpb.Struct)(nil),                        // 80: google.protobuf.Struct
	(*anypb.Any)(nil),                              // 81: google.protobuf.Any
}
var file_yelp_nrtsearch_search_proto_depIdxs = []int32{
	25,  // 0: luceneserver.BooleanClause.query:type_name -> luceneserver.Query
	3,   // 1: luceneserver.BooleanClause.occur:type_name -> luceneserver.BooleanClause.Occur
	7,   // 2: luceneserver.BooleanQuery.clauses:type_name -> luceneserver.BooleanClause
	25,  // 3: luceneserver.FunctionScoreQuery.query:type_name -> luceneserver.Query
	28,  // 4: luceneserver.FunctionScoreQuery.script:type_name -> luceneserver.Script
	28,  // 5: luceneserver.FunctionFilterQuery.script:type_name -> luceneserver.Script
	25,  // 6: luceneserver.NestedQuery.query:type_name -> luceneserver.Query
	4,   // 7: luceneserver.NestedQuery.scoreMode:type_name -> luceneserver.NestedQuery.ScoreMode
	49,  // 8: luceneserver.TermInSetQuery.textTerms:type_name -> luceneserver.TermInSetQuery.TextTerms
	50,  // 9: luceneserver.TermInSetQuery.intTerms:type_name -> luceneserver.TermInSetQuery.IntTerms
	51,  // 10: luceneserver.TermInSetQuery.longTerms:type_name -> luceneserver.TermInSetQuery.LongTerms
	52,  // 11: luceneserver.TermInSetQuery.floatTerms:type_name -> luceneserver.TermInSetQuery.FloatTerms
	53,  // 12: luceneserver.TermInSetQuery.doubleTerms:type_name -> luceneserver.TermInSetQuery.DoubleTerms
	25,  // 13: luceneserver.DisjunctionMaxQuery.disjuncts:type_name -> luceneserver.Query
	0,   // 14: luceneserver.MatchQuery.operator:type_name -> luceneserver.MatchOperator
	78,  // 15: luceneserver.MatchQuery.analyzer:type_name -> luceneserver.Analyzer
	8,   // 16: luceneserver.MatchQuery.fuzzyParams:type_name -> luceneserver.FuzzyParams
	78,  // 17: luceneserver.MatchPhraseQuery.analyzer:type_name -> luceneserver.Analyzer
	54,  // 18: luceneserver.MultiMatchQuery.fieldBoosts:type_name -> luceneserver.MultiMatchQuery.FieldBoostsEntry
	0,   // 19: luceneserver.MultiMatchQuery.operator:type_name -> luceneserver.MatchOperator
	78,  // 20: luceneserver.MultiMatchQuery.analyzer:type_name -> luceneserver.Analyzer
	8,   // 21: luceneserver.MultiMatchQuery.fuzzyParams:type_name -> luceneserver.FuzzyParams
	79,  // 22: luceneserver.GeoBoundingBoxQuery.topLeft:type_name -> google.type.LatLng
	79,  // 23: luceneserver.GeoBoundingBoxQuery.bottomRight:type_name -> google.type.LatLng
	79,  // 24: luceneserver.GeoRadiusQuery.center:type_name -> google.type.LatLng
	79,  // 25: luceneserver.GeoPointQuery.point:type_name -> google.type.LatLng
	1,   // 26: luceneserver.Query.queryType:type_name -> luceneserver.QueryType
	9,   // 27: luceneserver.Query.booleanQuery:type_name -> luceneserver.BooleanQuery
	10,  // 28: luceneserver.Query.phraseQuery:type_name -> luceneserver.PhraseQuery
	11,  // 29: luceneserver.Query.functionScoreQuery:type_name -> luceneserver.FunctionScoreQuery
	14,  // 30: luceneserver.Query.termQuery:type_name -> luceneserver.TermQuery
	15,  // 31: luceneserver.Query.termInSetQuery:type_name -> luceneserver.TermInSetQuery
	16,  // 32: luceneserver.Query.disjunctionMaxQuery:type_name -> luceneserver.DisjunctionMaxQuery
	17,  // 33: luceneserver.Query.matchQuery:type_name -> luceneserver.MatchQuery
	18,  // 34: luceneserver.Query.matchPhraseQuery:type_name -> luceneserver.MatchPhraseQuery
	19,  // 35: luceneserver.Query.multiMatchQuery:type_name -> luceneserver.MultiMatchQuery
	20,  // 36: luceneserver.Query.rangeQuery:type_name -> luceneserver.RangeQuery
	21,  // 37: luceneserver.Query.geoBoundingBoxQuery:type_name -> luceneserver.GeoBoundingBoxQuery
	23,  // 38: luceneserver.Query.geoPointQuery:type_name -> luceneserver.GeoPointQuery
	13,  // 39: luceneserver.Query.nestedQuery:type_name -> luceneserver.NestedQuery
	24,  // 40: luceneserver.Query.existsQuery:type_name -> luceneserver.ExistsQuery
	22,  // 41: luceneserver.Query.geoRadiusQuery:type_name -> luceneserver.GeoRadiusQuery
	12,  // 42: luceneserver.Query.functionFilterQuery:type_name -> luceneserver.FunctionFilterQuery
	27,  // 43: luceneserver.SearchRequest.virtualFields:type_name -> luceneserver.VirtualField
	25,  // 44: luceneserver.SearchRequest.query:type_name -> luceneserver.Query
	29,  // 45: luceneserver.SearchRequest.querySort:type_name -> luceneserver.QuerySortField
	36,  // 46: luceneserver.SearchRequest.facets:type_name -> luceneserver.Facet
	39,  // 47: luceneserver.SearchRequest.fetchTasks:type_name -> luceneserver.FetchTask
	42,  // 48: luceneserver.SearchRequest.rescorers:type_name -> luceneserver.Rescorer
	55,  // 49: luceneserver.SearchRequest.collectors:type_name -> luceneserver.SearchRequest.CollectorsEntry
	28,  // 50: luceneserver.VirtualField.script:type_name -> luceneserver.Script
	59,  // 51: luceneserver.Script.params:type_name -> luceneserver.Script.ParamsEntry
	30,  // 52: luceneserver.QuerySortField.fields:type_name -> luceneserver.SortFields
	31,  // 53: luceneserver.SortFields.sortedFields:type_name -> luceneserver.SortType
	2,   // 54: luceneserver.SortType.selector:type_name -> luceneserver.Selector
	33,  // 55: luceneserver.SortType.origin:type_name -> luceneserver.Point
	6,   // 56: luceneserver.TotalHits.relation:type_name -> luceneserver.TotalHits.Relation
	61,  // 57: luceneserver.SearchResponse.diagnostics:type_name -> luceneserver.SearchResponse.Diagnostics
	32,  // 58: luceneserver.SearchResponse.totalHits:type_name -> luceneserver.TotalHits
	62,  // 59: luceneserver.SearchResponse.hits:type_name -> luceneserver.SearchResponse.Hit
	63,  // 60: luceneserver.SearchResponse.searchState:type_name -> luceneserver.SearchResponse.SearchState
	37,  // 61: luceneserver.SearchResponse.facetResult:type_name -> luceneserver.FacetResult
	43,  // 62: luceneserver.SearchResponse.profileResult:type_name -> luceneserver.ProfileResult
	64,  // 63: luceneserver.SearchResponse.collectorResults:type_name -> luceneserver.SearchResponse.CollectorResultsEntry
	35,  // 64: luceneserver.Facet.numericRange:type_name -> luceneserver.NumericRangeType
	28,  // 65: luceneserver.Facet.script:type_name -> luceneserver.Script
	38,  // 66: luceneserver.FacetResult.labelValues:type_name -> luceneserver.LabelAndValue
	80,  // 67: luceneserver.FetchTask.params:type_name -> google.protobuf.Struct
	80,  // 68: luceneserver.PluginRescorer.params:type_name -> google.protobuf.Struct
	25,  // 69: luceneserver.QueryRescorer.rescoreQuery:type_name -> luceneserver.Query
	41,  // 70: luceneserver.Rescorer.queryRescorer:type_name -> luceneserver.QueryRescorer
	40,  // 71: luceneserver.Rescorer.pluginRescorer:type_name -> luceneserver.PluginRescorer
	75,  // 72: luceneserver.ProfileResult.searchStats:type_name -> luceneserver.ProfileResult.SearchStats
	46,  // 73: luceneserver.Collector.terms:type_name -> luceneserver.TermsCollector
	45,  // 74: luceneserver.Collector.pluginCollector:type_name -> luceneserver.PluginCollector
	80,  // 75: luceneserver.PluginCollector.params:type_name -> google.protobuf.Struct
	28,  // 76: luceneserver.TermsCollector.script:type_name -> luceneserver.Script
	48,  // 77: luceneserver.CollectorResult.bucketResult:type_name -> luceneserver.BucketResult
	81,  // 78: luceneserver.CollectorResult.anyResult:type_name -> google.protobuf.Any
	77,  // 79: luceneserver.BucketResult.buckets:type_name -> luceneserver.BucketResult.Bucket
	44,  // 80: luceneserver.SearchRequest.CollectorsEntry.value:type_name -> luceneserver.Collector
	5,   // 81: luceneserver.Script.ParamValue.nullValue:type_name -> luceneserver.Script.ParamNullValue
	58,  // 82: luceneserver.Script.ParamValue.listValue:type_name -> luceneserver.Script.ParamListValue
	57,  // 83: luceneserver.Script.ParamValue.structValue:type_name -> luceneserver.Script.ParamStructValue
	60,  // 84: luceneserver.Script.ParamStructValue.fields:type_name -> luceneserver.Script.ParamStructValue.FieldsEntry
	56,  // 85: luceneserver.Script.ParamListValue.values:type_name -> luceneserver.Script.ParamValue
	56,  // 86: luceneserver.Script.ParamsEntry.value:type_name -> luceneserver.Script.ParamValue
	56,  // 87: luceneserver.Script.ParamStructValue.FieldsEntry.value:type_name -> luceneserver.Script.ParamValue
	65,  // 88: luceneserver.SearchResponse.Diagnostics.facetTimeMs:type_name -> luceneserver.SearchResponse.Diagnostics.FacetTimeMsEntry
	66,  // 89: luceneserver.SearchResponse.Diagnostics.rescorersTimeMs:type_name -> luceneserver.SearchResponse.Diagnostics.RescorersTimeMsEntry
	69,  // 90: luceneserver.SearchResponse.Hit.fields:type_name -> luceneserver.SearchResponse.Hit.FieldsEntry
	70,  // 91: luceneserver.SearchResponse.Hit.sortedFields:type_name -> luceneserver.SearchResponse.Hit.SortedFieldsEntry
	47,  // 92: luceneserver.SearchResponse.CollectorResultsEntry.value:type_name -> luceneserver.CollectorResult
	79,  // 93: luceneserver.SearchResponse.Hit.FieldValue.latLngValue:type_name -> google.type.LatLng
	80,  // 94: luceneserver.SearchResponse.Hit.FieldValue.structValue:type_name -> google.protobuf.Struct
	71,  // 95: luceneserver.SearchResponse.Hit.FieldValue.vectorValue:type_name -> luceneserver.SearchResponse.Hit.FieldValue.Vector
	67,  // 96: luceneserver.SearchResponse.Hit.CompositeFieldValue.fieldValue:type_name -> luceneserver.SearchResponse.Hit.FieldValue
	68,  // 97: luceneserver.SearchResponse.Hit.FieldsEntry.value:type_name -> luceneserver.SearchResponse.Hit.CompositeFieldValue
	68,  // 98: luceneserver.SearchResponse.Hit.SortedFieldsEntry.value:type_name -> luceneserver.SearchResponse.Hit.CompositeFieldValue
	74,  // 99: luceneserver.ProfileResult.CollectorStats.segmentStats:type_name -> luceneserver.ProfileResult.SegmentStats
	76,  // 100: luceneserver.ProfileResult.CollectorStats.additionalCollectorStats:type_name -> luceneserver.ProfileResult.CollectorStats.AdditionalCollectorStatsEntry
	73,  // 101: luceneserver.ProfileResult.SearchStats.collectorStats:type_name -> luceneserver.ProfileResult.CollectorStats
	72,  // 102: luceneserver.ProfileResult.CollectorStats.AdditionalCollectorStatsEntry.value:type_name -> luceneserver.ProfileResult.AdditionalCollectorStats
	103, // [103:103] is the sub-list for method output_type
	103, // [103:103] is the sub-list for method input_type
	103, // [103:103] is the sub-list for extension type_name
	103, // [103:103] is the sub-list for extension extendee
	0,   // [0:103] is the sub-list for field type_name
}

func init() { file_yelp_nrtsearch_search_proto_init() }
func file_yelp_nrtsearch_search_proto_init() {
	if File_yelp_nrtsearch_search_proto != nil {
		return
	}
	file_yelp_nrtsearch_analysis_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yelp_nrtsearch_search_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanClause); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzyParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BooleanQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhraseQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionScoreQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionFilterQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NestedQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermInSetQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisjunctionMaxQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchPhraseQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiMatchQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoBoundingBoxQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoRadiusQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoPointQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VirtualField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Script); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySortField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TotalHits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumericRangeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Facet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacetResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabelAndValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginRescorer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRescorer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rescorer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Collector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginCollector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermsCollector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollectorResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermInSetQuery_TextTerms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermInSetQuery_IntTerms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermInSetQuery_LongTerms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermInSetQuery_FloatTerms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TermInSetQuery_DoubleTerms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Script_ParamValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Script_ParamStructValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Script_ParamListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse_Diagnostics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse_Hit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse_SearchState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse_Hit_FieldValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse_Hit_CompositeFieldValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchResponse_Hit_FieldValue_Vector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileResult_AdditionalCollectorStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileResult_CollectorStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileResult_SegmentStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfileResult_SearchStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_search_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketResult_Bucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yelp_nrtsearch_search_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*TermQuery_TextValue)(nil),
		(*TermQuery_IntValue)(nil),
		(*TermQuery_LongValue)(nil),
		(*TermQuery_FloatValue)(nil),
		(*TermQuery_DoubleValue)(nil),
		(*TermQuery_BooleanValue)(nil),
	}
	file_yelp_nrtsearch_search_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*TermInSetQuery_TextTerms_)(nil),
		(*TermInSetQuery_IntTerms_)(nil),
		(*TermInSetQuery_LongTerms_)(nil),
		(*TermInSetQuery_FloatTerms_)(nil),
		(*TermInSetQuery_DoubleTerms_)(nil),
	}
	file_yelp_nrtsearch_search_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*Query_BooleanQuery)(nil),
		(*Query_PhraseQuery)(nil),
		(*Query_FunctionScoreQuery)(nil),
		(*Query_TermQuery)(nil),
		(*Query_TermInSetQuery)(nil),
		(*Query_DisjunctionMaxQuery)(nil),
		(*Query_MatchQuery)(nil),
		(*Query_MatchPhraseQuery)(nil),
		(*Query_MultiMatchQuery)(nil),
		(*Query_RangeQuery)(nil),
		(*Query_GeoBoundingBoxQuery)(nil),
		(*Query_GeoPointQuery)(nil),
		(*Query_NestedQuery)(nil),
		(*Query_ExistsQuery)(nil),
		(*Query_GeoRadiusQuery)(nil),
		(*Query_FunctionFilterQuery)(nil),
	}
	file_yelp_nrtsearch_search_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*SearchRequest_IndexGen)(nil),
		(*SearchRequest_Version)(nil),
		(*SearchRequest_Snapshot)(nil),
	}
	file_yelp_nrtsearch_search_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*Rescorer_QueryRescorer)(nil),
		(*Rescorer_PluginRescorer)(nil),
	}
	file_yelp_nrtsearch_search_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*Collector_Terms)(nil),
		(*Collector_PluginCollector)(nil),
	}
	file_yelp_nrtsearch_search_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*TermsCollector_Field)(nil),
		(*TermsCollector_Script)(nil),
	}
	file_yelp_nrtsearch_search_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*CollectorResult_BucketResult)(nil),
		(*CollectorResult_AnyResult)(nil),
	}
	file_yelp_nrtsearch_search_proto_msgTypes[49].OneofWrappers = []interface{}{
		(*Script_ParamValue_TextValue)(nil),
		(*Script_ParamValue_BooleanValue)(nil),
		(*Script_ParamValue_IntValue)(nil),
		(*Script_ParamValue_LongValue)(nil),
		(*Script_ParamValue_FloatValue)(nil),
		(*Script_ParamValue_DoubleValue)(nil),
		(*Script_ParamValue_NullValue)(nil),
		(*Script_ParamValue_ListValue)(nil),
		(*Script_ParamValue_StructValue)(nil),
	}
	file_yelp_nrtsearch_search_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*SearchResponse_Hit_FieldValue_TextValue)(nil),
		(*SearchResponse_Hit_FieldValue_BooleanValue)(nil),
		(*SearchResponse_Hit_FieldValue_IntValue)(nil),
		(*SearchResponse_Hit_FieldValue_LongValue)(nil),
		(*SearchResponse_Hit_FieldValue_FloatValue)(nil),
		(*SearchResponse_Hit_FieldValue_DoubleValue)(nil),
		(*SearchResponse_Hit_FieldValue_LatLngValue)(nil),
		(*SearchResponse_Hit_FieldValue_StructValue)(nil),
		(*SearchResponse_Hit_FieldValue_VectorValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yelp_nrtsearch_search_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   71,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yelp_nrtsearch_search_proto_goTypes,
		DependencyIndexes: file_yelp_nrtsearch_search_proto_depIdxs,
		EnumInfos:         file_yelp_nrtsearch_search_proto_enumTypes,
		MessageInfos:      file_yelp_nrtsearch_search_proto_msgTypes,
	}.Build()
	File_yelp_nrtsearch_search_proto = out.File
	file_yelp_nrtsearch_search_proto_rawDesc = nil
	file_yelp_nrtsearch_search_proto_goTypes = nil
	file_yelp_nrtsearch_search_proto_depIdxs = nil
}
