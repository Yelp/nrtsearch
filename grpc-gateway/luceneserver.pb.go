// Description of NRTSearch Service APIs and message types

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.24.3
// source: yelp/nrtsearch/luceneserver.proto

package nrtsearch

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of a Field
type FieldType int32

const (
	// Text that's indexed as a single token, with DOCS_ONLY and omitting norms
	FieldType_ATOM FieldType = 0
	// Text that's tokenized and indexed, with the index-time analyzer
	FieldType_TEXT FieldType = 1
	// Boolean value
	FieldType_BOOLEAN FieldType = 2
	// Long value
	FieldType_LONG FieldType = 3
	// Int value
	FieldType_INT FieldType = 4
	// Double value
	FieldType_DOUBLE FieldType = 5
	// Float value
	FieldType_FLOAT FieldType = 6
	// A latitude/longitude point
	FieldType_LAT_LON FieldType = 7
	// Date and optional time
	FieldType_DATE_TIME FieldType = 8
	// Virtual field defined with a Script
	FieldType_VIRTUAL FieldType = 9
	// Internal field, not currently used
	FieldType_INTERNAL FieldType = 10
	// Field type specified by name
	FieldType_CUSTOM FieldType = 11
	// Field type for document ID
	FieldType__ID FieldType = 12
	// Geojson defined polygon
	FieldType_POLYGON FieldType = 13
	// Json object with child fields for each key
	FieldType_OBJECT FieldType = 14
	// List of float values
	FieldType_VECTOR FieldType = 15
	// Field used for contextual suggest fields
	FieldType_CONTEXT_SUGGEST FieldType = 16
	// Runtime fields
	FieldType_RUNTIME FieldType = 17
)

// Enum value maps for FieldType.
var (
	FieldType_name = map[int32]string{
		0:  "ATOM",
		1:  "TEXT",
		2:  "BOOLEAN",
		3:  "LONG",
		4:  "INT",
		5:  "DOUBLE",
		6:  "FLOAT",
		7:  "LAT_LON",
		8:  "DATE_TIME",
		9:  "VIRTUAL",
		10: "INTERNAL",
		11: "CUSTOM",
		12: "_ID",
		13: "POLYGON",
		14: "OBJECT",
		15: "VECTOR",
		16: "CONTEXT_SUGGEST",
		17: "RUNTIME",
	}
	FieldType_value = map[string]int32{
		"ATOM":            0,
		"TEXT":            1,
		"BOOLEAN":         2,
		"LONG":            3,
		"INT":             4,
		"DOUBLE":          5,
		"FLOAT":           6,
		"LAT_LON":         7,
		"DATE_TIME":       8,
		"VIRTUAL":         9,
		"INTERNAL":        10,
		"CUSTOM":          11,
		"_ID":             12,
		"POLYGON":         13,
		"OBJECT":          14,
		"VECTOR":          15,
		"CONTEXT_SUGGEST": 16,
		"RUNTIME":         17,
	}
)

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}

func (x FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[0].Descriptor()
}

func (FieldType) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[0]
}

func (x FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldType.Descriptor instead.
func (FieldType) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{0}
}

// How text tokens should be indexed
type IndexOptions int32

const (
	// Use field default index options: ATOM=DOCS, TEXT=DOCS_FREQS_POSITIONS
	IndexOptions_DEFAULT IndexOptions = 0
	// Index only doc ids
	IndexOptions_DOCS IndexOptions = 1
	// Index doc ids and term frequencies
	IndexOptions_DOCS_FREQS IndexOptions = 2
	// Index doc ids, term frequencies and positions
	IndexOptions_DOCS_FREQS_POSITIONS IndexOptions = 3
	// Index doc ids, term frequencies, positions and offsets
	IndexOptions_DOCS_FREQS_POSITIONS_OFFSETS IndexOptions = 4
)

// Enum value maps for IndexOptions.
var (
	IndexOptions_name = map[int32]string{
		0: "DEFAULT",
		1: "DOCS",
		2: "DOCS_FREQS",
		3: "DOCS_FREQS_POSITIONS",
		4: "DOCS_FREQS_POSITIONS_OFFSETS",
	}
	IndexOptions_value = map[string]int32{
		"DEFAULT":                      0,
		"DOCS":                         1,
		"DOCS_FREQS":                   2,
		"DOCS_FREQS_POSITIONS":         3,
		"DOCS_FREQS_POSITIONS_OFFSETS": 4,
	}
)

func (x IndexOptions) Enum() *IndexOptions {
	p := new(IndexOptions)
	*p = x
	return p
}

func (x IndexOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[1].Descriptor()
}

func (IndexOptions) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[1]
}

func (x IndexOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexOptions.Descriptor instead.
func (IndexOptions) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{1}
}

// Whether/how term vectors should be indexed
type TermVectors int32

const (
	// No term vectors are indexed
	TermVectors_NO_TERMVECTORS TermVectors = 0
	// Index terms only
	TermVectors_TERMS TermVectors = 1
	// Index terms and positions
	TermVectors_TERMS_POSITIONS TermVectors = 2
	// Index terms, positions and offsets
	TermVectors_TERMS_POSITIONS_OFFSETS TermVectors = 3
	// Index terms, positions, offsets and payloads
	TermVectors_TERMS_POSITIONS_OFFSETS_PAYLOADS TermVectors = 4
)

// Enum value maps for TermVectors.
var (
	TermVectors_name = map[int32]string{
		0: "NO_TERMVECTORS",
		1: "TERMS",
		2: "TERMS_POSITIONS",
		3: "TERMS_POSITIONS_OFFSETS",
		4: "TERMS_POSITIONS_OFFSETS_PAYLOADS",
	}
	TermVectors_value = map[string]int32{
		"NO_TERMVECTORS":                   0,
		"TERMS":                            1,
		"TERMS_POSITIONS":                  2,
		"TERMS_POSITIONS_OFFSETS":          3,
		"TERMS_POSITIONS_OFFSETS_PAYLOADS": 4,
	}
)

func (x TermVectors) Enum() *TermVectors {
	p := new(TermVectors)
	*p = x
	return p
}

func (x TermVectors) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TermVectors) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[2].Descriptor()
}

func (TermVectors) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[2]
}

func (x TermVectors) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TermVectors.Descriptor instead.
func (TermVectors) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{2}
}

// Whether/how facets should be indexed
type FacetType int32

const (
	// No facets are indexed
	FacetType_NO_FACETS FacetType = 0
	// Facets are indexed with no hierarchy
	FacetType_FLAT FacetType = 1
	// Facets are indexed and are hierarchical
	FacetType_HIERARCHY FacetType = 2
	// Compute facet counts for custom numeric ranges
	FacetType_NUMERIC_RANGE FacetType = 3
	// Uses SortedSetDocValuesFacetCounts, which must be flat but don't require a taxonomy index
	FacetType_SORTED_SET_DOC_VALUES FacetType = 4
)

// Enum value maps for FacetType.
var (
	FacetType_name = map[int32]string{
		0: "NO_FACETS",
		1: "FLAT",
		2: "HIERARCHY",
		3: "NUMERIC_RANGE",
		4: "SORTED_SET_DOC_VALUES",
	}
	FacetType_value = map[string]int32{
		"NO_FACETS":             0,
		"FLAT":                  1,
		"HIERARCHY":             2,
		"NUMERIC_RANGE":         3,
		"SORTED_SET_DOC_VALUES": 4,
	}
)

func (x FacetType) Enum() *FacetType {
	p := new(FacetType)
	*p = x
	return p
}

func (x FacetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FacetType) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[3].Descriptor()
}

func (FacetType) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[3]
}

func (x FacetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FacetType.Descriptor instead.
func (FacetType) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{3}
}

// Type of doc values to use for storing text values
type TextDocValuesType int32

const (
	// Unspecified doc values type, use field default
	TextDocValuesType_TEXT_DOC_VALUES_TYPE_UNSPECIFIED TextDocValuesType = 0
	// Binary doc values support text longer than 32766 bytes and are good when most values are unique or
	// you don't need to use sorting/aggregations on the field.
	TextDocValuesType_TEXT_DOC_VALUES_TYPE_BINARY TextDocValuesType = 1
	// Sorted doc values only store values shorter than 32766 bytes and are better when many values are not unique.
	TextDocValuesType_TEXT_DOC_VALUES_TYPE_SORTED TextDocValuesType = 2
)

// Enum value maps for TextDocValuesType.
var (
	TextDocValuesType_name = map[int32]string{
		0: "TEXT_DOC_VALUES_TYPE_UNSPECIFIED",
		1: "TEXT_DOC_VALUES_TYPE_BINARY",
		2: "TEXT_DOC_VALUES_TYPE_SORTED",
	}
	TextDocValuesType_value = map[string]int32{
		"TEXT_DOC_VALUES_TYPE_UNSPECIFIED": 0,
		"TEXT_DOC_VALUES_TYPE_BINARY":      1,
		"TEXT_DOC_VALUES_TYPE_SORTED":      2,
	}
)

func (x TextDocValuesType) Enum() *TextDocValuesType {
	p := new(TextDocValuesType)
	*p = x
	return p
}

func (x TextDocValuesType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextDocValuesType) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[4].Descriptor()
}

func (TextDocValuesType) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[4]
}

func (x TextDocValuesType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextDocValuesType.Descriptor instead.
func (TextDocValuesType) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{4}
}

// Vector field element type
type VectorElementType int32

const (
	// Single precision floating point
	VectorElementType_VECTOR_ELEMENT_FLOAT VectorElementType = 0
	// Signed byte
	VectorElementType_VECTOR_ELEMENT_BYTE VectorElementType = 1
)

// Enum value maps for VectorElementType.
var (
	VectorElementType_name = map[int32]string{
		0: "VECTOR_ELEMENT_FLOAT",
		1: "VECTOR_ELEMENT_BYTE",
	}
	VectorElementType_value = map[string]int32{
		"VECTOR_ELEMENT_FLOAT": 0,
		"VECTOR_ELEMENT_BYTE":  1,
	}
)

func (x VectorElementType) Enum() *VectorElementType {
	p := new(VectorElementType)
	*p = x
	return p
}

func (x VectorElementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VectorElementType) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[5].Descriptor()
}

func (VectorElementType) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[5]
}

func (x VectorElementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VectorElementType.Descriptor instead.
func (VectorElementType) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{5}
}

// Index start mode
type Mode int32

const (
	// Standalone index with no replication
	Mode_STANDALONE Mode = 0
	// Primary index in an nrt cluster setup
	Mode_PRIMARY Mode = 1
	// Replica index in an nrt cluster setup
	Mode_REPLICA Mode = 2
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "STANDALONE",
		1: "PRIMARY",
		2: "REPLICA",
	}
	Mode_value = map[string]int32{
		"STANDALONE": 0,
		"PRIMARY":    1,
		"REPLICA":    2,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[6].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[6]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{6}
}

// Status of file copy
type TransferStatusCode int32

const (
	TransferStatusCode_Unknown TransferStatusCode = 0
	TransferStatusCode_Done    TransferStatusCode = 1
	TransferStatusCode_Failed  TransferStatusCode = 2
	TransferStatusCode_Ongoing TransferStatusCode = 3
)

// Enum value maps for TransferStatusCode.
var (
	TransferStatusCode_name = map[int32]string{
		0: "Unknown",
		1: "Done",
		2: "Failed",
		3: "Ongoing",
	}
	TransferStatusCode_value = map[string]int32{
		"Unknown": 0,
		"Done":    1,
		"Failed":  2,
		"Ongoing": 3,
	}
)

func (x TransferStatusCode) Enum() *TransferStatusCode {
	p := new(TransferStatusCode)
	*p = x
	return p
}

func (x TransferStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[7].Descriptor()
}

func (TransferStatusCode) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[7]
}

func (x TransferStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferStatusCode.Descriptor instead.
func (TransferStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{7}
}

// Status of force merge
type ForceMergeResponse_Status int32

const (
	ForceMergeResponse_FORCE_MERGE_COMPLETED ForceMergeResponse_Status = 0
	ForceMergeResponse_FORCE_MERGE_SUBMITTED ForceMergeResponse_Status = 1
)

// Enum value maps for ForceMergeResponse_Status.
var (
	ForceMergeResponse_Status_name = map[int32]string{
		0: "FORCE_MERGE_COMPLETED",
		1: "FORCE_MERGE_SUBMITTED",
	}
	ForceMergeResponse_Status_value = map[string]int32{
		"FORCE_MERGE_COMPLETED": 0,
		"FORCE_MERGE_SUBMITTED": 1,
	}
)

func (x ForceMergeResponse_Status) Enum() *ForceMergeResponse_Status {
	p := new(ForceMergeResponse_Status)
	*p = x
	return p
}

func (x ForceMergeResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForceMergeResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[8].Descriptor()
}

func (ForceMergeResponse_Status) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[8]
}

func (x ForceMergeResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForceMergeResponse_Status.Descriptor instead.
func (ForceMergeResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{78, 0}
}

// Status of force merge deletes
type ForceMergeDeletesResponse_Status int32

const (
	ForceMergeDeletesResponse_FORCE_MERGE_DELETES_COMPLETED ForceMergeDeletesResponse_Status = 0
	ForceMergeDeletesResponse_FORCE_MERGE_DELETES_SUBMITTED ForceMergeDeletesResponse_Status = 1
)

// Enum value maps for ForceMergeDeletesResponse_Status.
var (
	ForceMergeDeletesResponse_Status_name = map[int32]string{
		0: "FORCE_MERGE_DELETES_COMPLETED",
		1: "FORCE_MERGE_DELETES_SUBMITTED",
	}
	ForceMergeDeletesResponse_Status_value = map[string]int32{
		"FORCE_MERGE_DELETES_COMPLETED": 0,
		"FORCE_MERGE_DELETES_SUBMITTED": 1,
	}
)

func (x ForceMergeDeletesResponse_Status) Enum() *ForceMergeDeletesResponse_Status {
	p := new(ForceMergeDeletesResponse_Status)
	*p = x
	return p
}

func (x ForceMergeDeletesResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForceMergeDeletesResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[9].Descriptor()
}

func (ForceMergeDeletesResponse_Status) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[9]
}

func (x ForceMergeDeletesResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForceMergeDeletesResponse_Status.Descriptor instead.
func (ForceMergeDeletesResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{80, 0}
}

// Input to createIndex
type CreateIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the index to be created. [a-zA-Z0-9_-]+
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// Set if state/data already exists in the data backend. Provides the yyyyMMddHHmmssSSS formatted date-time
	// string to identify and load the index data.
	ExistsWithId string `protobuf:"bytes,2,opt,name=existsWithId,proto3" json:"existsWithId,omitempty"`
	// Optional initial index settings
	Settings *IndexSettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
	// Optional initial index live settings
	LiveSettings *IndexLiveSettings `protobuf:"bytes,4,opt,name=liveSettings,proto3" json:"liveSettings,omitempty"`
	// Optional initial index fields
	Fields []*Field `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	// If this index should also be started, using IndexStartConfig configuration
	Start bool `protobuf:"varint,6,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *CreateIndexRequest) Reset() {
	*x = CreateIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIndexRequest) ProtoMessage() {}

func (x *CreateIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIndexRequest.ProtoReflect.Descriptor instead.
func (*CreateIndexRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{0}
}

func (x *CreateIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *CreateIndexRequest) GetExistsWithId() string {
	if x != nil {
		return x.ExistsWithId
	}
	return ""
}

func (x *CreateIndexRequest) GetSettings() *IndexSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CreateIndexRequest) GetLiveSettings() *IndexLiveSettings {
	if x != nil {
		return x.LiveSettings
	}
	return nil
}

func (x *CreateIndexRequest) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CreateIndexRequest) GetStart() bool {
	if x != nil {
		return x.Start
	}
	return false
}

// Response from Server to createIndex
type CreateIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Message confirming creation of the index
	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *CreateIndexResponse) Reset() {
	*x = CreateIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIndexResponse) ProtoMessage() {}

func (x *CreateIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIndexResponse.ProtoReflect.Descriptor instead.
func (*CreateIndexResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{1}
}

func (x *CreateIndexResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Input to liveSettings
type LiveSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of index whose liveSettings are to be updated
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// Longest time to wait before reopening IndexSearcher (i.e., periodic background reopen)
	MaxRefreshSec float64 `protobuf:"fixed64,2,opt,name=maxRefreshSec,proto3" json:"maxRefreshSec,omitempty"`
	// Shortest time to wait before reopening IndexSearcher (i.e., when a search is waiting for a specific indexGen)
	MinRefreshSec float64 `protobuf:"fixed64,3,opt,name=minRefreshSec,proto3" json:"minRefreshSec,omitempty"`
	// Non-current searchers older than this are pruned
	MaxSearcherAgeSec float64 `protobuf:"fixed64,4,opt,name=maxSearcherAgeSec,proto3" json:"maxSearcherAgeSec,omitempty"`
	// Size (in MB) of IndexWriter's RAM buffer
	IndexRamBufferSizeMB float64 `protobuf:"fixed64,5,opt,name=indexRamBufferSizeMB,proto3" json:"indexRamBufferSizeMB,omitempty"`
	// Max number of documents to add at a time
	AddDocumentsMaxBufferLen int32 `protobuf:"varint,6,opt,name=addDocumentsMaxBufferLen,proto3" json:"addDocumentsMaxBufferLen,omitempty"`
	// Maximum number of documents allowed in a parallel search slice
	SliceMaxDocs int32 `protobuf:"varint,7,opt,name=sliceMaxDocs,proto3" json:"sliceMaxDocs,omitempty"`
	// Maximum number of segments allowed in a parallel search slice
	SliceMaxSegments int32 `protobuf:"varint,8,opt,name=sliceMaxSegments,proto3" json:"sliceMaxSegments,omitempty"`
	// Number of virtual shards to use for this index
	VirtualShards int32 `protobuf:"varint,9,opt,name=virtualShards,proto3" json:"virtualShards,omitempty"`
	// Maximum sized segment to produce during normal merging
	MaxMergedSegmentMB int32 `protobuf:"varint,10,opt,name=maxMergedSegmentMB,proto3" json:"maxMergedSegmentMB,omitempty"`
	// Number of segments per tier used by TieredMergePolicy
	SegmentsPerTier int32 `protobuf:"varint,11,opt,name=segmentsPerTier,proto3" json:"segmentsPerTier,omitempty"`
	// Timeout value to used when not specified in the search request
	DefaultSearchTimeoutSec float64 `protobuf:"fixed64,12,opt,name=defaultSearchTimeoutSec,proto3" json:"defaultSearchTimeoutSec,omitempty"`
	// Timeout check every value to use when not specified in the search request
	DefaultSearchTimeoutCheckEvery int32 `protobuf:"varint,13,opt,name=defaultSearchTimeoutCheckEvery,proto3" json:"defaultSearchTimeoutCheckEvery,omitempty"`
	// Terminate after value to use when not specified in the search request
	DefaultTerminateAfter int32 `protobuf:"varint,14,opt,name=defaultTerminateAfter,proto3" json:"defaultTerminateAfter,omitempty"`
}

func (x *LiveSettingsRequest) Reset() {
	*x = LiveSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveSettingsRequest) ProtoMessage() {}

func (x *LiveSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveSettingsRequest.ProtoReflect.Descriptor instead.
func (*LiveSettingsRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{2}
}

func (x *LiveSettingsRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *LiveSettingsRequest) GetMaxRefreshSec() float64 {
	if x != nil {
		return x.MaxRefreshSec
	}
	return 0
}

func (x *LiveSettingsRequest) GetMinRefreshSec() float64 {
	if x != nil {
		return x.MinRefreshSec
	}
	return 0
}

func (x *LiveSettingsRequest) GetMaxSearcherAgeSec() float64 {
	if x != nil {
		return x.MaxSearcherAgeSec
	}
	return 0
}

func (x *LiveSettingsRequest) GetIndexRamBufferSizeMB() float64 {
	if x != nil {
		return x.IndexRamBufferSizeMB
	}
	return 0
}

func (x *LiveSettingsRequest) GetAddDocumentsMaxBufferLen() int32 {
	if x != nil {
		return x.AddDocumentsMaxBufferLen
	}
	return 0
}

func (x *LiveSettingsRequest) GetSliceMaxDocs() int32 {
	if x != nil {
		return x.SliceMaxDocs
	}
	return 0
}

func (x *LiveSettingsRequest) GetSliceMaxSegments() int32 {
	if x != nil {
		return x.SliceMaxSegments
	}
	return 0
}

func (x *LiveSettingsRequest) GetVirtualShards() int32 {
	if x != nil {
		return x.VirtualShards
	}
	return 0
}

func (x *LiveSettingsRequest) GetMaxMergedSegmentMB() int32 {
	if x != nil {
		return x.MaxMergedSegmentMB
	}
	return 0
}

func (x *LiveSettingsRequest) GetSegmentsPerTier() int32 {
	if x != nil {
		return x.SegmentsPerTier
	}
	return 0
}

func (x *LiveSettingsRequest) GetDefaultSearchTimeoutSec() float64 {
	if x != nil {
		return x.DefaultSearchTimeoutSec
	}
	return 0
}

func (x *LiveSettingsRequest) GetDefaultSearchTimeoutCheckEvery() int32 {
	if x != nil {
		return x.DefaultSearchTimeoutCheckEvery
	}
	return 0
}

func (x *LiveSettingsRequest) GetDefaultTerminateAfter() int32 {
	if x != nil {
		return x.DefaultTerminateAfter
	}
	return 0
}

// Response from Server to liveSettings
type LiveSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Json string of updated IndexLiveSettings
	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *LiveSettingsResponse) Reset() {
	*x = LiveSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveSettingsResponse) ProtoMessage() {}

func (x *LiveSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveSettingsResponse.ProtoReflect.Descriptor instead.
func (*LiveSettingsResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{3}
}

func (x *LiveSettingsResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Input to liveSettingsV2
type LiveSettingsV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of index whose liveSettings are to be updated
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// Live settings to merge into existing live settings, or unset to get current live settings
	LiveSettings *IndexLiveSettings `protobuf:"bytes,2,opt,name=liveSettings,proto3" json:"liveSettings,omitempty"`
	// When set to true, live settings changes are only applied to the local node. These changes are ephemeral,
	// so will not persist through a restart. Also, the live settings returned in the response will contain the
	// local overrides only when this flag is true.
	Local bool `protobuf:"varint,3,opt,name=local,proto3" json:"local,omitempty"`
}

func (x *LiveSettingsV2Request) Reset() {
	*x = LiveSettingsV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveSettingsV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveSettingsV2Request) ProtoMessage() {}

func (x *LiveSettingsV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveSettingsV2Request.ProtoReflect.Descriptor instead.
func (*LiveSettingsV2Request) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{4}
}

func (x *LiveSettingsV2Request) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *LiveSettingsV2Request) GetLiveSettings() *IndexLiveSettings {
	if x != nil {
		return x.LiveSettings
	}
	return nil
}

func (x *LiveSettingsV2Request) GetLocal() bool {
	if x != nil {
		return x.Local
	}
	return false
}

// Response from Server to liveSettingsV2
type LiveSettingsV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current live settings, including default values
	LiveSettings *IndexLiveSettings `protobuf:"bytes,1,opt,name=liveSettings,proto3" json:"liveSettings,omitempty"`
}

func (x *LiveSettingsV2Response) Reset() {
	*x = LiveSettingsV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveSettingsV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveSettingsV2Response) ProtoMessage() {}

func (x *LiveSettingsV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveSettingsV2Response.ProtoReflect.Descriptor instead.
func (*LiveSettingsV2Response) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{5}
}

func (x *LiveSettingsV2Response) GetLiveSettings() *IndexLiveSettings {
	if x != nil {
		return x.LiveSettings
	}
	return nil
}

// Definition of a field in an index
type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the field
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of the field
	Type FieldType `protobuf:"varint,2,opt,name=type,proto3,enum=luceneserver.FieldType" json:"type,omitempty"`
	// True if the value should be available for searching (or numeric range searching, for a numeric fields)
	Search bool `protobuf:"varint,3,opt,name=search,proto3" json:"search,omitempty"`
	// True if the value should be stored in the index
	Store bool `protobuf:"varint,4,opt,name=store,proto3" json:"store,omitempty"`
	// True if the value should be indexed into doc values
	StoreDocValues bool `protobuf:"varint,5,opt,name=storeDocValues,proto3" json:"storeDocValues,omitempty"`
	// No longer used
	//
	// Deprecated: Do not use.
	Sort bool `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`
	// No longer used
	//
	// Deprecated: Do not use.
	Tokenize bool `protobuf:"varint,7,opt,name=tokenize,proto3" json:"tokenize,omitempty"`
	// No longer used
	//
	// Deprecated: Do not use.
	Group bool `protobuf:"varint,8,opt,name=group,proto3" json:"group,omitempty"`
	// True if this field may have more than one value
	MultiValued bool `protobuf:"varint,9,opt,name=multiValued,proto3" json:"multiValued,omitempty"`
	// No longer used
	//
	// Deprecated: Do not use.
	Highlight bool `protobuf:"varint,10,opt,name=highlight,proto3" json:"highlight,omitempty"`
	// True if norms are omitted for text fields
	OmitNorms bool `protobuf:"varint,11,opt,name=omitNorms,proto3" json:"omitNorms,omitempty"`
	// Format string used to parse datetime fields, supported values are:
	//  1. DateTimeFormatter format
	//  2. "epoch_millis" (datetime value is epoch timestamp)
	//  3. "strict_date_optional_time" (date with optional time in pattern of "yyyy-MM-dd['T'HH:mm:ss[.SSS]]")
	DateTimeFormat string `protobuf:"bytes,12,opt,name=dateTimeFormat,proto3" json:"dateTimeFormat,omitempty"`
	// Which PostingsFormat should be used to index this field, defaults to Lucene codec default
	PostingsFormat string `protobuf:"bytes,13,opt,name=postingsFormat,proto3" json:"postingsFormat,omitempty"`
	// Which DocValuesFormat should be used to index this field, defaults to Lucene codec default
	DocValuesFormat string `protobuf:"bytes,14,opt,name=docValuesFormat,proto3" json:"docValuesFormat,omitempty"`
	// How the tokens should be indexed for text fields
	IndexOptions IndexOptions `protobuf:"varint,15,opt,name=indexOptions,proto3,enum=luceneserver.IndexOptions" json:"indexOptions,omitempty"`
	// The script definition defining a virtual field's value (only used with type=virtual)
	Script *Script `protobuf:"bytes,16,opt,name=script,proto3" json:"script,omitempty"`
	// Analyzer to use for this field during indexing and searching, defaults to Lucene standard analyzer
	Analyzer *Analyzer `protobuf:"bytes,17,opt,name=analyzer,proto3" json:"analyzer,omitempty"`
	// Analyzer to use for this field during indexing, if different from analyzer
	IndexAnalyzer *Analyzer `protobuf:"bytes,18,opt,name=indexAnalyzer,proto3" json:"indexAnalyzer,omitempty"`
	// Analyzer to use for this field during searching, if different from analyzer
	SearchAnalyzer *Analyzer `protobuf:"bytes,19,opt,name=searchAnalyzer,proto3" json:"searchAnalyzer,omitempty"`
	// Whether/how term vectors should be indexed
	TermVectors TermVectors `protobuf:"varint,20,opt,name=termVectors,proto3,enum=luceneserver.TermVectors" json:"termVectors,omitempty"`
	// Which Similarity implementation to use for this field, defaults to BM25Similarity
	Similarity string `protobuf:"bytes,21,opt,name=similarity,proto3" json:"similarity,omitempty"`
	// Whether/how facets should be indexed
	Facet FacetType `protobuf:"varint,22,opt,name=facet,proto3,enum=luceneserver.FacetType" json:"facet,omitempty"`
	// Which underlying Lucene index field is used to hold any indexed taxonomy or sorted set doc values facets,
	// defaults to '$_<field_name>'
	FacetIndexFieldName string `protobuf:"bytes,23,opt,name=facetIndexFieldName,proto3" json:"facetIndexFieldName,omitempty"`
	// Additional info needed to configure field, used for CUSTOM types
	AdditionalProperties *structpb.Struct `protobuf:"bytes,24,opt,name=additionalProperties,proto3" json:"additionalProperties,omitempty"`
	// Parameters for similarity implementation
	SimilarityParams *structpb.Struct `protobuf:"bytes,25,opt,name=similarityParams,proto3" json:"similarityParams,omitempty"`
	// Child fields accessible by dot notation. For standard fields, this indexes the same data as the parent field.
	// For object fields, this represents the subfields within the object.
	ChildFields []*Field `protobuf:"bytes,26,rep,name=childFields,proto3" json:"childFields,omitempty"`
	// Compute facet global ordinals for this field up front, otherwise this is done lazily on first query.
	// Currently only for SORTED_SET_DOC_VALUES facet type.
	EagerGlobalOrdinals bool `protobuf:"varint,27,opt,name=eagerGlobalOrdinals,proto3" json:"eagerGlobalOrdinals,omitempty"`
	// True if object data should be indexed as child documents
	NestedDoc bool `protobuf:"varint,28,opt,name=nestedDoc,proto3" json:"nestedDoc,omitempty"`
	// Dimensions for vector field types
	VectorDimensions int32 `protobuf:"varint,29,opt,name=vectorDimensions,proto3" json:"vectorDimensions,omitempty"`
	// If field based global ordinals should be built up front, otherwise this is done lazily on first access.
	// Currently only for fields with text doc values (TEXT/ATOM).
	EagerFieldGlobalOrdinals bool `protobuf:"varint,30,opt,name=eagerFieldGlobalOrdinals,proto3" json:"eagerFieldGlobalOrdinals,omitempty"`
	// Similarity type for search enabled VECTOR fields. This is a required option when search=true.
	// Accepts built in types:
	//
	//	'l2_norm'          : (1 / (1 + l2_norm(query, vector)^2))
	//	'dot_product'      : Float vector: ((1 + dot_product(query, vector)) / 2) (all vectors must be unit length)
	//	                     Byte vector : 0.5 + (dot_product(query, vector) / (32768 * dims))
	//	                        (all vectors must have the same length)
	//	'cosine'           : ((1 + cosine(query, vector)) / 2)
	//	'max_inner_product': when < 0 : 1 / (1 + -1 * max_inner_product(query, vector))
	//	                     when >= 0: max_inner_product(query, vector) + 1
	VectorSimilarity string `protobuf:"bytes,31,opt,name=vectorSimilarity,proto3" json:"vectorSimilarity,omitempty"`
	// Indexing options for search enabled VECTOR field type. This is optional, defaulting to HNSW with m=16,
	// ef_construction=100 when not set.
	VectorIndexingOptions *VectorIndexingOptions `protobuf:"bytes,32,opt,name=vectorIndexingOptions,proto3" json:"vectorIndexingOptions,omitempty"`
	// Specify doc values type for TEXT/ATOM field types. This is optional, defaulting to SORTED when not set.
	// Multivalued fields will always use SORTED_SET.
	TextDocValuesType TextDocValuesType `protobuf:"varint,33,opt,name=textDocValuesType,proto3,enum=luceneserver.TextDocValuesType" json:"textDocValuesType,omitempty"`
	// Element type for vector field, defaulting to FLOAT when not set
	VectorElementType VectorElementType `protobuf:"varint,34,opt,name=vectorElementType,proto3,enum=luceneserver.VectorElementType" json:"vectorElementType,omitempty"`
	// Position increment gap for indexing multi valued TEXT fields. Must be >= 0, defaulting to 100 when not set.
	PositionIncrementGap *int32 `protobuf:"varint,35,opt,name=positionIncrementGap,proto3,oneof" json:"positionIncrementGap,omitempty"`
	// For arrays of strings, ignoreAbove will be applied for each array element separately and string elements longer
	// than ignore_above will not be indexed or stored. This option is useful for protecting against Lucene’s
	// term byte-length limit of 32766
	IgnoreAbove *int32 `protobuf:"varint,36,opt,name=ignoreAbove,proto3,oneof" json:"ignoreAbove,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{6}
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetType() FieldType {
	if x != nil {
		return x.Type
	}
	return FieldType_ATOM
}

func (x *Field) GetSearch() bool {
	if x != nil {
		return x.Search
	}
	return false
}

func (x *Field) GetStore() bool {
	if x != nil {
		return x.Store
	}
	return false
}

func (x *Field) GetStoreDocValues() bool {
	if x != nil {
		return x.StoreDocValues
	}
	return false
}

// Deprecated: Do not use.
func (x *Field) GetSort() bool {
	if x != nil {
		return x.Sort
	}
	return false
}

// Deprecated: Do not use.
func (x *Field) GetTokenize() bool {
	if x != nil {
		return x.Tokenize
	}
	return false
}

// Deprecated: Do not use.
func (x *Field) GetGroup() bool {
	if x != nil {
		return x.Group
	}
	return false
}

func (x *Field) GetMultiValued() bool {
	if x != nil {
		return x.MultiValued
	}
	return false
}

// Deprecated: Do not use.
func (x *Field) GetHighlight() bool {
	if x != nil {
		return x.Highlight
	}
	return false
}

func (x *Field) GetOmitNorms() bool {
	if x != nil {
		return x.OmitNorms
	}
	return false
}

func (x *Field) GetDateTimeFormat() string {
	if x != nil {
		return x.DateTimeFormat
	}
	return ""
}

func (x *Field) GetPostingsFormat() string {
	if x != nil {
		return x.PostingsFormat
	}
	return ""
}

func (x *Field) GetDocValuesFormat() string {
	if x != nil {
		return x.DocValuesFormat
	}
	return ""
}

func (x *Field) GetIndexOptions() IndexOptions {
	if x != nil {
		return x.IndexOptions
	}
	return IndexOptions_DEFAULT
}

func (x *Field) GetScript() *Script {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *Field) GetAnalyzer() *Analyzer {
	if x != nil {
		return x.Analyzer
	}
	return nil
}

func (x *Field) GetIndexAnalyzer() *Analyzer {
	if x != nil {
		return x.IndexAnalyzer
	}
	return nil
}

func (x *Field) GetSearchAnalyzer() *Analyzer {
	if x != nil {
		return x.SearchAnalyzer
	}
	return nil
}

func (x *Field) GetTermVectors() TermVectors {
	if x != nil {
		return x.TermVectors
	}
	return TermVectors_NO_TERMVECTORS
}

func (x *Field) GetSimilarity() string {
	if x != nil {
		return x.Similarity
	}
	return ""
}

func (x *Field) GetFacet() FacetType {
	if x != nil {
		return x.Facet
	}
	return FacetType_NO_FACETS
}

func (x *Field) GetFacetIndexFieldName() string {
	if x != nil {
		return x.FacetIndexFieldName
	}
	return ""
}

func (x *Field) GetAdditionalProperties() *structpb.Struct {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *Field) GetSimilarityParams() *structpb.Struct {
	if x != nil {
		return x.SimilarityParams
	}
	return nil
}

func (x *Field) GetChildFields() []*Field {
	if x != nil {
		return x.ChildFields
	}
	return nil
}

func (x *Field) GetEagerGlobalOrdinals() bool {
	if x != nil {
		return x.EagerGlobalOrdinals
	}
	return false
}

func (x *Field) GetNestedDoc() bool {
	if x != nil {
		return x.NestedDoc
	}
	return false
}

func (x *Field) GetVectorDimensions() int32 {
	if x != nil {
		return x.VectorDimensions
	}
	return 0
}

func (x *Field) GetEagerFieldGlobalOrdinals() bool {
	if x != nil {
		return x.EagerFieldGlobalOrdinals
	}
	return false
}

func (x *Field) GetVectorSimilarity() string {
	if x != nil {
		return x.VectorSimilarity
	}
	return ""
}

func (x *Field) GetVectorIndexingOptions() *VectorIndexingOptions {
	if x != nil {
		return x.VectorIndexingOptions
	}
	return nil
}

func (x *Field) GetTextDocValuesType() TextDocValuesType {
	if x != nil {
		return x.TextDocValuesType
	}
	return TextDocValuesType_TEXT_DOC_VALUES_TYPE_UNSPECIFIED
}

func (x *Field) GetVectorElementType() VectorElementType {
	if x != nil {
		return x.VectorElementType
	}
	return VectorElementType_VECTOR_ELEMENT_FLOAT
}

func (x *Field) GetPositionIncrementGap() int32 {
	if x != nil && x.PositionIncrementGap != nil {
		return *x.PositionIncrementGap
	}
	return 0
}

func (x *Field) GetIgnoreAbove() int32 {
	if x != nil && x.IgnoreAbove != nil {
		return *x.IgnoreAbove
	}
	return 0
}

// Options for indexing a VECTOR field for search
type VectorIndexingOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vector indexing type, supports 'hnsw' and 'hnsw_scalar_quantized', default: hnsw
	Type *string `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	// The number of neighbors each node will be connected to in the HNSW graph, default: 16
	HnswM *int32 `protobuf:"varint,2,opt,name=hnsw_m,json=hnswM,proto3,oneof" json:"hnsw_m,omitempty"`
	// The number of candidates to track while assembling the list of nearest neighbors for each new node, default: 100
	HnswEfConstruction *int32 `protobuf:"varint,3,opt,name=hnsw_ef_construction,json=hnswEfConstruction,proto3,oneof" json:"hnsw_ef_construction,omitempty"`
	// Number of threads to use for merging vector data, default: 1
	MergeWorkers *int32 `protobuf:"varint,4,opt,name=merge_workers,json=mergeWorkers,proto3,oneof" json:"merge_workers,omitempty"`
	// The confidenceInterval for scalar quantizing the vectors. When unset, it is calculated based on the
	// vector dimension. When `0`, the quantiles are dynamically determined by sampling many confidence intervals and
	// determining the most accurate pair. Otherwise, the value must be between 0.9 and 1.0 (both inclusive).
	// default: unset
	QuantizedConfidenceInterval *float32 `protobuf:"fixed32,5,opt,name=quantized_confidence_interval,json=quantizedConfidenceInterval,proto3,oneof" json:"quantized_confidence_interval,omitempty"`
	// The number of bits to use for quantizing the vectors. It can have the following values:
	//
	//	4 - half byte
	//	7 - signed byte (default)
	QuantizedBits *int32 `protobuf:"varint,6,opt,name=quantized_bits,json=quantizedBits,proto3,oneof" json:"quantized_bits,omitempty"`
	// Whether to compress the vectors, if true, the vectors that are quantized with <= 4 bits will be compressed into
	// a single byte. If false, the vectors will be stored as is. This provides a trade-off of memory usage and speed.
	// default: false
	QuantizedCompress *bool `protobuf:"varint,7,opt,name=quantized_compress,json=quantizedCompress,proto3,oneof" json:"quantized_compress,omitempty"`
}

func (x *VectorIndexingOptions) Reset() {
	*x = VectorIndexingOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorIndexingOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorIndexingOptions) ProtoMessage() {}

func (x *VectorIndexingOptions) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorIndexingOptions.ProtoReflect.Descriptor instead.
func (*VectorIndexingOptions) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{7}
}

func (x *VectorIndexingOptions) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *VectorIndexingOptions) GetHnswM() int32 {
	if x != nil && x.HnswM != nil {
		return *x.HnswM
	}
	return 0
}

func (x *VectorIndexingOptions) GetHnswEfConstruction() int32 {
	if x != nil && x.HnswEfConstruction != nil {
		return *x.HnswEfConstruction
	}
	return 0
}

func (x *VectorIndexingOptions) GetMergeWorkers() int32 {
	if x != nil && x.MergeWorkers != nil {
		return *x.MergeWorkers
	}
	return 0
}

func (x *VectorIndexingOptions) GetQuantizedConfidenceInterval() float32 {
	if x != nil && x.QuantizedConfidenceInterval != nil {
		return *x.QuantizedConfidenceInterval
	}
	return 0
}

func (x *VectorIndexingOptions) GetQuantizedBits() int32 {
	if x != nil && x.QuantizedBits != nil {
		return *x.QuantizedBits
	}
	return 0
}

func (x *VectorIndexingOptions) GetQuantizedCompress() bool {
	if x != nil && x.QuantizedCompress != nil {
		return *x.QuantizedCompress
	}
	return false
}

// Input to registerFields
type FieldDefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of index to add fields to
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// List of fields to add
	Field []*Field `protobuf:"bytes,2,rep,name=field,proto3" json:"field,omitempty"`
}

func (x *FieldDefRequest) Reset() {
	*x = FieldDefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldDefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldDefRequest) ProtoMessage() {}

func (x *FieldDefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldDefRequest.ProtoReflect.Descriptor instead.
func (*FieldDefRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{8}
}

func (x *FieldDefRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *FieldDefRequest) GetField() []*Field {
	if x != nil {
		return x.Field
	}
	return nil
}

// Response from Server for registerFields
type FieldDefResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Json string of object containing all index fields (including newly added fields)
	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *FieldDefResponse) Reset() {
	*x = FieldDefResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldDefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldDefResponse) ProtoMessage() {}

func (x *FieldDefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldDefResponse.ProtoReflect.Descriptor instead.
func (*FieldDefResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{9}
}

func (x *FieldDefResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Input to settings
type SettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of index whose settings are to be updated
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// No longer used
	//
	// Deprecated: Do not use.
	MergeMaxMBPerSec float64 `protobuf:"fixed64,2,opt,name=mergeMaxMBPerSec,proto3" json:"mergeMaxMBPerSec,omitempty"`
	// Largest merged segment size to cache in RAMDirectory, default: 5.0MB
	NrtCachingDirectoryMaxMergeSizeMB float64 `protobuf:"fixed64,3,opt,name=nrtCachingDirectoryMaxMergeSizeMB,proto3" json:"nrtCachingDirectoryMaxMergeSizeMB,omitempty"`
	// Largest overall size for all files cached in NRTCachingDirectory; set to -1 to disable NRTCachingDirectory,
	// default: 60.0MB
	NrtCachingDirectoryMaxSizeMB float64 `protobuf:"fixed64,4,opt,name=nrtCachingDirectoryMaxSizeMB,proto3" json:"nrtCachingDirectoryMaxSizeMB,omitempty"`
	// How many merge threads to allow at once
	ConcurrentMergeSchedulerMaxThreadCount int32 `protobuf:"varint,5,opt,name=concurrentMergeSchedulerMaxThreadCount,proto3" json:"concurrentMergeSchedulerMaxThreadCount,omitempty"`
	// Maximum backlog of pending merges before indexing threads are stalled
	ConcurrentMergeSchedulerMaxMergeCount int32 `protobuf:"varint,6,opt,name=concurrentMergeSchedulerMaxMergeCount,proto3" json:"concurrentMergeSchedulerMaxMergeCount,omitempty"`
	// Index time sorting; can only be written once, default: no sorting
	IndexSort *SortFields `protobuf:"bytes,7,opt,name=indexSort,proto3" json:"indexSort,omitempty"`
	// Deprecated, moved to lucene config. Turn on IndexWriter's infoStream (to stdout)
	//
	// Deprecated: Do not use.
	IndexVerbose bool `protobuf:"varint,8,opt,name=indexVerbose,proto3" json:"indexVerbose,omitempty"`
	// Turn on/off the merge scheduler's auto throttling
	IndexMergeSchedulerAutoThrottle bool `protobuf:"varint,9,opt,name=indexMergeSchedulerAutoThrottle,proto3" json:"indexMergeSchedulerAutoThrottle,omitempty"`
	// No longer used
	//
	// Deprecated: Do not use.
	NormsFormat string `protobuf:"bytes,10,opt,name=normsFormat,proto3" json:"normsFormat,omitempty"`
	// Base Directory implementation to use either one of the core implementations
	// (FSDirectory, MMapDirectory, NIOFSDirectory, or a fully qualified path to a Directory
	// implementation that has a public constructor taking a single File argument default: FSDirectory.
	// This implementation will be wrapped by NRTCachingDirectory, if enabled and not using MMappedDirectory.
	Directory string `protobuf:"bytes,11,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *SettingsRequest) Reset() {
	*x = SettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsRequest) ProtoMessage() {}

func (x *SettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsRequest.ProtoReflect.Descriptor instead.
func (*SettingsRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{10}
}

func (x *SettingsRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

// Deprecated: Do not use.
func (x *SettingsRequest) GetMergeMaxMBPerSec() float64 {
	if x != nil {
		return x.MergeMaxMBPerSec
	}
	return 0
}

func (x *SettingsRequest) GetNrtCachingDirectoryMaxMergeSizeMB() float64 {
	if x != nil {
		return x.NrtCachingDirectoryMaxMergeSizeMB
	}
	return 0
}

func (x *SettingsRequest) GetNrtCachingDirectoryMaxSizeMB() float64 {
	if x != nil {
		return x.NrtCachingDirectoryMaxSizeMB
	}
	return 0
}

func (x *SettingsRequest) GetConcurrentMergeSchedulerMaxThreadCount() int32 {
	if x != nil {
		return x.ConcurrentMergeSchedulerMaxThreadCount
	}
	return 0
}

func (x *SettingsRequest) GetConcurrentMergeSchedulerMaxMergeCount() int32 {
	if x != nil {
		return x.ConcurrentMergeSchedulerMaxMergeCount
	}
	return 0
}

func (x *SettingsRequest) GetIndexSort() *SortFields {
	if x != nil {
		return x.IndexSort
	}
	return nil
}

// Deprecated: Do not use.
func (x *SettingsRequest) GetIndexVerbose() bool {
	if x != nil {
		return x.IndexVerbose
	}
	return false
}

func (x *SettingsRequest) GetIndexMergeSchedulerAutoThrottle() bool {
	if x != nil {
		return x.IndexMergeSchedulerAutoThrottle
	}
	return false
}

// Deprecated: Do not use.
func (x *SettingsRequest) GetNormsFormat() string {
	if x != nil {
		return x.NormsFormat
	}
	return ""
}

func (x *SettingsRequest) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

// Settings Response returned from Server
type SettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Json string of updated IndexSettings
	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *SettingsResponse) Reset() {
	*x = SettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsResponse) ProtoMessage() {}

func (x *SettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsResponse.ProtoReflect.Descriptor instead.
func (*SettingsResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{11}
}

func (x *SettingsResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Input to settingsV2
type SettingsV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// Settings to merge into existing settings, or unset to get current settings
	Settings *IndexSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *SettingsV2Request) Reset() {
	*x = SettingsV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsV2Request) ProtoMessage() {}

func (x *SettingsV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsV2Request.ProtoReflect.Descriptor instead.
func (*SettingsV2Request) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{12}
}

func (x *SettingsV2Request) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *SettingsV2Request) GetSettings() *IndexSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// Response from Server for settingsV2
type SettingsV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current index settings, including default values
	Settings *IndexSettings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *SettingsV2Response) Reset() {
	*x = SettingsV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsV2Response) ProtoMessage() {}

func (x *SettingsV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsV2Response.ProtoReflect.Descriptor instead.
func (*SettingsV2Response) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{13}
}

func (x *SettingsV2Response) GetSettings() *IndexSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// Input to startIndex
type StartIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// Mode to start this index: Standalone, NRT primary or replica
	Mode Mode `protobuf:"varint,2,opt,name=mode,proto3,enum=luceneserver.Mode" json:"mode,omitempty"`
	// Generation of this primary (should increase each time a new primary starts for this index).
	// Pass -1 use generation based on epoch time.
	PrimaryGen int64 `protobuf:"varint,3,opt,name=primaryGen,proto3" json:"primaryGen,omitempty"` //primary,
	// Replica config: the IP address or host name of the remote primary
	PrimaryAddress string `protobuf:"bytes,4,opt,name=primaryAddress,proto3" json:"primaryAddress,omitempty"`
	// Replica config: the TCP port of the remote primary
	Port int32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// Restore index from backup
	Restore *RestoreIndex `protobuf:"bytes,6,opt,name=restore,proto3" json:"restore,omitempty"`
	// Replica config: location of discovery file containing primary host/port. Used if primaryAddress is empty.
	// If port is specified in this request, it overrides the port value in the file.
	PrimaryDiscoveryFile string `protobuf:"bytes,7,opt,name=primaryDiscoveryFile,proto3" json:"primaryDiscoveryFile,omitempty"`
}

func (x *StartIndexRequest) Reset() {
	*x = StartIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartIndexRequest) ProtoMessage() {}

func (x *StartIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartIndexRequest.ProtoReflect.Descriptor instead.
func (*StartIndexRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{14}
}

func (x *StartIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *StartIndexRequest) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_STANDALONE
}

func (x *StartIndexRequest) GetPrimaryGen() int64 {
	if x != nil {
		return x.PrimaryGen
	}
	return 0
}

func (x *StartIndexRequest) GetPrimaryAddress() string {
	if x != nil {
		return x.PrimaryAddress
	}
	return ""
}

func (x *StartIndexRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *StartIndexRequest) GetRestore() *RestoreIndex {
	if x != nil {
		return x.Restore
	}
	return nil
}

func (x *StartIndexRequest) GetPrimaryDiscoveryFile() string {
	if x != nil {
		return x.PrimaryDiscoveryFile
	}
	return ""
}

// Start the index using IndexStartConfig configuration
type StartIndexV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
}

func (x *StartIndexV2Request) Reset() {
	*x = StartIndexV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartIndexV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartIndexV2Request) ProtoMessage() {}

func (x *StartIndexV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartIndexV2Request.ProtoReflect.Descriptor instead.
func (*StartIndexV2Request) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{15}
}

func (x *StartIndexV2Request) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

// Response from Server for startIndex
type StartIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One greater than the largest possible document number
	MaxDoc int32 `protobuf:"varint,1,opt,name=maxDoc,proto3" json:"maxDoc,omitempty"`
	// Number of documents in this index
	NumDocs int32 `protobuf:"varint,2,opt,name=numDocs,proto3" json:"numDocs,omitempty"`
	// String representation of the IndexReader implementation
	Segments string `protobuf:"bytes,3,opt,name=segments,proto3" json:"segments,omitempty"`
	// Time taken to start the index
	StartTimeMS float64 `protobuf:"fixed64,4,opt,name=startTimeMS,proto3" json:"startTimeMS,omitempty"`
}

func (x *StartIndexResponse) Reset() {
	*x = StartIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartIndexResponse) ProtoMessage() {}

func (x *StartIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartIndexResponse.ProtoReflect.Descriptor instead.
func (*StartIndexResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{16}
}

func (x *StartIndexResponse) GetMaxDoc() int32 {
	if x != nil {
		return x.MaxDoc
	}
	return 0
}

func (x *StartIndexResponse) GetNumDocs() int32 {
	if x != nil {
		return x.NumDocs
	}
	return 0
}

func (x *StartIndexResponse) GetSegments() string {
	if x != nil {
		return x.Segments
	}
	return ""
}

func (x *StartIndexResponse) GetStartTimeMS() float64 {
	if x != nil {
		return x.StartTimeMS
	}
	return 0
}

// Message representing a document to index
type AddDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// Map of field name to a list of string values
	Fields map[string]*AddDocumentRequest_MultiValuedField `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AddDocumentRequest) Reset() {
	*x = AddDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDocumentRequest) ProtoMessage() {}

func (x *AddDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDocumentRequest.ProtoReflect.Descriptor instead.
func (*AddDocumentRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{17}
}

func (x *AddDocumentRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *AddDocumentRequest) GetFields() map[string]*AddDocumentRequest_MultiValuedField {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Path for hierarchical facets
type FacetHierarchyPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Facet path
	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *FacetHierarchyPath) Reset() {
	*x = FacetHierarchyPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacetHierarchyPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacetHierarchyPath) ProtoMessage() {}

func (x *FacetHierarchyPath) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacetHierarchyPath.ProtoReflect.Descriptor instead.
func (*FacetHierarchyPath) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{18}
}

func (x *FacetHierarchyPath) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

// Response from Server for addDocument
type AddDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Lucene index sequence number after adding the documents
	GenId string `protobuf:"bytes,1,opt,name=genId,proto3" json:"genId,omitempty"`
	// Unique identifier for the primary instance that processed the request
	PrimaryId string `protobuf:"bytes,2,opt,name=primaryId,proto3" json:"primaryId,omitempty"`
}

func (x *AddDocumentResponse) Reset() {
	*x = AddDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDocumentResponse) ProtoMessage() {}

func (x *AddDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDocumentResponse.ProtoReflect.Descriptor instead.
func (*AddDocumentResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{19}
}

func (x *AddDocumentResponse) GetGenId() string {
	if x != nil {
		return x.GenId
	}
	return ""
}

func (x *AddDocumentResponse) GetPrimaryId() string {
	if x != nil {
		return x.PrimaryId
	}
	return ""
}

// Input to refresh
type RefreshRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name to be refreshed
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
}

func (x *RefreshRequest) Reset() {
	*x = RefreshRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshRequest) ProtoMessage() {}

func (x *RefreshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshRequest.ProtoReflect.Descriptor instead.
func (*RefreshRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{20}
}

func (x *RefreshRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

// Response from Server for refresh
type RefreshResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time taken in milliseconds to refresh the index
	RefreshTimeMS float64 `protobuf:"fixed64,1,opt,name=refreshTimeMS,proto3" json:"refreshTimeMS,omitempty"`
}

func (x *RefreshResponse) Reset() {
	*x = RefreshResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshResponse) ProtoMessage() {}

func (x *RefreshResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshResponse.ProtoReflect.Descriptor instead.
func (*RefreshResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{21}
}

func (x *RefreshResponse) GetRefreshTimeMS() float64 {
	if x != nil {
		return x.RefreshTimeMS
	}
	return 0
}

// Input to commit
type CommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name to commit
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
}

func (x *CommitRequest) Reset() {
	*x = CommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest) ProtoMessage() {}

func (x *CommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRequest.ProtoReflect.Descriptor instead.
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{22}
}

func (x *CommitRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

// Response from Server for commit
type CommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence number of the last operation in the commit. All sequence numbers less than this value
	// will be reflected in the commit, and all others will not.
	Gen int64 `protobuf:"varint,1,opt,name=gen,proto3" json:"gen,omitempty"`
	// Unique identifier for the primary instance that processed the request
	PrimaryId string `protobuf:"bytes,2,opt,name=primaryId,proto3" json:"primaryId,omitempty"`
}

func (x *CommitResponse) Reset() {
	*x = CommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitResponse) ProtoMessage() {}

func (x *CommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitResponse.ProtoReflect.Descriptor instead.
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{23}
}

func (x *CommitResponse) GetGen() int64 {
	if x != nil {
		return x.Gen
	}
	return 0
}

func (x *CommitResponse) GetPrimaryId() string {
	if x != nil {
		return x.PrimaryId
	}
	return ""
}

// Input to stats
type StatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name to retrieve stats
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
}

func (x *StatsRequest) Reset() {
	*x = StatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsRequest) ProtoMessage() {}

func (x *StatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsRequest.ProtoReflect.Descriptor instead.
func (*StatsRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{24}
}

func (x *StatsRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

// Response from Server for stats
type StatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shard ordinal
	Ord int32 `protobuf:"varint,1,opt,name=ord,proto3" json:"ord,omitempty"`
	// The total number of docs in this index, including docs not yet flushed (still in the RAM buffer),
	// not counting deletions.
	MaxDoc int32 `protobuf:"varint,2,opt,name=maxDoc,proto3" json:"maxDoc,omitempty"`
	// The total number of docs in this index, including docs not yet flushed (still in the RAM buffer), and
	// including deletions. NOTE: buffered deletions are not counted.  If you really need these to be
	// counted you should call {@link IndexWriter#commit()} first.
	NumDocs int32 `protobuf:"varint,3,opt,name=numDocs,proto3" json:"numDocs,omitempty"`
	// The total size of this indexDir
	DirSize int64 `protobuf:"varint,4,opt,name=dirSize,proto3" json:"dirSize,omitempty"`
	// The state of the index
	State string `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
	// Taxonomy(facets) stats
	Taxonomy *Taxonomy `protobuf:"bytes,6,opt,name=taxonomy,proto3" json:"taxonomy,omitempty"`
	// Searcher stats
	Searchers []*Searcher `protobuf:"bytes,7,rep,name=searchers,proto3" json:"searchers,omitempty"`
	// Current Searcher stats
	CurrentSearcher *Searcher `protobuf:"bytes,8,opt,name=currentSearcher,proto3" json:"currentSearcher,omitempty"`
}

func (x *StatsResponse) Reset() {
	*x = StatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsResponse) ProtoMessage() {}

func (x *StatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsResponse.ProtoReflect.Descriptor instead.
func (*StatsResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{25}
}

func (x *StatsResponse) GetOrd() int32 {
	if x != nil {
		return x.Ord
	}
	return 0
}

func (x *StatsResponse) GetMaxDoc() int32 {
	if x != nil {
		return x.MaxDoc
	}
	return 0
}

func (x *StatsResponse) GetNumDocs() int32 {
	if x != nil {
		return x.NumDocs
	}
	return 0
}

func (x *StatsResponse) GetDirSize() int64 {
	if x != nil {
		return x.DirSize
	}
	return 0
}

func (x *StatsResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *StatsResponse) GetTaxonomy() *Taxonomy {
	if x != nil {
		return x.Taxonomy
	}
	return nil
}

func (x *StatsResponse) GetSearchers() []*Searcher {
	if x != nil {
		return x.Searchers
	}
	return nil
}

func (x *StatsResponse) GetCurrentSearcher() *Searcher {
	if x != nil {
		return x.CurrentSearcher
	}
	return nil
}

// Taxonomy stats
type Taxonomy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of docs in this taxonomy reader
	NumOrds int32 `protobuf:"varint,1,opt,name=numOrds,proto3" json:"numOrds,omitempty"`
	// String representation of segments
	Segments string `protobuf:"bytes,2,opt,name=segments,proto3" json:"segments,omitempty"`
}

func (x *Taxonomy) Reset() {
	*x = Taxonomy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Taxonomy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taxonomy) ProtoMessage() {}

func (x *Taxonomy) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taxonomy.ProtoReflect.Descriptor instead.
func (*Taxonomy) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{26}
}

func (x *Taxonomy) GetNumOrds() int32 {
	if x != nil {
		return x.NumOrds
	}
	return 0
}

func (x *Taxonomy) GetSegments() string {
	if x != nil {
		return x.Segments
	}
	return ""
}

// Index searcher stats
type Searcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version recorded in the commit that the reader opened. This version is advanced every time a change
	// is made with IndexWriter.
	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Total number of docs in this index
	NumDocs int32 `protobuf:"varint,2,opt,name=numDocs,proto3" json:"numDocs,omitempty"`
	// String representation of segments
	Segments string `protobuf:"bytes,3,opt,name=segments,proto3" json:"segments,omitempty"`
	// How much time has passed since this searcher was the current (live) searcher
	StaleAgeSeconds float64 `protobuf:"fixed64,4,opt,name=staleAgeSeconds,proto3" json:"staleAgeSeconds,omitempty"`
	// Number of segments, filled only if Searcher has StandardDirectoryReader
	NumSegments int32 `protobuf:"varint,5,opt,name=numSegments,proto3" json:"numSegments,omitempty"`
}

func (x *Searcher) Reset() {
	*x = Searcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Searcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Searcher) ProtoMessage() {}

func (x *Searcher) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Searcher.ProtoReflect.Descriptor instead.
func (*Searcher) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{27}
}

func (x *Searcher) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Searcher) GetNumDocs() int32 {
	if x != nil {
		return x.NumDocs
	}
	return 0
}

func (x *Searcher) GetSegments() string {
	if x != nil {
		return x.Segments
	}
	return ""
}

func (x *Searcher) GetStaleAgeSeconds() float64 {
	if x != nil {
		return x.StaleAgeSeconds
	}
	return 0
}

func (x *Searcher) GetNumSegments() int32 {
	if x != nil {
		return x.NumSegments
	}
	return 0
}

// Input to deleteAllDocuments
type DeleteAllDocumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name to delete all documents from
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
}

func (x *DeleteAllDocumentsRequest) Reset() {
	*x = DeleteAllDocumentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllDocumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllDocumentsRequest) ProtoMessage() {}

func (x *DeleteAllDocumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllDocumentsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAllDocumentsRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteAllDocumentsRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

// Response from Server for deleteAllDocuments
type DeleteAllDocumentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Lucene index sequence number after deleting all documents
	GenId string `protobuf:"bytes,1,opt,name=genId,proto3" json:"genId,omitempty"`
}

func (x *DeleteAllDocumentsResponse) Reset() {
	*x = DeleteAllDocumentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllDocumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllDocumentsResponse) ProtoMessage() {}

func (x *DeleteAllDocumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllDocumentsResponse.ProtoReflect.Descriptor instead.
func (*DeleteAllDocumentsResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteAllDocumentsResponse) GetGenId() string {
	if x != nil {
		return x.GenId
	}
	return ""
}

// Input to deleteIndex
type DeleteIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name to delete
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
}

func (x *DeleteIndexRequest) Reset() {
	*x = DeleteIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIndexRequest) ProtoMessage() {}

func (x *DeleteIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIndexRequest.ProtoReflect.Descriptor instead.
func (*DeleteIndexRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

// Response from Server for deleteIndex
type DeleteIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Returns "ok" string on success
	Ok string `protobuf:"bytes,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *DeleteIndexResponse) Reset() {
	*x = DeleteIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIndexResponse) ProtoMessage() {}

func (x *DeleteIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIndexResponse.ProtoReflect.Descriptor instead.
func (*DeleteIndexResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteIndexResponse) GetOk() string {
	if x != nil {
		return x.Ok
	}
	return ""
}

// Response with no content
type DummyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Returns "ok" string on success
	Ok string `protobuf:"bytes,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *DummyResponse) Reset() {
	*x = DummyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DummyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DummyResponse) ProtoMessage() {}

func (x *DummyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DummyResponse.ProtoReflect.Descriptor instead.
func (*DummyResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{32}
}

func (x *DummyResponse) GetOk() string {
	if x != nil {
		return x.Ok
	}
	return ""
}

// Input to stopIndex
type StopIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name to stop
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
}

func (x *StopIndexRequest) Reset() {
	*x = StopIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopIndexRequest) ProtoMessage() {}

func (x *StopIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopIndexRequest.ProtoReflect.Descriptor instead.
func (*StopIndexRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{33}
}

func (x *StopIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

// Input to reloadState
type ReloadStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReloadStateRequest) Reset() {
	*x = ReloadStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadStateRequest) ProtoMessage() {}

func (x *ReloadStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadStateRequest.ProtoReflect.Descriptor instead.
func (*ReloadStateRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{34}
}

// Response from Server for reloadState
type ReloadStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReloadStateResponse) Reset() {
	*x = ReloadStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadStateResponse) ProtoMessage() {}

func (x *ReloadStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadStateResponse.ProtoReflect.Descriptor instead.
func (*ReloadStateResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{35}
}

// Creates a snapshot in the index, which is saved point-in-time view of the last commit in the
// index such that no files referenced by that snapshot will be deleted by ongoing indexing until
// the snapshot is released with @releaseSnapshot.  Note that this will reference the last commit,
// so be sure to call commit first if you have pending changes that you'd like to be included in
// the snapshot.<p>This can be used for backup purposes, i.e. after creating the snapshot you can
// copy all referenced files to backup storage, and then release the snapshot once complete.
// To restore the backup, just copy all the files back and restart the server.  It can also
// be used for transactional purposes, i.e. if you sometimes need to search a specific snapshot
// instead of the current live index.<p>Creating a snapshot is very fast (does not require any
// file copying), but over time it will consume extra disk space as old segments are merged in
// the index.  Be sure to release the snapshot once you're done.  Snapshots survive shutdown
// and restart of the server.  Returns all protected filenames referenced by this snapshot:
// these files will not change and will not be deleted until the snapshot is released.
// This returns the directories and files referenced by the snapshot.
type CreateSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the index to snapshot
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// Pass true if you intend to do searches against this snapshot, by passing searcher: {snapshot: X} to @search
	OpenSearcher bool `protobuf:"varint,2,opt,name=openSearcher,proto3" json:"openSearcher,omitempty"`
}

func (x *CreateSnapshotRequest) Reset() {
	*x = CreateSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshotRequest) ProtoMessage() {}

func (x *CreateSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshotRequest.ProtoReflect.Descriptor instead.
func (*CreateSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{36}
}

func (x *CreateSnapshotRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *CreateSnapshotRequest) GetOpenSearcher() bool {
	if x != nil {
		return x.OpenSearcher
	}
	return false
}

// Response from Server for createSnapshot
type CreateSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of index files referenced by this snapshot
	IndexFiles []string `protobuf:"bytes,1,rep,name=indexFiles,proto3" json:"indexFiles,omitempty"`
	// List of taxonomy index files referenced by this snapshot
	TaxonomyFiles []string `protobuf:"bytes,2,rep,name=taxonomyFiles,proto3" json:"taxonomyFiles,omitempty"`
	// List of state index files referenced by this snapshot
	StateFiles []string `protobuf:"bytes,3,rep,name=stateFiles,proto3" json:"stateFiles,omitempty"`
	// Snapshot id
	SnapshotId *SnapshotId `protobuf:"bytes,4,opt,name=snapshotId,proto3" json:"snapshotId,omitempty"`
}

func (x *CreateSnapshotResponse) Reset() {
	*x = CreateSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshotResponse) ProtoMessage() {}

func (x *CreateSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshotResponse.ProtoReflect.Descriptor instead.
func (*CreateSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{37}
}

func (x *CreateSnapshotResponse) GetIndexFiles() []string {
	if x != nil {
		return x.IndexFiles
	}
	return nil
}

func (x *CreateSnapshotResponse) GetTaxonomyFiles() []string {
	if x != nil {
		return x.TaxonomyFiles
	}
	return nil
}

func (x *CreateSnapshotResponse) GetStateFiles() []string {
	if x != nil {
		return x.StateFiles
	}
	return nil
}

func (x *CreateSnapshotResponse) GetSnapshotId() *SnapshotId {
	if x != nil {
		return x.SnapshotId
	}
	return nil
}

// Snapshot id
type SnapshotId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index generation
	IndexGen int64 `protobuf:"varint,1,opt,name=indexGen,proto3" json:"indexGen,omitempty"`
	// Taxonomy index generation
	TaxonomyGen int64 `protobuf:"varint,2,opt,name=taxonomyGen,proto3" json:"taxonomyGen,omitempty"`
	// State generation
	StateGen int64 `protobuf:"varint,3,opt,name=stateGen,proto3" json:"stateGen,omitempty"`
}

func (x *SnapshotId) Reset() {
	*x = SnapshotId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotId) ProtoMessage() {}

func (x *SnapshotId) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotId.ProtoReflect.Descriptor instead.
func (*SnapshotId) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{38}
}

func (x *SnapshotId) GetIndexGen() int64 {
	if x != nil {
		return x.IndexGen
	}
	return 0
}

func (x *SnapshotId) GetTaxonomyGen() int64 {
	if x != nil {
		return x.TaxonomyGen
	}
	return 0
}

func (x *SnapshotId) GetStateGen() int64 {
	if x != nil {
		return x.StateGen
	}
	return 0
}

// Input to releaseSnapshot
type ReleaseSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the index to release snapshot
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// Id of snapshot to release, previously returned by @createSnapshot
	SnapshotId *SnapshotId `protobuf:"bytes,2,opt,name=snapshotId,proto3" json:"snapshotId,omitempty"`
}

func (x *ReleaseSnapshotRequest) Reset() {
	*x = ReleaseSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSnapshotRequest) ProtoMessage() {}

func (x *ReleaseSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSnapshotRequest.ProtoReflect.Descriptor instead.
func (*ReleaseSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{39}
}

func (x *ReleaseSnapshotRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *ReleaseSnapshotRequest) GetSnapshotId() *SnapshotId {
	if x != nil {
		return x.SnapshotId
	}
	return nil
}

// Response from Server for releaseSnapshot
type ReleaseSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if successful
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ReleaseSnapshotResponse) Reset() {
	*x = ReleaseSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSnapshotResponse) ProtoMessage() {}

func (x *ReleaseSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSnapshotResponse.ProtoReflect.Descriptor instead.
func (*ReleaseSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{40}
}

func (x *ReleaseSnapshotResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Input to getAllSnapshotGen
type GetAllSnapshotGenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the index to get snapshot gens
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
}

func (x *GetAllSnapshotGenRequest) Reset() {
	*x = GetAllSnapshotGenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSnapshotGenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSnapshotGenRequest) ProtoMessage() {}

func (x *GetAllSnapshotGenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSnapshotGenRequest.ProtoReflect.Descriptor instead.
func (*GetAllSnapshotGenRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{41}
}

func (x *GetAllSnapshotGenRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

// Response from Server for getAllSnapshotGen
type GetAllSnapshotGenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of snapshot gens
	IndexGens []int64 `protobuf:"varint,1,rep,packed,name=indexGens,proto3" json:"indexGens,omitempty"`
}

func (x *GetAllSnapshotGenResponse) Reset() {
	*x = GetAllSnapshotGenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSnapshotGenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSnapshotGenResponse) ProtoMessage() {}

func (x *GetAllSnapshotGenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSnapshotGenResponse.ProtoReflect.Descriptor instead.
func (*GetAllSnapshotGenResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{42}
}

func (x *GetAllSnapshotGenResponse) GetIndexGens() []int64 {
	if x != nil {
		return x.IndexGens
	}
	return nil
}

// Input to backupWarmingQueries
type BackupWarmingQueriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index whose warming queries to backup
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	// Remote storage namespace qualifier for service
	ServiceName string `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	// Optional; minimum # of queries required to backup warming queries
	NumQueriesThreshold int32 `protobuf:"varint,3,opt,name=numQueriesThreshold,proto3" json:"numQueriesThreshold,omitempty"`
	// Optional; minimum # of minutes uptime to backup warming queries
	UptimeMinutesThreshold int32 `protobuf:"varint,4,opt,name=uptimeMinutesThreshold,proto3" json:"uptimeMinutesThreshold,omitempty"`
}

func (x *BackupWarmingQueriesRequest) Reset() {
	*x = BackupWarmingQueriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupWarmingQueriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupWarmingQueriesRequest) ProtoMessage() {}

func (x *BackupWarmingQueriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupWarmingQueriesRequest.ProtoReflect.Descriptor instead.
func (*BackupWarmingQueriesRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{43}
}

func (x *BackupWarmingQueriesRequest) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *BackupWarmingQueriesRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *BackupWarmingQueriesRequest) GetNumQueriesThreshold() int32 {
	if x != nil {
		return x.NumQueriesThreshold
	}
	return 0
}

func (x *BackupWarmingQueriesRequest) GetUptimeMinutesThreshold() int32 {
	if x != nil {
		return x.UptimeMinutesThreshold
	}
	return 0
}

// Response from Server for backupWarmingQueries
type BackupWarmingQueriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BackupWarmingQueriesResponse) Reset() {
	*x = BackupWarmingQueriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupWarmingQueriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupWarmingQueriesResponse) ProtoMessage() {}

func (x *BackupWarmingQueriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupWarmingQueriesResponse.ProtoReflect.Descriptor instead.
func (*BackupWarmingQueriesResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{44}
}

// Input to indices
type IndicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IndicesRequest) Reset() {
	*x = IndicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicesRequest) ProtoMessage() {}

func (x *IndicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicesRequest.ProtoReflect.Descriptor instead.
func (*IndicesRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{45}
}

// Response from Server for indices
type IndicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of index stats
	IndicesResponse []*IndexStatsResponse `protobuf:"bytes,1,rep,name=indicesResponse,proto3" json:"indicesResponse,omitempty"`
}

func (x *IndicesResponse) Reset() {
	*x = IndicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicesResponse) ProtoMessage() {}

func (x *IndicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicesResponse.ProtoReflect.Descriptor instead.
func (*IndicesResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{46}
}

func (x *IndicesResponse) GetIndicesResponse() []*IndexStatsResponse {
	if x != nil {
		return x.IndicesResponse
	}
	return nil
}

// Index stats response
type IndexStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// Index stats
	StatsResponse *StatsResponse `protobuf:"bytes,2,opt,name=statsResponse,proto3" json:"statsResponse,omitempty"`
}

func (x *IndexStatsResponse) Reset() {
	*x = IndexStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexStatsResponse) ProtoMessage() {}

func (x *IndexStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexStatsResponse.ProtoReflect.Descriptor instead.
func (*IndexStatsResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{47}
}

func (x *IndexStatsResponse) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *IndexStatsResponse) GetStatsResponse() *StatsResponse {
	if x != nil {
		return x.StatsResponse
	}
	return nil
}

// Index restore information
type RestoreIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Remote storage namespace qualifier for service
	ServiceName string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	// Remote storage namespace qualifier for resource e.g. indexName
	ResourceName string `protobuf:"bytes,2,opt,name=resourceName,proto3" json:"resourceName,omitempty"`
	// Delete any existing local data for the index
	DeleteExistingData bool `protobuf:"varint,3,opt,name=deleteExistingData,proto3" json:"deleteExistingData,omitempty"`
}

func (x *RestoreIndex) Reset() {
	*x = RestoreIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreIndex) ProtoMessage() {}

func (x *RestoreIndex) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreIndex.ProtoReflect.Descriptor instead.
func (*RestoreIndex) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{48}
}

func (x *RestoreIndex) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RestoreIndex) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *RestoreIndex) GetDeleteExistingData() bool {
	if x != nil {
		return x.DeleteExistingData
	}
	return false
}

// Input to nodeInfo
type NodeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NodeInfoRequest) Reset() {
	*x = NodeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfoRequest) ProtoMessage() {}

func (x *NodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfoRequest.ProtoReflect.Descriptor instead.
func (*NodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{49}
}

// Response from Server for nodeInfo
type NodeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node name
	NodeName string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Service name
	ServiceName string `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host name
	HostName string `protobuf:"bytes,3,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// Nrtsearch version
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// Node ephemeral id
	EphemeralId string `protobuf:"bytes,5,opt,name=ephemeral_id,json=ephemeralId,proto3" json:"ephemeral_id,omitempty"`
}

func (x *NodeInfoResponse) Reset() {
	*x = NodeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfoResponse) ProtoMessage() {}

func (x *NodeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfoResponse.ProtoReflect.Descriptor instead.
func (*NodeInfoResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{50}
}

func (x *NodeInfoResponse) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeInfoResponse) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *NodeInfoResponse) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *NodeInfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NodeInfoResponse) GetEphemeralId() string {
	if x != nil {
		return x.EphemeralId
	}
	return ""
}

// Input to globalState
type GlobalStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GlobalStateRequest) Reset() {
	*x = GlobalStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalStateRequest) ProtoMessage() {}

func (x *GlobalStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalStateRequest.ProtoReflect.Descriptor instead.
func (*GlobalStateRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{51}
}

// Response from Server for globalState
type GlobalStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cluster global state
	GlobalState *GlobalStateInfo `protobuf:"bytes,1,opt,name=global_state,json=globalState,proto3" json:"global_state,omitempty"`
}

func (x *GlobalStateResponse) Reset() {
	*x = GlobalStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalStateResponse) ProtoMessage() {}

func (x *GlobalStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalStateResponse.ProtoReflect.Descriptor instead.
func (*GlobalStateResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{52}
}

func (x *GlobalStateResponse) GetGlobalState() *GlobalStateInfo {
	if x != nil {
		return x.GlobalState
	}
	return nil
}

// Input to state
type StateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name to retrieve state
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
}

func (x *StateRequest) Reset() {
	*x = StateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateRequest) ProtoMessage() {}

func (x *StateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateRequest.ProtoReflect.Descriptor instead.
func (*StateRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{53}
}

func (x *StateRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

// Response from Server for state
type StateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Json string of the current index state
	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *StateResponse) Reset() {
	*x = StateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateResponse) ProtoMessage() {}

func (x *StateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateResponse.ProtoReflect.Descriptor instead.
func (*StateResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{54}
}

func (x *StateResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Input to indexState
type IndexStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name
	IndexName string `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
}

func (x *IndexStateRequest) Reset() {
	*x = IndexStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexStateRequest) ProtoMessage() {}

func (x *IndexStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexStateRequest.ProtoReflect.Descriptor instead.
func (*IndexStateRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{55}
}

func (x *IndexStateRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

// Response from Server for indexState
type IndexStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index state
	IndexState *IndexStateInfo `protobuf:"bytes,1,opt,name=index_state,json=indexState,proto3" json:"index_state,omitempty"`
}

func (x *IndexStateResponse) Reset() {
	*x = IndexStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexStateResponse) ProtoMessage() {}

func (x *IndexStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexStateResponse.ProtoReflect.Descriptor instead.
func (*IndexStateResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{56}
}

func (x *IndexStateResponse) GetIndexState() *IndexStateInfo {
	if x != nil {
		return x.IndexState
	}
	return nil
}

// Input to addReplica
type AddReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Magic number send on all requests since these are meant for internal communication only
	MagicNumber int32 `protobuf:"varint,1,opt,name=magicNumber,proto3" json:"magicNumber,omitempty"`
	// Index name
	IndexName string `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// No longer used
	//
	// Deprecated: Do not use.
	ReplicaId int32 `protobuf:"varint,3,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	// Replica host name
	HostName string `protobuf:"bytes,4,opt,name=hostName,proto3" json:"hostName,omitempty"`
	// Replica port number
	Port int32 `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	// Index id
	IndexId string `protobuf:"bytes,6,opt,name=indexId,proto3" json:"indexId,omitempty"`
	// Node name
	NodeName string `protobuf:"bytes,7,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
}

func (x *AddReplicaRequest) Reset() {
	*x = AddReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReplicaRequest) ProtoMessage() {}

func (x *AddReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReplicaRequest.ProtoReflect.Descriptor instead.
func (*AddReplicaRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{57}
}

func (x *AddReplicaRequest) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *AddReplicaRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

// Deprecated: Do not use.
func (x *AddReplicaRequest) GetReplicaId() int32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *AddReplicaRequest) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *AddReplicaRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AddReplicaRequest) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

func (x *AddReplicaRequest) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

// Response from Server for addReplica
type AddReplicaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Returns "ok" string on success
	Ok string `protobuf:"bytes,1,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *AddReplicaResponse) Reset() {
	*x = AddReplicaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReplicaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReplicaResponse) ProtoMessage() {}

func (x *AddReplicaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReplicaResponse.ProtoReflect.Descriptor instead.
func (*AddReplicaResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{58}
}

func (x *AddReplicaResponse) GetOk() string {
	if x != nil {
		return x.Ok
	}
	return ""
}

// Holds incRef'd file level details for one point-in-time segment infos on the primary node
type CopyState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InfoBytes length
	InfoBytesLength int32 `protobuf:"varint,1,opt,name=infoBytesLength,proto3" json:"infoBytesLength,omitempty"`
	// InfoBytes
	InfoBytes []byte `protobuf:"bytes,2,opt,name=infoBytes,proto3" json:"infoBytes,omitempty"`
	// Index generation
	Gen int64 `protobuf:"varint,3,opt,name=gen,proto3" json:"gen,omitempty"`
	// Index version
	Version int64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// Index file metadata
	FilesMetadata *FilesMetadata `protobuf:"bytes,5,opt,name=filesMetadata,proto3" json:"filesMetadata,omitempty"`
	// Completed merged files size
	CompletedMergeFilesSize int32 `protobuf:"varint,6,opt,name=completedMergeFilesSize,proto3" json:"completedMergeFilesSize,omitempty"`
	// Completed merged files
	CompletedMergeFiles []string `protobuf:"bytes,7,rep,name=completedMergeFiles,proto3" json:"completedMergeFiles,omitempty"`
	// Primary generation
	PrimaryGen int64 `protobuf:"varint,8,opt,name=primaryGen,proto3" json:"primaryGen,omitempty"`
}

func (x *CopyState) Reset() {
	*x = CopyState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyState) ProtoMessage() {}

func (x *CopyState) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyState.ProtoReflect.Descriptor instead.
func (*CopyState) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{59}
}

func (x *CopyState) GetInfoBytesLength() int32 {
	if x != nil {
		return x.InfoBytesLength
	}
	return 0
}

func (x *CopyState) GetInfoBytes() []byte {
	if x != nil {
		return x.InfoBytes
	}
	return nil
}

func (x *CopyState) GetGen() int64 {
	if x != nil {
		return x.Gen
	}
	return 0
}

func (x *CopyState) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CopyState) GetFilesMetadata() *FilesMetadata {
	if x != nil {
		return x.FilesMetadata
	}
	return nil
}

func (x *CopyState) GetCompletedMergeFilesSize() int32 {
	if x != nil {
		return x.CompletedMergeFilesSize
	}
	return 0
}

func (x *CopyState) GetCompletedMergeFiles() []string {
	if x != nil {
		return x.CompletedMergeFiles
	}
	return nil
}

func (x *CopyState) GetPrimaryGen() int64 {
	if x != nil {
		return x.PrimaryGen
	}
	return 0
}

// Metadata for multiple index files
type FilesMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumFiles     int32           `protobuf:"varint,1,opt,name=numFiles,proto3" json:"numFiles,omitempty"`        //number of files int this set
	FileMetadata []*FileMetadata `protobuf:"bytes,2,rep,name=fileMetadata,proto3" json:"fileMetadata,omitempty"` //list of metadata for each file
}

func (x *FilesMetadata) Reset() {
	*x = FilesMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesMetadata) ProtoMessage() {}

func (x *FilesMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesMetadata.ProtoReflect.Descriptor instead.
func (*FilesMetadata) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{60}
}

func (x *FilesMetadata) GetNumFiles() int32 {
	if x != nil {
		return x.NumFiles
	}
	return 0
}

func (x *FilesMetadata) GetFileMetadata() []*FileMetadata {
	if x != nil {
		return x.FileMetadata
	}
	return nil
}

// Metadata for a single index file
type FileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// File name
	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// File length
	Len int64 `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`
	// File checksum
	Checksum int64 `protobuf:"varint,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	// File header length
	HeaderLength int32 `protobuf:"varint,4,opt,name=headerLength,proto3" json:"headerLength,omitempty"`
	// File header
	Header []byte `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`
	// File footer length
	FooterLength int32 `protobuf:"varint,6,opt,name=footerLength,proto3" json:"footerLength,omitempty"`
	// File footer
	Footer []byte `protobuf:"bytes,7,opt,name=footer,proto3" json:"footer,omitempty"`
}

func (x *FileMetadata) Reset() {
	*x = FileMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadata) ProtoMessage() {}

func (x *FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadata.ProtoReflect.Descriptor instead.
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{61}
}

func (x *FileMetadata) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileMetadata) GetLen() int64 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *FileMetadata) GetChecksum() int64 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *FileMetadata) GetHeaderLength() int32 {
	if x != nil {
		return x.HeaderLength
	}
	return 0
}

func (x *FileMetadata) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FileMetadata) GetFooterLength() int32 {
	if x != nil {
		return x.FooterLength
	}
	return 0
}

func (x *FileMetadata) GetFooter() []byte {
	if x != nil {
		return x.Footer
	}
	return nil
}

// Primary invokes this on a replica to ask it to copy files
type CopyFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Magic number send on all requests since these are meant for internal communication only
	MagicNumber int32 `protobuf:"varint,1,opt,name=magicNumber,proto3" json:"magicNumber,omitempty"`
	// Index name
	IndexName string `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// Primary generation
	PrimaryGen int64 `protobuf:"varint,3,opt,name=primaryGen,proto3" json:"primaryGen,omitempty"`
	// Files metadata to copy
	FilesMetadata *FilesMetadata `protobuf:"bytes,4,opt,name=filesMetadata,proto3" json:"filesMetadata,omitempty"`
	// Index id
	IndexId string `protobuf:"bytes,5,opt,name=indexId,proto3" json:"indexId,omitempty"`
}

func (x *CopyFiles) Reset() {
	*x = CopyFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFiles) ProtoMessage() {}

func (x *CopyFiles) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFiles.ProtoReflect.Descriptor instead.
func (*CopyFiles) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{62}
}

func (x *CopyFiles) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *CopyFiles) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *CopyFiles) GetPrimaryGen() int64 {
	if x != nil {
		return x.PrimaryGen
	}
	return 0
}

func (x *CopyFiles) GetFilesMetadata() *FilesMetadata {
	if x != nil {
		return x.FilesMetadata
	}
	return nil
}

func (x *CopyFiles) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

// Replica invokes this on a primary to let primary know it needs the CopyState
type CopyStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Magic number send on all requests since these are meant for internal communication only
	MagicNumber int32 `protobuf:"varint,1,opt,name=magicNumber,proto3" json:"magicNumber,omitempty"`
	// Index name
	IndexName string `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// Replica id
	ReplicaId int32 `protobuf:"varint,3,opt,name=replicaId,proto3" json:"replicaId,omitempty"`
	// Index id
	IndexId string `protobuf:"bytes,4,opt,name=indexId,proto3" json:"indexId,omitempty"`
}

func (x *CopyStateRequest) Reset() {
	*x = CopyStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyStateRequest) ProtoMessage() {}

func (x *CopyStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyStateRequest.ProtoReflect.Descriptor instead.
func (*CopyStateRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{63}
}

func (x *CopyStateRequest) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *CopyStateRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *CopyStateRequest) GetReplicaId() int32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *CopyStateRequest) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

// Request to receive file data from primary
type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the file the replica wants primary to send
	FileName string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	// Starting offset in the file primary should start sending bytes from
	FpStart int64 `protobuf:"varint,2,opt,name=fpStart,proto3" json:"fpStart,omitempty"`
	// Index name these files belong to
	IndexName string `protobuf:"bytes,3,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// Sequence number to ack, only used for acked file copy
	AckSeqNum int32 `protobuf:"varint,4,opt,name=ackSeqNum,proto3" json:"ackSeqNum,omitempty"`
	// Index id
	IndexId string `protobuf:"bytes,5,opt,name=indexId,proto3" json:"indexId,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{64}
}

func (x *FileInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileInfo) GetFpStart() int64 {
	if x != nil {
		return x.FpStart
	}
	return 0
}

func (x *FileInfo) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *FileInfo) GetAckSeqNum() int32 {
	if x != nil {
		return x.AckSeqNum
	}
	return 0
}

func (x *FileInfo) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

// Chunk of file data
type RawFileChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw contents of file
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	// Sequence number for this chunk, only used for acked file copy
	SeqNum int32 `protobuf:"varint,2,opt,name=seqNum,proto3" json:"seqNum,omitempty"`
	// If this chunk should be acked, only used for acked file copy
	Ack bool `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *RawFileChunk) Reset() {
	*x = RawFileChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawFileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawFileChunk) ProtoMessage() {}

func (x *RawFileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawFileChunk.ProtoReflect.Descriptor instead.
func (*RawFileChunk) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{65}
}

func (x *RawFileChunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *RawFileChunk) GetSeqNum() int32 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (x *RawFileChunk) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

// Input to healthCheck
type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Healthcheck request
	Check bool `protobuf:"varint,1,opt,name=check,proto3" json:"check,omitempty"`
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{66}
}

func (x *HealthCheckRequest) GetCheck() bool {
	if x != nil {
		return x.Check
	}
	return false
}

// Response from Server for healthCheck
type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Response of healthcheck
	Health TransferStatusCode `protobuf:"varint,1,opt,name=health,proto3,enum=luceneserver.TransferStatusCode" json:"health,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{67}
}

func (x *HealthCheckResponse) GetHealth() TransferStatusCode {
	if x != nil {
		return x.Health
	}
	return TransferStatusCode_Unknown
}

// Input to readyCheck
type ReadyCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexNames string `protobuf:"bytes,1,opt,name=indexNames,proto3" json:"indexNames,omitempty"`
}

func (x *ReadyCheckRequest) Reset() {
	*x = ReadyCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadyCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyCheckRequest) ProtoMessage() {}

func (x *ReadyCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyCheckRequest.ProtoReflect.Descriptor instead.
func (*ReadyCheckRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{68}
}

func (x *ReadyCheckRequest) GetIndexNames() string {
	if x != nil {
		return x.IndexNames
	}
	return ""
}

// Response with transfer status
type TransferStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Response message
	Message string `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	// Transfer status code
	Code TransferStatusCode `protobuf:"varint,2,opt,name=Code,proto3,enum=luceneserver.TransferStatusCode" json:"Code,omitempty"`
}

func (x *TransferStatus) Reset() {
	*x = TransferStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferStatus) ProtoMessage() {}

func (x *TransferStatus) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferStatus.ProtoReflect.Descriptor instead.
func (*TransferStatus) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{69}
}

func (x *TransferStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TransferStatus) GetCode() TransferStatusCode {
	if x != nil {
		return x.Code
	}
	return TransferStatusCode_Unknown
}

// Input to newNRTPoint
type NewNRTPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Magic number send on all requests since these are meant for internal communication only
	MagicNumber int32 `protobuf:"varint,1,opt,name=magicNumber,proto3" json:"magicNumber,omitempty"`
	// Index name
	IndexName string `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// Primary generation
	PrimaryGen int64 `protobuf:"varint,3,opt,name=primaryGen,proto3" json:"primaryGen,omitempty"`
	// Version number when this SegmentInfos was generated
	Version int64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// Index id
	IndexId string `protobuf:"bytes,5,opt,name=indexId,proto3" json:"indexId,omitempty"`
}

func (x *NewNRTPoint) Reset() {
	*x = NewNRTPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewNRTPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewNRTPoint) ProtoMessage() {}

func (x *NewNRTPoint) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewNRTPoint.ProtoReflect.Descriptor instead.
func (*NewNRTPoint) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{70}
}

func (x *NewNRTPoint) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *NewNRTPoint) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *NewNRTPoint) GetPrimaryGen() int64 {
	if x != nil {
		return x.PrimaryGen
	}
	return 0
}

func (x *NewNRTPoint) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *NewNRTPoint) GetIndexId() string {
	if x != nil {
		return x.IndexId
	}
	return ""
}

// Index name with magic number
type IndexName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Magic number send on all requests since these are meant for internal communication only
	MagicNumber int32 `protobuf:"varint,1,opt,name=magicNumber,proto3" json:"magicNumber,omitempty"`
	// Index name
	IndexName string `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`
}

func (x *IndexName) Reset() {
	*x = IndexName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexName) ProtoMessage() {}

func (x *IndexName) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexName.ProtoReflect.Descriptor instead.
func (*IndexName) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{71}
}

func (x *IndexName) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *IndexName) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

// Index searcher version
type SearcherVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version recorded in the commit that the reader opened. This version is advanced every time a change
	// is made with IndexWriter.
	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// True if refresh happened
	DidRefresh bool `protobuf:"varint,2,opt,name=didRefresh,proto3" json:"didRefresh,omitempty"`
}

func (x *SearcherVersion) Reset() {
	*x = SearcherVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearcherVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearcherVersion) ProtoMessage() {}

func (x *SearcherVersion) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearcherVersion.ProtoReflect.Descriptor instead.
func (*SearcherVersion) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{72}
}

func (x *SearcherVersion) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SearcherVersion) GetDidRefresh() bool {
	if x != nil {
		return x.DidRefresh
	}
	return false
}

// Input to getNodes
type GetNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //name of the started index whose binary connections we wish to see
}

func (x *GetNodesRequest) Reset() {
	*x = GetNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesRequest) ProtoMessage() {}

func (x *GetNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesRequest.ProtoReflect.Descriptor instead.
func (*GetNodesRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{73}
}

func (x *GetNodesRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

// Response from Server for getNodes
type GetNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*NodeInfo `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"` //list of NodeInfo
}

func (x *GetNodesResponse) Reset() {
	*x = GetNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesResponse) ProtoMessage() {}

func (x *GetNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesResponse.ProtoReflect.Descriptor instead.
func (*GetNodesResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{74}
}

func (x *GetNodesResponse) GetNodes() []*NodeInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// Node information
type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name or ip address of the remote host that this node is connected to for binary replication
	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Port number of the remote host that this node is connected to for binary replication
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// Name of the remote node
	NodeName string `protobuf:"bytes,3,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{75}
}

func (x *NodeInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NodeInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *NodeInfo) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

// Input to deleteByQuery
type DeleteByQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name to delete documents from
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// Queries to match documents to be deleted
	Query []*Query `protobuf:"bytes,2,rep,name=query,proto3" json:"query,omitempty"`
}

func (x *DeleteByQueryRequest) Reset() {
	*x = DeleteByQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteByQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteByQueryRequest) ProtoMessage() {}

func (x *DeleteByQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteByQueryRequest.ProtoReflect.Descriptor instead.
func (*DeleteByQueryRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{76}
}

func (x *DeleteByQueryRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *DeleteByQueryRequest) GetQuery() []*Query {
	if x != nil {
		return x.Query
	}
	return nil
}

// Input to forceMerge
type ForceMergeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name whose segments must be force merged
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// Maximum number of segments after force merge
	MaxNumSegments int32 `protobuf:"varint,2,opt,name=maxNumSegments,proto3" json:"maxNumSegments,omitempty"`
	// If true, waits until the force merge is completed before returning a response. Otherwise starts force
	// merging in async and returns a response.
	DoWait bool `protobuf:"varint,3,opt,name=doWait,proto3" json:"doWait,omitempty"`
}

func (x *ForceMergeRequest) Reset() {
	*x = ForceMergeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceMergeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceMergeRequest) ProtoMessage() {}

func (x *ForceMergeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceMergeRequest.ProtoReflect.Descriptor instead.
func (*ForceMergeRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{77}
}

func (x *ForceMergeRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *ForceMergeRequest) GetMaxNumSegments() int32 {
	if x != nil {
		return x.MaxNumSegments
	}
	return 0
}

func (x *ForceMergeRequest) GetDoWait() bool {
	if x != nil {
		return x.DoWait
	}
	return false
}

// Response from Server for forceMerge
type ForceMergeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of force merge
	Status ForceMergeResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=luceneserver.ForceMergeResponse_Status" json:"status,omitempty"`
}

func (x *ForceMergeResponse) Reset() {
	*x = ForceMergeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceMergeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceMergeResponse) ProtoMessage() {}

func (x *ForceMergeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceMergeResponse.ProtoReflect.Descriptor instead.
func (*ForceMergeResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{78}
}

func (x *ForceMergeResponse) GetStatus() ForceMergeResponse_Status {
	if x != nil {
		return x.Status
	}
	return ForceMergeResponse_FORCE_MERGE_COMPLETED
}

// Input to forceMergeDeletes
type ForceMergeDeletesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name whose segments having deletes must be force merged
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// If true, waits until the force merge is completed before returning a response. Otherwise starts force
	// merging in async and returns a response.
	DoWait bool `protobuf:"varint,2,opt,name=doWait,proto3" json:"doWait,omitempty"`
}

func (x *ForceMergeDeletesRequest) Reset() {
	*x = ForceMergeDeletesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceMergeDeletesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceMergeDeletesRequest) ProtoMessage() {}

func (x *ForceMergeDeletesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceMergeDeletesRequest.ProtoReflect.Descriptor instead.
func (*ForceMergeDeletesRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{79}
}

func (x *ForceMergeDeletesRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *ForceMergeDeletesRequest) GetDoWait() bool {
	if x != nil {
		return x.DoWait
	}
	return false
}

// Response from Server for forceMergeDeletes
type ForceMergeDeletesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of force merge deletes
	Status ForceMergeDeletesResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=luceneserver.ForceMergeDeletesResponse_Status" json:"status,omitempty"`
}

func (x *ForceMergeDeletesResponse) Reset() {
	*x = ForceMergeDeletesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceMergeDeletesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceMergeDeletesResponse) ProtoMessage() {}

func (x *ForceMergeDeletesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceMergeDeletesResponse.ProtoReflect.Descriptor instead.
func (*ForceMergeDeletesResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{80}
}

func (x *ForceMergeDeletesResponse) GetStatus() ForceMergeDeletesResponse_Status {
	if x != nil {
		return x.Status
	}
	return ForceMergeDeletesResponse_FORCE_MERGE_DELETES_COMPLETED
}

// Index offline settings
type IndexSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Largest merged segment size to cache in RAMDirectory, default: 5.0MB
	NrtCachingDirectoryMaxMergeSizeMB *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=nrtCachingDirectoryMaxMergeSizeMB,proto3" json:"nrtCachingDirectoryMaxMergeSizeMB,omitempty"`
	// Largest overall size for all files cached in NRTCachingDirectory, default: 60.0MB
	NrtCachingDirectoryMaxSizeMB *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=nrtCachingDirectoryMaxSizeMB,proto3" json:"nrtCachingDirectoryMaxSizeMB,omitempty"`
	// How many merge threads to allow at once
	ConcurrentMergeSchedulerMaxThreadCount *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=concurrentMergeSchedulerMaxThreadCount,proto3" json:"concurrentMergeSchedulerMaxThreadCount,omitempty"`
	// Maximum backlog of pending merges before indexing threads are stalled
	ConcurrentMergeSchedulerMaxMergeCount *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=concurrentMergeSchedulerMaxMergeCount,proto3" json:"concurrentMergeSchedulerMaxMergeCount,omitempty"`
	// Index time sorting; can only be written once", SearchHandler.SORT_TYPE
	IndexSort *SortFields `protobuf:"bytes,5,opt,name=indexSort,proto3" json:"indexSort,omitempty"`
	// Turn on/off the merge scheduler's auto throttling, default: off
	IndexMergeSchedulerAutoThrottle *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=indexMergeSchedulerAutoThrottle,proto3" json:"indexMergeSchedulerAutoThrottle,omitempty"`
	// Base Directory implementation to use either one of the core implementations
	// (FSDirectory, MMapDirectory, NIOFSDirectory, or a fully qualified path to a Directory
	// implementation that has a public constructor taking a single File argument default: FSDirectory.
	// This implementation will be wrapped by NRTCachingDirectory, if enabled and not using MMappedDirectory.
	Directory *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *IndexSettings) Reset() {
	*x = IndexSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexSettings) ProtoMessage() {}

func (x *IndexSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexSettings.ProtoReflect.Descriptor instead.
func (*IndexSettings) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{81}
}

func (x *IndexSettings) GetNrtCachingDirectoryMaxMergeSizeMB() *wrapperspb.DoubleValue {
	if x != nil {
		return x.NrtCachingDirectoryMaxMergeSizeMB
	}
	return nil
}

func (x *IndexSettings) GetNrtCachingDirectoryMaxSizeMB() *wrapperspb.DoubleValue {
	if x != nil {
		return x.NrtCachingDirectoryMaxSizeMB
	}
	return nil
}

func (x *IndexSettings) GetConcurrentMergeSchedulerMaxThreadCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.ConcurrentMergeSchedulerMaxThreadCount
	}
	return nil
}

func (x *IndexSettings) GetConcurrentMergeSchedulerMaxMergeCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.ConcurrentMergeSchedulerMaxMergeCount
	}
	return nil
}

func (x *IndexSettings) GetIndexSort() *SortFields {
	if x != nil {
		return x.IndexSort
	}
	return nil
}

func (x *IndexSettings) GetIndexMergeSchedulerAutoThrottle() *wrapperspb.BoolValue {
	if x != nil {
		return x.IndexMergeSchedulerAutoThrottle
	}
	return nil
}

func (x *IndexSettings) GetDirectory() *wrapperspb.StringValue {
	if x != nil {
		return x.Directory
	}
	return nil
}

// Index live settings
type IndexLiveSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Longest time to wait before reopening IndexSearcher (i.e., periodic background reopen), default: 1.0
	MaxRefreshSec *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=maxRefreshSec,proto3" json:"maxRefreshSec,omitempty"`
	// Shortest time to wait before reopening IndexSearcher (i.e., when a search is waiting for a specific indexGen),
	// default: 0.05
	MinRefreshSec *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=minRefreshSec,proto3" json:"minRefreshSec,omitempty"`
	// Non-current searchers older than this are pruned, default: 60.0
	MaxSearcherAgeSec *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=maxSearcherAgeSec,proto3" json:"maxSearcherAgeSec,omitempty"`
	// Size (in MB) of IndexWriter's RAM buffer, default: 16.0
	IndexRamBufferSizeMB *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=indexRamBufferSizeMB,proto3" json:"indexRamBufferSizeMB,omitempty"`
	// Max number of documents to add at a time, default: 100
	AddDocumentsMaxBufferLen *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=addDocumentsMaxBufferLen,proto3" json:"addDocumentsMaxBufferLen,omitempty"`
	// Maximum number of documents allowed in a parallel search slice, default: 250,000
	SliceMaxDocs *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=sliceMaxDocs,proto3" json:"sliceMaxDocs,omitempty"`
	// Maximum number of segments allowed in a parallel search slice, default: 5
	SliceMaxSegments *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=sliceMaxSegments,proto3" json:"sliceMaxSegments,omitempty"`
	// Number of virtual shards to use for this index, default: 1
	VirtualShards *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=virtualShards,proto3" json:"virtualShards,omitempty"`
	// Maximum sized segment to produce during normal merging, default: 5GB
	MaxMergedSegmentMB *wrapperspb.Int32Value `protobuf:"bytes,9,opt,name=maxMergedSegmentMB,proto3" json:"maxMergedSegmentMB,omitempty"`
	// Number of segments per tier used by TieredMergePolicy, default: 10
	SegmentsPerTier *wrapperspb.Int32Value `protobuf:"bytes,10,opt,name=segmentsPerTier,proto3" json:"segmentsPerTier,omitempty"`
	// Timeout value to used when not specified in the search request, or 0 for no timeout, default: 0
	DefaultSearchTimeoutSec *wrapperspb.DoubleValue `protobuf:"bytes,11,opt,name=defaultSearchTimeoutSec,proto3" json:"defaultSearchTimeoutSec,omitempty"`
	// Timeout check every value to use when not specified in the search request, or 0 for none, default: 0
	DefaultSearchTimeoutCheckEvery *wrapperspb.Int32Value `protobuf:"bytes,12,opt,name=defaultSearchTimeoutCheckEvery,proto3" json:"defaultSearchTimeoutCheckEvery,omitempty"`
	// Terminate after value to use when not specified in the search request, or 0 for none, default: 0
	DefaultTerminateAfter *wrapperspb.Int32Value `protobuf:"bytes,13,opt,name=defaultTerminateAfter,proto3" json:"defaultTerminateAfter,omitempty"`
	// Merge precopy would be stopped after this time, or 0 for no checks, default: 0
	MaxMergePreCopyDurationSec *wrapperspb.UInt64Value `protobuf:"bytes,14,opt,name=maxMergePreCopyDurationSec,proto3" json:"maxMergePreCopyDurationSec,omitempty"`
	// Collect and publish additional index metrics, which may be more expensive in terms of volume, memory
	// and/or compute, default: false
	VerboseMetrics *wrapperspb.BoolValue `protobuf:"bytes,15,opt,name=verboseMetrics,proto3" json:"verboseMetrics,omitempty"`
	// If fetch parallelism should be done by groups of fields instead of document, default: false
	ParallelFetchByField *wrapperspb.BoolValue `protobuf:"bytes,16,opt,name=parallelFetchByField,proto3" json:"parallelFetchByField,omitempty"`
	// The number of documents/fields per parallel fetch task, default: 50
	ParallelFetchChunkSize *wrapperspb.Int32Value `protobuf:"bytes,17,opt,name=parallelFetchChunkSize,proto3" json:"parallelFetchChunkSize,omitempty"`
}

func (x *IndexLiveSettings) Reset() {
	*x = IndexLiveSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexLiveSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexLiveSettings) ProtoMessage() {}

func (x *IndexLiveSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexLiveSettings.ProtoReflect.Descriptor instead.
func (*IndexLiveSettings) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{82}
}

func (x *IndexLiveSettings) GetMaxRefreshSec() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxRefreshSec
	}
	return nil
}

func (x *IndexLiveSettings) GetMinRefreshSec() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MinRefreshSec
	}
	return nil
}

func (x *IndexLiveSettings) GetMaxSearcherAgeSec() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxSearcherAgeSec
	}
	return nil
}

func (x *IndexLiveSettings) GetIndexRamBufferSizeMB() *wrapperspb.DoubleValue {
	if x != nil {
		return x.IndexRamBufferSizeMB
	}
	return nil
}

func (x *IndexLiveSettings) GetAddDocumentsMaxBufferLen() *wrapperspb.Int32Value {
	if x != nil {
		return x.AddDocumentsMaxBufferLen
	}
	return nil
}

func (x *IndexLiveSettings) GetSliceMaxDocs() *wrapperspb.Int32Value {
	if x != nil {
		return x.SliceMaxDocs
	}
	return nil
}

func (x *IndexLiveSettings) GetSliceMaxSegments() *wrapperspb.Int32Value {
	if x != nil {
		return x.SliceMaxSegments
	}
	return nil
}

func (x *IndexLiveSettings) GetVirtualShards() *wrapperspb.Int32Value {
	if x != nil {
		return x.VirtualShards
	}
	return nil
}

func (x *IndexLiveSettings) GetMaxMergedSegmentMB() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxMergedSegmentMB
	}
	return nil
}

func (x *IndexLiveSettings) GetSegmentsPerTier() *wrapperspb.Int32Value {
	if x != nil {
		return x.SegmentsPerTier
	}
	return nil
}

func (x *IndexLiveSettings) GetDefaultSearchTimeoutSec() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DefaultSearchTimeoutSec
	}
	return nil
}

func (x *IndexLiveSettings) GetDefaultSearchTimeoutCheckEvery() *wrapperspb.Int32Value {
	if x != nil {
		return x.DefaultSearchTimeoutCheckEvery
	}
	return nil
}

func (x *IndexLiveSettings) GetDefaultTerminateAfter() *wrapperspb.Int32Value {
	if x != nil {
		return x.DefaultTerminateAfter
	}
	return nil
}

func (x *IndexLiveSettings) GetMaxMergePreCopyDurationSec() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MaxMergePreCopyDurationSec
	}
	return nil
}

func (x *IndexLiveSettings) GetVerboseMetrics() *wrapperspb.BoolValue {
	if x != nil {
		return x.VerboseMetrics
	}
	return nil
}

func (x *IndexLiveSettings) GetParallelFetchByField() *wrapperspb.BoolValue {
	if x != nil {
		return x.ParallelFetchByField
	}
	return nil
}

func (x *IndexLiveSettings) GetParallelFetchChunkSize() *wrapperspb.Int32Value {
	if x != nil {
		return x.ParallelFetchChunkSize
	}
	return nil
}

// Index state
type IndexStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the index
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// State version generation
	Gen int64 `protobuf:"varint,2,opt,name=gen,proto3" json:"gen,omitempty"`
	// If this index has ever been committed
	Committed bool `protobuf:"varint,3,opt,name=committed,proto3" json:"committed,omitempty"`
	// Index settings
	Settings *IndexSettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	// Index live settings
	LiveSettings *IndexLiveSettings `protobuf:"bytes,5,opt,name=liveSettings,proto3" json:"liveSettings,omitempty"`
	// Registered fields
	Fields map[string]*Field `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IndexStateInfo) Reset() {
	*x = IndexStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexStateInfo) ProtoMessage() {}

func (x *IndexStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexStateInfo.ProtoReflect.Descriptor instead.
func (*IndexStateInfo) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{83}
}

func (x *IndexStateInfo) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *IndexStateInfo) GetGen() int64 {
	if x != nil {
		return x.Gen
	}
	return 0
}

func (x *IndexStateInfo) GetCommitted() bool {
	if x != nil {
		return x.Committed
	}
	return false
}

func (x *IndexStateInfo) GetSettings() *IndexSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *IndexStateInfo) GetLiveSettings() *IndexLiveSettings {
	if x != nil {
		return x.LiveSettings
	}
	return nil
}

func (x *IndexStateInfo) GetFields() map[string]*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Per index information stored in global state
type IndexGlobalState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for index (yyyyMMddHHmmssSSS formatted date-time string)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// If index should be started
	Started bool `protobuf:"varint,2,opt,name=started,proto3" json:"started,omitempty"`
}

func (x *IndexGlobalState) Reset() {
	*x = IndexGlobalState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexGlobalState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexGlobalState) ProtoMessage() {}

func (x *IndexGlobalState) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexGlobalState.ProtoReflect.Descriptor instead.
func (*IndexGlobalState) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{84}
}

func (x *IndexGlobalState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IndexGlobalState) GetStarted() bool {
	if x != nil {
		return x.Started
	}
	return false
}

// Cluster global state
type GlobalStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State version generation
	Gen int64 `protobuf:"varint,1,opt,name=gen,proto3" json:"gen,omitempty"`
	// Global state for indices
	Indices map[string]*IndexGlobalState `protobuf:"bytes,2,rep,name=indices,proto3" json:"indices,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GlobalStateInfo) Reset() {
	*x = GlobalStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalStateInfo) ProtoMessage() {}

func (x *GlobalStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalStateInfo.ProtoReflect.Descriptor instead.
func (*GlobalStateInfo) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{85}
}

func (x *GlobalStateInfo) GetGen() int64 {
	if x != nil {
		return x.Gen
	}
	return 0
}

func (x *GlobalStateInfo) GetIndices() map[string]*IndexGlobalState {
	if x != nil {
		return x.Indices
	}
	return nil
}

// Input to custom
type CustomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID defined for custom requests in a plugin
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Custom path that is defined in a plugin that maps to a route
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Parameters that can be processed by the plugin at the specified path
	Params map[string]string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CustomRequest) Reset() {
	*x = CustomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomRequest) ProtoMessage() {}

func (x *CustomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomRequest.ProtoReflect.Descriptor instead.
func (*CustomRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{86}
}

func (x *CustomRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CustomRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CustomRequest) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// Response from Server for custom
type CustomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response map[string]string `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Custom response sent by the plugin
}

func (x *CustomResponse) Reset() {
	*x = CustomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomResponse) ProtoMessage() {}

func (x *CustomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomResponse.ProtoReflect.Descriptor instead.
func (*CustomResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{87}
}

func (x *CustomResponse) GetResponse() map[string]string {
	if x != nil {
		return x.Response
	}
	return nil
}

// Wrapper object to represent each field as a multivalued field.
type AddDocumentRequest_MultiValuedField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of values for this field
	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	// Facet paths/hierarchy to bucket these values by, if indexed field is of type Facet.HIERARCHY
	FaceHierarchyPaths []*FacetHierarchyPath `protobuf:"bytes,2,rep,name=faceHierarchyPaths,proto3" json:"faceHierarchyPaths,omitempty"`
}

func (x *AddDocumentRequest_MultiValuedField) Reset() {
	*x = AddDocumentRequest_MultiValuedField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDocumentRequest_MultiValuedField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDocumentRequest_MultiValuedField) ProtoMessage() {}

func (x *AddDocumentRequest_MultiValuedField) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDocumentRequest_MultiValuedField.ProtoReflect.Descriptor instead.
func (*AddDocumentRequest_MultiValuedField) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{17, 0}
}

func (x *AddDocumentRequest_MultiValuedField) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AddDocumentRequest_MultiValuedField) GetFaceHierarchyPaths() []*FacetHierarchyPath {
	if x != nil {
		return x.FaceHierarchyPaths
	}
	return nil
}

var File_yelp_nrtsearch_luceneserver_proto protoreflect.FileDescriptor

var file_yelp_nrtsearch_luceneserver_proto_rawDesc = []byte{
	0x0a, 0x21, 0x79, 0x65, 0x6c, 0x70, 0x2f, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2f, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x1a, 0x1b, 0x79, 0x65, 0x6c, 0x70, 0x2f, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x79, 0x65, 0x6c, 0x70, 0x2f, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x02, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x43,
	0x0a, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x22, 0x31, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x05, 0x0a, 0x13, 0x4c, 0x69,
	0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x53, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x53, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x69,
	0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x11, 0x6d,
	0x61, 0x78, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x72, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x61, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x4d,
	0x42, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x61,
	0x6d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x12, 0x3a, 0x0a,
	0x18, 0x61, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x61, 0x78,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x18, 0x61, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x61, 0x78,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x78, 0x44, 0x6f, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x2a, 0x0a,
	0x10, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x78, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x42, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x42, 0x12,
	0x28, 0x0a, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x54, 0x69,
	0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x50, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x53, 0x65, 0x63, 0x12, 0x46, 0x0a, 0x1e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x45, 0x76, 0x65, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x22, 0x32, 0x0a, 0x14, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a,
	0x0c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x22, 0x5d, 0x0a, 0x16, 0x4c, 0x69, 0x76, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x76,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xd9, 0x0d, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44,
	0x6f, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x12, 0x1e, 0x0a, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65,
	0x12, 0x18, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x09,
	0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x6f, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x6f, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0e,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x64, 0x6f, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x08,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x66, 0x61, 0x63, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x66, 0x61, 0x63,
	0x65, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x61, 0x63, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x66, 0x61, 0x63, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x14, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x43, 0x0a, 0x10, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x10, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x65, 0x61, 0x67, 0x65, 0x72, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x61, 0x67, 0x65,
	0x72, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x12, 0x2a, 0x0a,
	0x10, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x65, 0x61, 0x67,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65, 0x61, 0x67,
	0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53,
	0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x59, 0x0a, 0x15, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x15, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4d, 0x0a, 0x11,
	0x74, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x74, 0x65, 0x78, 0x74, 0x44, 0x6f,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4d, 0x0a, 0x11, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x14, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47,
	0x61, 0x70, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x14, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x61, 0x70,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x62, 0x6f,
	0x76, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0b, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x41, 0x62, 0x6f, 0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x61, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x62,
	0x6f, 0x76, 0x65, 0x22, 0xe1, 0x03, 0x0a, 0x15, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x17, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x68, 0x6e, 0x73, 0x77, 0x5f, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x68, 0x6e, 0x73, 0x77, 0x4d, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x68, 0x6e, 0x73, 0x77, 0x5f, 0x65, 0x66, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x02, 0x52, 0x12, 0x68, 0x6e, 0x73, 0x77, 0x45, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x03, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x1d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x1b, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65,
	0x64, 0x42, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x11, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x6e, 0x73, 0x77, 0x5f, 0x6d,
	0x42, 0x17, 0x0a, 0x15, 0x5f, 0x68, 0x6e, 0x73, 0x77, 0x5f, 0x65, 0x66, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x65,
	0x72, 0x67, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x42, 0x20, 0x0a, 0x1e, 0x5f,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x62, 0x69, 0x74, 0x73,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5a, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x22, 0x2e, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x8d, 0x05, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x61,
	0x78, 0x4d, 0x42, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x4d, 0x42, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x4c, 0x0a, 0x21, 0x6e, 0x72, 0x74, 0x43, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x21, 0x6e, 0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x4d, 0x42, 0x12, 0x42, 0x0a, 0x1c, 0x6e, 0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a,
	0x65, 0x4d, 0x42, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x6e, 0x72, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61,
	0x78, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x12, 0x56, 0x0a, 0x26, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x26, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x54, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6f,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a,
	0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f,
	0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x12,
	0x24, 0x0a, 0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x73, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x22, 0x2e, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6a, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x56,
	0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0x4d, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x32, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x9f,
	0x02, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x22, 0x33, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x32,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x61, 0x78, 0x44, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61,
	0x78, 0x44, 0x6f, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x53, 0x22, 0xe2, 0x02, 0x0a,
	0x12, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x44, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x7a, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x50, 0x0a, 0x12, 0x66, 0x61, 0x63, 0x65, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63,
	0x68, 0x79, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x63,
	0x65, 0x74, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x50, 0x61, 0x74, 0x68, 0x52,
	0x12, 0x66, 0x61, 0x63, 0x65, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x1a, 0x6c, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x2a, 0x0a, 0x12, 0x46, 0x61, 0x63, 0x65, 0x74, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a,
	0x13, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x53, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x53, 0x22, 0x2d, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x40, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x67, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x49, 0x64, 0x22, 0x2c, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xaf, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e,
	0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x69, 0x72, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x52, 0x08, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x72, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x73,
	0x12, 0x40, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x72, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x72, 0x22, 0x40, 0x0a, 0x08, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6e, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75,
	0x6d, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6c,
	0x65, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x75, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x39, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x1f, 0x0a, 0x0d, 0x44, 0x75, 0x6d, 0x6d, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x30, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65,
	0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x59, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x72, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a,
	0x0d, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49,
	0x64, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x66, 0x0a,
	0x0a, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x47, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x47, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x6f, 0x6e,
	0x6f, 0x6d, 0x79, 0x47, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x61,
	0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x47, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x47, 0x65, 0x6e, 0x22, 0x70, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x52, 0x0a, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x38, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x47, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x65, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x65, 0x6e,
	0x73, 0x22, 0xbf, 0x01, 0x0a, 0x1b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x57, 0x61, 0x72, 0x6d,
	0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x75, 0x6d,
	0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x75,
	0x70, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x57, 0x61, 0x72,
	0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x0f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x12, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0c,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x11, 0x0a, 0x0f, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72,
	0x61, 0x6c, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x13, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x40, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x2c, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32,
	0x0a, 0x11, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x53, 0x0a, 0x12, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0xce, 0x02, 0x0a, 0x09,
	0x43, 0x6f, 0x70, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x67, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x38, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x22, 0x6b, 0x0a, 0x0d,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x66, 0x69, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x66, 0x69, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd0, 0x01, 0x0a, 0x0c, 0x46, 0x69,
	0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x22, 0xc8, 0x01, 0x0a,
	0x09, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x70, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x66, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x71, 0x4e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x71,
	0x4e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x22, 0x52, 0x0a,
	0x0c, 0x52, 0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63,
	0x6b, 0x22, 0x2a, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x4f, 0x0a,
	0x13, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x33,
	0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0x60, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x4e, 0x52, 0x54,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x47, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x47, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x09, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x64, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x64, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x22, 0x2f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x56, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5f,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22,
	0x71, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4e,
	0x75, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f,
	0x57, 0x61, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x6f, 0x57, 0x61,
	0x69, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x12, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x3e, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x45,
	0x52, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x53,
	0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0x50, 0x0a, 0x18, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x22, 0xb3, 0x01, 0x0a,
	0x19, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x4e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x21, 0x0a, 0x1d, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x22, 0x9f, 0x05, 0x0a, 0x0d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x6a, 0x0a, 0x21, 0x6e, 0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x6e,
	0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42,
	0x12, 0x60, 0x0a, 0x1c, 0x6e, 0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x6e, 0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65,
	0x4d, 0x42, 0x12, 0x73, 0x0a, 0x26, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x61,
	0x78, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x26, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x71, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x25, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x78,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x72,
	0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6f,
	0x72, 0x74, 0x12, 0x64, 0x0a, 0x1f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x68, 0x72,
	0x6f, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f,
	0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x22, 0xca, 0x0a, 0x0a, 0x11, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69,
	0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x61,
	0x78, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x63, 0x12, 0x42,
	0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53,
	0x65, 0x63, 0x12, 0x4a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6d, 0x61, 0x78,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63, 0x12, 0x50,
	0x0a, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x61, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x61, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42,
	0x12, 0x57, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x4d, 0x61, 0x78, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x18, 0x61, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x61, 0x78,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x6c, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x78, 0x44, 0x6f, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x6c,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x4b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x42, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x42, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50,
	0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x17, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x53, 0x65, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x12, 0x63, 0x0a, 0x1e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45,
	0x76, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x45, 0x76, 0x65, 0x72, 0x79, 0x12, 0x51, 0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x5c, 0x0a, 0x1a, 0x6d, 0x61,
	0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1a, 0x6d, 0x61,
	0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x62,
	0x6f, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x76, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4e, 0x0a, 0x14,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x79, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x42, 0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x53, 0x0a, 0x16,
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x22, 0xee, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x67, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x6c,
	0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x40, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x1a, 0x4e, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x3c, 0x0a, 0x10, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x67, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x5a, 0x0a, 0x0c,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x34,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf, 0x01, 0x0a, 0x0d, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x3f,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a,
	0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x0e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x2a, 0xe9, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x41, 0x54, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45,
	0x58, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x49,
	0x4e, 0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x05,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x4c,
	0x41, 0x54, 0x5f, 0x4c, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x52, 0x54, 0x55,
	0x41, 0x4c, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x0b, 0x12, 0x07,
	0x0a, 0x03, 0x5f, 0x49, 0x44, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4f, 0x4c, 0x59, 0x47,
	0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x0e,
	0x12, 0x0a, 0x0a, 0x06, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x0f, 0x12, 0x13, 0x0a, 0x0f,
	0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53, 0x54, 0x10,
	0x10, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x11, 0x2a, 0x71,
	0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x4f, 0x43, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4f, 0x43, 0x53, 0x5f, 0x46, 0x52,
	0x45, 0x51, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x43, 0x53, 0x5f, 0x46, 0x52,
	0x45, 0x51, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x03, 0x12,
	0x20, 0x0a, 0x1c, 0x44, 0x4f, 0x43, 0x53, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x53, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x53, 0x10,
	0x04, 0x2a, 0x84, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x72, 0x6d, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x73, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x56, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x45, 0x52, 0x4d, 0x53, 0x10, 0x01,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x52, 0x4d, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49,
	0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x45, 0x52, 0x4d, 0x53, 0x5f, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x53,
	0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x45, 0x52, 0x4d, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x50, 0x41,
	0x59, 0x4c, 0x4f, 0x41, 0x44, 0x53, 0x10, 0x04, 0x2a, 0x61, 0x0a, 0x09, 0x46, 0x61, 0x63, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x46, 0x41, 0x43, 0x45,
	0x54, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0d,
	0x0a, 0x09, 0x48, 0x49, 0x45, 0x52, 0x41, 0x52, 0x43, 0x48, 0x59, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x03,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44,
	0x4f, 0x43, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x10, 0x04, 0x2a, 0x7b, 0x0a, 0x11, 0x54,
	0x65, 0x78, 0x74, 0x44, 0x6f, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x20, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x44, 0x4f, 0x43, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x44,
	0x4f, 0x43, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x45, 0x58, 0x54, 0x5f,
	0x44, 0x4f, 0x43, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x46, 0x0a, 0x11, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x56, 0x45, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x59, 0x54, 0x45, 0x10, 0x01,
	0x2a, 0x30, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54, 0x41, 0x4e,
	0x44, 0x41, 0x4c, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x4d,
	0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x10, 0x02, 0x2a, 0x44, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x32, 0x9f, 0x20, 0x0a, 0x0c, 0x4c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0c, 0x6c, 0x69,
	0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x76,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0x9a, 0x01, 0x0a, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x56, 0x32, 0x12, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x32,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x11, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1f, 0x12, 0x1d, 0x2f,
	0x76, 0x32, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x6f, 0x0a, 0x0e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x6b, 0x0a,
	0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x84,
	0x01, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x32, 0x12, 0x1f, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x0c, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x6b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a,
	0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x56, 0x32, 0x12, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x32, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22,
	0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0b, 0x72, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0c, 0x61, 0x64, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x5f,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x28, 0x01, 0x12, 0x5e,
	0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x5a,
	0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x3a,
	0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x5a, 0x0a, 0x06, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x54, 0x0a, 0x08, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x56, 0x32, 0x12, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a,
	0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a,
	0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x62, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x79, 0x0a, 0x09, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x27, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x61, 0x6c, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x7b, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x3a, 0x01, 0x2a, 0x12, 0x7f, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x24, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x9d, 0x01, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x65, 0x6e,
	0x12, 0x26, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x47, 0x65,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x94, 0x01, 0x0a, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x57, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x29,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x57, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x57,
	0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f,
	0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x60, 0x0a, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12,
	0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x6f,
	0x0a, 0x0b, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x6f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x7d,
	0x12, 0x8b, 0x01, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x1e,
	0x12, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x61,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x12, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x78, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1f, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x5a, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x64, 0x79, 0x2f, 0x7b,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x7d, 0x12, 0x50, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x74, 0x74, 0x70,
	0x42, 0x6f, 0x64, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5b, 0x0a,
	0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x6b, 0x0a, 0x0a, 0x66, 0x6f,
	0x72, 0x63, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x12, 0x26, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x66, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x1b, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22,
	0x16, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x7b, 0x70, 0x61, 0x74, 0x68, 0x7d, 0x3a, 0x01, 0x2a, 0x32, 0x9c, 0x06, 0x0a, 0x11, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x52, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x76, 0x43, 0x6f, 0x70, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x1c, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x28, 0x01, 0x12, 0x45, 0x0a,
	0x0b, 0x72, 0x65, 0x63, 0x76, 0x52, 0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x76, 0x52, 0x61, 0x77, 0x46,
	0x69, 0x6c, 0x65, 0x56, 0x32, 0x12, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1a, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x77,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x46, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x70, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x4e, 0x52,
	0x54, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x4e, 0x52, 0x54, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4e, 0x52, 0x54, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1d, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x19,
	0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x56, 0x0a, 0x1e, 0x63, 0x6f, 0x6d,
	0x2e, 0x79, 0x65, 0x6c, 0x70, 0x2e, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x42, 0x11, 0x4c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x19, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x59, 0x65, 0x6c,
	0x70, 0x2f, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0xa2, 0x02, 0x03, 0x48, 0x4c,
	0x57, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yelp_nrtsearch_luceneserver_proto_rawDescOnce sync.Once
	file_yelp_nrtsearch_luceneserver_proto_rawDescData = file_yelp_nrtsearch_luceneserver_proto_rawDesc
)

func file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP() []byte {
	file_yelp_nrtsearch_luceneserver_proto_rawDescOnce.Do(func() {
		file_yelp_nrtsearch_luceneserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_yelp_nrtsearch_luceneserver_proto_rawDescData)
	})
	return file_yelp_nrtsearch_luceneserver_proto_rawDescData
}

var file_yelp_nrtsearch_luceneserver_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_yelp_nrtsearch_luceneserver_proto_msgTypes = make([]protoimpl.MessageInfo, 94)
var file_yelp_nrtsearch_luceneserver_proto_goTypes = []interface{}{
	(FieldType)(0),                              // 0: luceneserver.FieldType
	(IndexOptions)(0),                           // 1: luceneserver.IndexOptions
	(TermVectors)(0),                            // 2: luceneserver.TermVectors
	(FacetType)(0),                              // 3: luceneserver.FacetType
	(TextDocValuesType)(0),                      // 4: luceneserver.TextDocValuesType
	(VectorElementType)(0),                      // 5: luceneserver.VectorElementType
	(Mode)(0),                                   // 6: luceneserver.Mode
	(TransferStatusCode)(0),                     // 7: luceneserver.TransferStatusCode
	(ForceMergeResponse_Status)(0),              // 8: luceneserver.ForceMergeResponse.Status
	(ForceMergeDeletesResponse_Status)(0),       // 9: luceneserver.ForceMergeDeletesResponse.Status
	(*CreateIndexRequest)(nil),                  // 10: luceneserver.CreateIndexRequest
	(*CreateIndexResponse)(nil),                 // 11: luceneserver.CreateIndexResponse
	(*LiveSettingsRequest)(nil),                 // 12: luceneserver.LiveSettingsRequest
	(*LiveSettingsResponse)(nil),                // 13: luceneserver.LiveSettingsResponse
	(*LiveSettingsV2Request)(nil),               // 14: luceneserver.LiveSettingsV2Request
	(*LiveSettingsV2Response)(nil),              // 15: luceneserver.LiveSettingsV2Response
	(*Field)(nil),                               // 16: luceneserver.Field
	(*VectorIndexingOptions)(nil),               // 17: luceneserver.VectorIndexingOptions
	(*FieldDefRequest)(nil),                     // 18: luceneserver.FieldDefRequest
	(*FieldDefResponse)(nil),                    // 19: luceneserver.FieldDefResponse
	(*SettingsRequest)(nil),                     // 20: luceneserver.SettingsRequest
	(*SettingsResponse)(nil),                    // 21: luceneserver.SettingsResponse
	(*SettingsV2Request)(nil),                   // 22: luceneserver.SettingsV2Request
	(*SettingsV2Response)(nil),                  // 23: luceneserver.SettingsV2Response
	(*StartIndexRequest)(nil),                   // 24: luceneserver.StartIndexRequest
	(*StartIndexV2Request)(nil),                 // 25: luceneserver.StartIndexV2Request
	(*StartIndexResponse)(nil),                  // 26: luceneserver.StartIndexResponse
	(*AddDocumentRequest)(nil),                  // 27: luceneserver.AddDocumentRequest
	(*FacetHierarchyPath)(nil),                  // 28: luceneserver.FacetHierarchyPath
	(*AddDocumentResponse)(nil),                 // 29: luceneserver.AddDocumentResponse
	(*RefreshRequest)(nil),                      // 30: luceneserver.RefreshRequest
	(*RefreshResponse)(nil),                     // 31: luceneserver.RefreshResponse
	(*CommitRequest)(nil),                       // 32: luceneserver.CommitRequest
	(*CommitResponse)(nil),                      // 33: luceneserver.CommitResponse
	(*StatsRequest)(nil),                        // 34: luceneserver.StatsRequest
	(*StatsResponse)(nil),                       // 35: luceneserver.StatsResponse
	(*Taxonomy)(nil),                            // 36: luceneserver.Taxonomy
	(*Searcher)(nil),                            // 37: luceneserver.Searcher
	(*DeleteAllDocumentsRequest)(nil),           // 38: luceneserver.DeleteAllDocumentsRequest
	(*DeleteAllDocumentsResponse)(nil),          // 39: luceneserver.DeleteAllDocumentsResponse
	(*DeleteIndexRequest)(nil),                  // 40: luceneserver.DeleteIndexRequest
	(*DeleteIndexResponse)(nil),                 // 41: luceneserver.DeleteIndexResponse
	(*DummyResponse)(nil),                       // 42: luceneserver.DummyResponse
	(*StopIndexRequest)(nil),                    // 43: luceneserver.StopIndexRequest
	(*ReloadStateRequest)(nil),                  // 44: luceneserver.ReloadStateRequest
	(*ReloadStateResponse)(nil),                 // 45: luceneserver.ReloadStateResponse
	(*CreateSnapshotRequest)(nil),               // 46: luceneserver.CreateSnapshotRequest
	(*CreateSnapshotResponse)(nil),              // 47: luceneserver.CreateSnapshotResponse
	(*SnapshotId)(nil),                          // 48: luceneserver.SnapshotId
	(*ReleaseSnapshotRequest)(nil),              // 49: luceneserver.ReleaseSnapshotRequest
	(*ReleaseSnapshotResponse)(nil),             // 50: luceneserver.ReleaseSnapshotResponse
	(*GetAllSnapshotGenRequest)(nil),            // 51: luceneserver.GetAllSnapshotGenRequest
	(*GetAllSnapshotGenResponse)(nil),           // 52: luceneserver.GetAllSnapshotGenResponse
	(*BackupWarmingQueriesRequest)(nil),         // 53: luceneserver.BackupWarmingQueriesRequest
	(*BackupWarmingQueriesResponse)(nil),        // 54: luceneserver.BackupWarmingQueriesResponse
	(*IndicesRequest)(nil),                      // 55: luceneserver.IndicesRequest
	(*IndicesResponse)(nil),                     // 56: luceneserver.IndicesResponse
	(*IndexStatsResponse)(nil),                  // 57: luceneserver.IndexStatsResponse
	(*RestoreIndex)(nil),                        // 58: luceneserver.RestoreIndex
	(*NodeInfoRequest)(nil),                     // 59: luceneserver.NodeInfoRequest
	(*NodeInfoResponse)(nil),                    // 60: luceneserver.NodeInfoResponse
	(*GlobalStateRequest)(nil),                  // 61: luceneserver.GlobalStateRequest
	(*GlobalStateResponse)(nil),                 // 62: luceneserver.GlobalStateResponse
	(*StateRequest)(nil),                        // 63: luceneserver.StateRequest
	(*StateResponse)(nil),                       // 64: luceneserver.StateResponse
	(*IndexStateRequest)(nil),                   // 65: luceneserver.IndexStateRequest
	(*IndexStateResponse)(nil),                  // 66: luceneserver.IndexStateResponse
	(*AddReplicaRequest)(nil),                   // 67: luceneserver.AddReplicaRequest
	(*AddReplicaResponse)(nil),                  // 68: luceneserver.AddReplicaResponse
	(*CopyState)(nil),                           // 69: luceneserver.CopyState
	(*FilesMetadata)(nil),                       // 70: luceneserver.FilesMetadata
	(*FileMetadata)(nil),                        // 71: luceneserver.FileMetadata
	(*CopyFiles)(nil),                           // 72: luceneserver.CopyFiles
	(*CopyStateRequest)(nil),                    // 73: luceneserver.CopyStateRequest
	(*FileInfo)(nil),                            // 74: luceneserver.FileInfo
	(*RawFileChunk)(nil),                        // 75: luceneserver.RawFileChunk
	(*HealthCheckRequest)(nil),                  // 76: luceneserver.HealthCheckRequest
	(*HealthCheckResponse)(nil),                 // 77: luceneserver.HealthCheckResponse
	(*ReadyCheckRequest)(nil),                   // 78: luceneserver.ReadyCheckRequest
	(*TransferStatus)(nil),                      // 79: luceneserver.TransferStatus
	(*NewNRTPoint)(nil),                         // 80: luceneserver.NewNRTPoint
	(*IndexName)(nil),                           // 81: luceneserver.IndexName
	(*SearcherVersion)(nil),                     // 82: luceneserver.SearcherVersion
	(*GetNodesRequest)(nil),                     // 83: luceneserver.GetNodesRequest
	(*GetNodesResponse)(nil),                    // 84: luceneserver.GetNodesResponse
	(*NodeInfo)(nil),                            // 85: luceneserver.NodeInfo
	(*DeleteByQueryRequest)(nil),                // 86: luceneserver.DeleteByQueryRequest
	(*ForceMergeRequest)(nil),                   // 87: luceneserver.ForceMergeRequest
	(*ForceMergeResponse)(nil),                  // 88: luceneserver.ForceMergeResponse
	(*ForceMergeDeletesRequest)(nil),            // 89: luceneserver.ForceMergeDeletesRequest
	(*ForceMergeDeletesResponse)(nil),           // 90: luceneserver.ForceMergeDeletesResponse
	(*IndexSettings)(nil),                       // 91: luceneserver.IndexSettings
	(*IndexLiveSettings)(nil),                   // 92: luceneserver.IndexLiveSettings
	(*IndexStateInfo)(nil),                      // 93: luceneserver.IndexStateInfo
	(*IndexGlobalState)(nil),                    // 94: luceneserver.IndexGlobalState
	(*GlobalStateInfo)(nil),                     // 95: luceneserver.GlobalStateInfo
	(*CustomRequest)(nil),                       // 96: luceneserver.CustomRequest
	(*CustomResponse)(nil),                      // 97: luceneserver.CustomResponse
	(*AddDocumentRequest_MultiValuedField)(nil), // 98: luceneserver.AddDocumentRequest.MultiValuedField
	nil,                            // 99: luceneserver.AddDocumentRequest.FieldsEntry
	nil,                            // 100: luceneserver.IndexStateInfo.FieldsEntry
	nil,                            // 101: luceneserver.GlobalStateInfo.IndicesEntry
	nil,                            // 102: luceneserver.CustomRequest.ParamsEntry
	nil,                            // 103: luceneserver.CustomResponse.ResponseEntry
	(*Script)(nil),                 // 104: luceneserver.Script
	(*Analyzer)(nil),               // 105: luceneserver.Analyzer
	(*structpb.Struct)(nil),        // 106: google.protobuf.Struct
	(*SortFields)(nil),             // 107: luceneserver.SortFields
	(*Query)(nil),                  // 108: luceneserver.Query
	(*wrapperspb.DoubleValue)(nil), // 109: google.protobuf.DoubleValue
	(*wrapperspb.Int32Value)(nil),  // 110: google.protobuf.Int32Value
	(*wrapperspb.BoolValue)(nil),   // 111: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil), // 112: google.protobuf.StringValue
	(*wrapperspb.UInt64Value)(nil), // 113: google.protobuf.UInt64Value
	(*SearchRequest)(nil),          // 114: luceneserver.SearchRequest
	(*emptypb.Empty)(nil),          // 115: google.protobuf.Empty
	(*SearchResponse)(nil),         // 116: luceneserver.SearchResponse
	(*anypb.Any)(nil),              // 117: google.protobuf.Any
	(*httpbody.HttpBody)(nil),      // 118: google.api.HttpBody
}
var file_yelp_nrtsearch_luceneserver_proto_depIdxs = []int32{
	91,  // 0: luceneserver.CreateIndexRequest.settings:type_name -> luceneserver.IndexSettings
	92,  // 1: luceneserver.CreateIndexRequest.liveSettings:type_name -> luceneserver.IndexLiveSettings
	16,  // 2: luceneserver.CreateIndexRequest.fields:type_name -> luceneserver.Field
	92,  // 3: luceneserver.LiveSettingsV2Request.liveSettings:type_name -> luceneserver.IndexLiveSettings
	92,  // 4: luceneserver.LiveSettingsV2Response.liveSettings:type_name -> luceneserver.IndexLiveSettings
	0,   // 5: luceneserver.Field.type:type_name -> luceneserver.FieldType
	1,   // 6: luceneserver.Field.indexOptions:type_name -> luceneserver.IndexOptions
	104, // 7: luceneserver.Field.script:type_name -> luceneserver.Script
	105, // 8: luceneserver.Field.analyzer:type_name -> luceneserver.Analyzer
	105, // 9: luceneserver.Field.indexAnalyzer:type_name -> luceneserver.Analyzer
	105, // 10: luceneserver.Field.searchAnalyzer:type_name -> luceneserver.Analyzer
	2,   // 11: luceneserver.Field.termVectors:type_name -> luceneserver.TermVectors
	3,   // 12: luceneserver.Field.facet:type_name -> luceneserver.FacetType
	106, // 13: luceneserver.Field.additionalProperties:type_name -> google.protobuf.Struct
	106, // 14: luceneserver.Field.similarityParams:type_name -> google.protobuf.Struct
	16,  // 15: luceneserver.Field.childFields:type_name -> luceneserver.Field
	17,  // 16: luceneserver.Field.vectorIndexingOptions:type_name -> luceneserver.VectorIndexingOptions
	4,   // 17: luceneserver.Field.textDocValuesType:type_name -> luceneserver.TextDocValuesType
	5,   // 18: luceneserver.Field.vectorElementType:type_name -> luceneserver.VectorElementType
	16,  // 19: luceneserver.FieldDefRequest.field:type_name -> luceneserver.Field
	107, // 20: luceneserver.SettingsRequest.indexSort:type_name -> luceneserver.SortFields
	91,  // 21: luceneserver.SettingsV2Request.settings:type_name -> luceneserver.IndexSettings
	91,  // 22: luceneserver.SettingsV2Response.settings:type_name -> luceneserver.IndexSettings
	6,   // 23: luceneserver.StartIndexRequest.mode:type_name -> luceneserver.Mode
	58,  // 24: luceneserver.StartIndexRequest.restore:type_name -> luceneserver.RestoreIndex
	99,  // 25: luceneserver.AddDocumentRequest.fields:type_name -> luceneserver.AddDocumentRequest.FieldsEntry
	36,  // 26: luceneserver.StatsResponse.taxonomy:type_name -> luceneserver.Taxonomy
	37,  // 27: luceneserver.StatsResponse.searchers:type_name -> luceneserver.Searcher
	37,  // 28: luceneserver.StatsResponse.currentSearcher:type_name -> luceneserver.Searcher
	48,  // 29: luceneserver.CreateSnapshotResponse.snapshotId:type_name -> luceneserver.SnapshotId
	48,  // 30: luceneserver.ReleaseSnapshotRequest.snapshotId:type_name -> luceneserver.SnapshotId
	57,  // 31: luceneserver.IndicesResponse.indicesResponse:type_name -> luceneserver.IndexStatsResponse
	35,  // 32: luceneserver.IndexStatsResponse.statsResponse:type_name -> luceneserver.StatsResponse
	95,  // 33: luceneserver.GlobalStateResponse.global_state:type_name -> luceneserver.GlobalStateInfo
	93,  // 34: luceneserver.IndexStateResponse.index_state:type_name -> luceneserver.IndexStateInfo
	70,  // 35: luceneserver.CopyState.filesMetadata:type_name -> luceneserver.FilesMetadata
	71,  // 36: luceneserver.FilesMetadata.fileMetadata:type_name -> luceneserver.FileMetadata
	70,  // 37: luceneserver.CopyFiles.filesMetadata:type_name -> luceneserver.FilesMetadata
	7,   // 38: luceneserver.HealthCheckResponse.health:type_name -> luceneserver.TransferStatusCode
	7,   // 39: luceneserver.TransferStatus.Code:type_name -> luceneserver.TransferStatusCode
	85,  // 40: luceneserver.GetNodesResponse.nodes:type_name -> luceneserver.NodeInfo
	108, // 41: luceneserver.DeleteByQueryRequest.query:type_name -> luceneserver.Query
	8,   // 42: luceneserver.ForceMergeResponse.status:type_name -> luceneserver.ForceMergeResponse.Status
	9,   // 43: luceneserver.ForceMergeDeletesResponse.status:type_name -> luceneserver.ForceMergeDeletesResponse.Status
	109, // 44: luceneserver.IndexSettings.nrtCachingDirectoryMaxMergeSizeMB:type_name -> google.protobuf.DoubleValue
	109, // 45: luceneserver.IndexSettings.nrtCachingDirectoryMaxSizeMB:type_name -> google.protobuf.DoubleValue
	110, // 46: luceneserver.IndexSettings.concurrentMergeSchedulerMaxThreadCount:type_name -> google.protobuf.Int32Value
	110, // 47: luceneserver.IndexSettings.concurrentMergeSchedulerMaxMergeCount:type_name -> google.protobuf.Int32Value
	107, // 48: luceneserver.IndexSettings.indexSort:type_name -> luceneserver.SortFields
	111, // 49: luceneserver.IndexSettings.indexMergeSchedulerAutoThrottle:type_name -> google.protobuf.BoolValue
	112, // 50: luceneserver.IndexSettings.directory:type_name -> google.protobuf.StringValue
	109, // 51: luceneserver.IndexLiveSettings.maxRefreshSec:type_name -> google.protobuf.DoubleValue
	109, // 52: luceneserver.IndexLiveSettings.minRefreshSec:type_name -> google.protobuf.DoubleValue
	109, // 53: luceneserver.IndexLiveSettings.maxSearcherAgeSec:type_name -> google.protobuf.DoubleValue
	109, // 54: luceneserver.IndexLiveSettings.indexRamBufferSizeMB:type_name -> google.protobuf.DoubleValue
	110, // 55: luceneserver.IndexLiveSettings.addDocumentsMaxBufferLen:type_name -> google.protobuf.Int32Value
	110, // 56: luceneserver.IndexLiveSettings.sliceMaxDocs:type_name -> google.protobuf.Int32Value
	110, // 57: luceneserver.IndexLiveSettings.sliceMaxSegments:type_name -> google.protobuf.Int32Value
	110, // 58: luceneserver.IndexLiveSettings.virtualShards:type_name -> google.protobuf.Int32Value
	110, // 59: luceneserver.IndexLiveSettings.maxMergedSegmentMB:type_name -> google.protobuf.Int32Value
	110, // 60: luceneserver.IndexLiveSettings.segmentsPerTier:type_name -> google.protobuf.Int32Value
	109, // 61: luceneserver.IndexLiveSettings.defaultSearchTimeoutSec:type_name -> google.protobuf.DoubleValue
	110, // 62: luceneserver.IndexLiveSettings.defaultSearchTimeoutCheckEvery:type_name -> google.protobuf.Int32Value
	110, // 63: luceneserver.IndexLiveSettings.defaultTerminateAfter:type_name -> google.protobuf.Int32Value
	113, // 64: luceneserver.IndexLiveSettings.maxMergePreCopyDurationSec:type_name -> google.protobuf.UInt64Value
	111, // 65: luceneserver.IndexLiveSettings.verboseMetrics:type_name -> google.protobuf.BoolValue
	111, // 66: luceneserver.IndexLiveSettings.parallelFetchByField:type_name -> google.protobuf.BoolValue
	110, // 67: luceneserver.IndexLiveSettings.parallelFetchChunkSize:type_name -> google.protobuf.Int32Value
	91,  // 68: luceneserver.IndexStateInfo.settings:type_name -> luceneserver.IndexSettings
	92,  // 69: luceneserver.IndexStateInfo.liveSettings:type_name -> luceneserver.IndexLiveSettings
	100, // 70: luceneserver.IndexStateInfo.fields:type_name -> luceneserver.IndexStateInfo.FieldsEntry
	101, // 71: luceneserver.GlobalStateInfo.indices:type_name -> luceneserver.GlobalStateInfo.IndicesEntry
	102, // 72: luceneserver.CustomRequest.params:type_name -> luceneserver.CustomRequest.ParamsEntry
	103, // 73: luceneserver.CustomResponse.response:type_name -> luceneserver.CustomResponse.ResponseEntry
	28,  // 74: luceneserver.AddDocumentRequest.MultiValuedField.faceHierarchyPaths:type_name -> luceneserver.FacetHierarchyPath
	98,  // 75: luceneserver.AddDocumentRequest.FieldsEntry.value:type_name -> luceneserver.AddDocumentRequest.MultiValuedField
	16,  // 76: luceneserver.IndexStateInfo.FieldsEntry.value:type_name -> luceneserver.Field
	94,  // 77: luceneserver.GlobalStateInfo.IndicesEntry.value:type_name -> luceneserver.IndexGlobalState
	10,  // 78: luceneserver.LuceneServer.createIndex:input_type -> luceneserver.CreateIndexRequest
	12,  // 79: luceneserver.LuceneServer.liveSettings:input_type -> luceneserver.LiveSettingsRequest
	14,  // 80: luceneserver.LuceneServer.liveSettingsV2:input_type -> luceneserver.LiveSettingsV2Request
	18,  // 81: luceneserver.LuceneServer.registerFields:input_type -> luceneserver.FieldDefRequest
	18,  // 82: luceneserver.LuceneServer.updateFields:input_type -> luceneserver.FieldDefRequest
	20,  // 83: luceneserver.LuceneServer.settings:input_type -> luceneserver.SettingsRequest
	22,  // 84: luceneserver.LuceneServer.settingsV2:input_type -> luceneserver.SettingsV2Request
	24,  // 85: luceneserver.LuceneServer.startIndex:input_type -> luceneserver.StartIndexRequest
	25,  // 86: luceneserver.LuceneServer.startIndexV2:input_type -> luceneserver.StartIndexV2Request
	43,  // 87: luceneserver.LuceneServer.stopIndex:input_type -> luceneserver.StopIndexRequest
	44,  // 88: luceneserver.LuceneServer.reloadState:input_type -> luceneserver.ReloadStateRequest
	27,  // 89: luceneserver.LuceneServer.addDocuments:input_type -> luceneserver.AddDocumentRequest
	30,  // 90: luceneserver.LuceneServer.refresh:input_type -> luceneserver.RefreshRequest
	32,  // 91: luceneserver.LuceneServer.commit:input_type -> luceneserver.CommitRequest
	34,  // 92: luceneserver.LuceneServer.stats:input_type -> luceneserver.StatsRequest
	114, // 93: luceneserver.LuceneServer.search:input_type -> luceneserver.SearchRequest
	114, // 94: luceneserver.LuceneServer.searchV2:input_type -> luceneserver.SearchRequest
	27,  // 95: luceneserver.LuceneServer.delete:input_type -> luceneserver.AddDocumentRequest
	86,  // 96: luceneserver.LuceneServer.deleteByQuery:input_type -> luceneserver.DeleteByQueryRequest
	38,  // 97: luceneserver.LuceneServer.deleteAll:input_type -> luceneserver.DeleteAllDocumentsRequest
	40,  // 98: luceneserver.LuceneServer.deleteIndex:input_type -> luceneserver.DeleteIndexRequest
	46,  // 99: luceneserver.LuceneServer.createSnapshot:input_type -> luceneserver.CreateSnapshotRequest
	49,  // 100: luceneserver.LuceneServer.releaseSnapshot:input_type -> luceneserver.ReleaseSnapshotRequest
	51,  // 101: luceneserver.LuceneServer.getAllSnapshotIndexGen:input_type -> luceneserver.GetAllSnapshotGenRequest
	53,  // 102: luceneserver.LuceneServer.backupWarmingQueries:input_type -> luceneserver.BackupWarmingQueriesRequest
	59,  // 103: luceneserver.LuceneServer.nodeInfo:input_type -> luceneserver.NodeInfoRequest
	61,  // 104: luceneserver.LuceneServer.globalState:input_type -> luceneserver.GlobalStateRequest
	63,  // 105: luceneserver.LuceneServer.state:input_type -> luceneserver.StateRequest
	65,  // 106: luceneserver.LuceneServer.indexState:input_type -> luceneserver.IndexStateRequest
	76,  // 107: luceneserver.LuceneServer.status:input_type -> luceneserver.HealthCheckRequest
	78,  // 108: luceneserver.LuceneServer.ready:input_type -> luceneserver.ReadyCheckRequest
	115, // 109: luceneserver.LuceneServer.metrics:input_type -> google.protobuf.Empty
	55,  // 110: luceneserver.LuceneServer.indices:input_type -> luceneserver.IndicesRequest
	87,  // 111: luceneserver.LuceneServer.forceMerge:input_type -> luceneserver.ForceMergeRequest
	89,  // 112: luceneserver.LuceneServer.forceMergeDeletes:input_type -> luceneserver.ForceMergeDeletesRequest
	96,  // 113: luceneserver.LuceneServer.custom:input_type -> luceneserver.CustomRequest
	67,  // 114: luceneserver.ReplicationServer.addReplicas:input_type -> luceneserver.AddReplicaRequest
	73,  // 115: luceneserver.ReplicationServer.recvCopyState:input_type -> luceneserver.CopyStateRequest
	75,  // 116: luceneserver.ReplicationServer.sendRawFile:input_type -> luceneserver.RawFileChunk
	74,  // 117: luceneserver.ReplicationServer.recvRawFile:input_type -> luceneserver.FileInfo
	74,  // 118: luceneserver.ReplicationServer.recvRawFileV2:input_type -> luceneserver.FileInfo
	72,  // 119: luceneserver.ReplicationServer.copyFiles:input_type -> luceneserver.CopyFiles
	80,  // 120: luceneserver.ReplicationServer.newNRTPoint:input_type -> luceneserver.NewNRTPoint
	81,  // 121: luceneserver.ReplicationServer.writeNRTPoint:input_type -> luceneserver.IndexName
	81,  // 122: luceneserver.ReplicationServer.getCurrentSearcherVersion:input_type -> luceneserver.IndexName
	83,  // 123: luceneserver.ReplicationServer.getConnectedNodes:input_type -> luceneserver.GetNodesRequest
	11,  // 124: luceneserver.LuceneServer.createIndex:output_type -> luceneserver.CreateIndexResponse
	13,  // 125: luceneserver.LuceneServer.liveSettings:output_type -> luceneserver.LiveSettingsResponse
	15,  // 126: luceneserver.LuceneServer.liveSettingsV2:output_type -> luceneserver.LiveSettingsV2Response
	19,  // 127: luceneserver.LuceneServer.registerFields:output_type -> luceneserver.FieldDefResponse
	19,  // 128: luceneserver.LuceneServer.updateFields:output_type -> luceneserver.FieldDefResponse
	21,  // 129: luceneserver.LuceneServer.settings:output_type -> luceneserver.SettingsResponse
	23,  // 130: luceneserver.LuceneServer.settingsV2:output_type -> luceneserver.SettingsV2Response
	26,  // 131: luceneserver.LuceneServer.startIndex:output_type -> luceneserver.StartIndexResponse
	26,  // 132: luceneserver.LuceneServer.startIndexV2:output_type -> luceneserver.StartIndexResponse
	42,  // 133: luceneserver.LuceneServer.stopIndex:output_type -> luceneserver.DummyResponse
	45,  // 134: luceneserver.LuceneServer.reloadState:output_type -> luceneserver.ReloadStateResponse
	29,  // 135: luceneserver.LuceneServer.addDocuments:output_type -> luceneserver.AddDocumentResponse
	31,  // 136: luceneserver.LuceneServer.refresh:output_type -> luceneserver.RefreshResponse
	33,  // 137: luceneserver.LuceneServer.commit:output_type -> luceneserver.CommitResponse
	35,  // 138: luceneserver.LuceneServer.stats:output_type -> luceneserver.StatsResponse
	116, // 139: luceneserver.LuceneServer.search:output_type -> luceneserver.SearchResponse
	117, // 140: luceneserver.LuceneServer.searchV2:output_type -> google.protobuf.Any
	29,  // 141: luceneserver.LuceneServer.delete:output_type -> luceneserver.AddDocumentResponse
	29,  // 142: luceneserver.LuceneServer.deleteByQuery:output_type -> luceneserver.AddDocumentResponse
	39,  // 143: luceneserver.LuceneServer.deleteAll:output_type -> luceneserver.DeleteAllDocumentsResponse
	41,  // 144: luceneserver.LuceneServer.deleteIndex:output_type -> luceneserver.DeleteIndexResponse
	47,  // 145: luceneserver.LuceneServer.createSnapshot:output_type -> luceneserver.CreateSnapshotResponse
	50,  // 146: luceneserver.LuceneServer.releaseSnapshot:output_type -> luceneserver.ReleaseSnapshotResponse
	52,  // 147: luceneserver.LuceneServer.getAllSnapshotIndexGen:output_type -> luceneserver.GetAllSnapshotGenResponse
	54,  // 148: luceneserver.LuceneServer.backupWarmingQueries:output_type -> luceneserver.BackupWarmingQueriesResponse
	60,  // 149: luceneserver.LuceneServer.nodeInfo:output_type -> luceneserver.NodeInfoResponse
	62,  // 150: luceneserver.LuceneServer.globalState:output_type -> luceneserver.GlobalStateResponse
	64,  // 151: luceneserver.LuceneServer.state:output_type -> luceneserver.StateResponse
	66,  // 152: luceneserver.LuceneServer.indexState:output_type -> luceneserver.IndexStateResponse
	77,  // 153: luceneserver.LuceneServer.status:output_type -> luceneserver.HealthCheckResponse
	77,  // 154: luceneserver.LuceneServer.ready:output_type -> luceneserver.HealthCheckResponse
	118, // 155: luceneserver.LuceneServer.metrics:output_type -> google.api.HttpBody
	56,  // 156: luceneserver.LuceneServer.indices:output_type -> luceneserver.IndicesResponse
	88,  // 157: luceneserver.LuceneServer.forceMerge:output_type -> luceneserver.ForceMergeResponse
	90,  // 158: luceneserver.LuceneServer.forceMergeDeletes:output_type -> luceneserver.ForceMergeDeletesResponse
	97,  // 159: luceneserver.LuceneServer.custom:output_type -> luceneserver.CustomResponse
	68,  // 160: luceneserver.ReplicationServer.addReplicas:output_type -> luceneserver.AddReplicaResponse
	69,  // 161: luceneserver.ReplicationServer.recvCopyState:output_type -> luceneserver.CopyState
	79,  // 162: luceneserver.ReplicationServer.sendRawFile:output_type -> luceneserver.TransferStatus
	75,  // 163: luceneserver.ReplicationServer.recvRawFile:output_type -> luceneserver.RawFileChunk
	75,  // 164: luceneserver.ReplicationServer.recvRawFileV2:output_type -> luceneserver.RawFileChunk
	79,  // 165: luceneserver.ReplicationServer.copyFiles:output_type -> luceneserver.TransferStatus
	79,  // 166: luceneserver.ReplicationServer.newNRTPoint:output_type -> luceneserver.TransferStatus
	82,  // 167: luceneserver.ReplicationServer.writeNRTPoint:output_type -> luceneserver.SearcherVersion
	82,  // 168: luceneserver.ReplicationServer.getCurrentSearcherVersion:output_type -> luceneserver.SearcherVersion
	84,  // 169: luceneserver.ReplicationServer.getConnectedNodes:output_type -> luceneserver.GetNodesResponse
	124, // [124:170] is the sub-list for method output_type
	78,  // [78:124] is the sub-list for method input_type
	78,  // [78:78] is the sub-list for extension type_name
	78,  // [78:78] is the sub-list for extension extendee
	0,   // [0:78] is the sub-list for field type_name
}

func init() { file_yelp_nrtsearch_luceneserver_proto_init() }
func file_yelp_nrtsearch_luceneserver_proto_init() {
	if File_yelp_nrtsearch_luceneserver_proto != nil {
		return
	}
	file_yelp_nrtsearch_search_proto_init()
	file_yelp_nrtsearch_analysis_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveSettingsV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveSettingsV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorIndexingOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldDefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldDefResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartIndexV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacetHierarchyPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Taxonomy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Searcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAllDocumentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAllDocumentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DummyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSnapshotGenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSnapshotGenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupWarmingQueriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupWarmingQueriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReplicaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawFileChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadyCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewNRTPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearcherVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteByQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceMergeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceMergeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceMergeDeletesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceMergeDeletesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexLiveSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexGlobalState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDocumentRequest_MultiValuedField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yelp_nrtsearch_luceneserver_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_yelp_nrtsearch_luceneserver_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yelp_nrtsearch_luceneserver_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   94,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_yelp_nrtsearch_luceneserver_proto_goTypes,
		DependencyIndexes: file_yelp_nrtsearch_luceneserver_proto_depIdxs,
		EnumInfos:         file_yelp_nrtsearch_luceneserver_proto_enumTypes,
		MessageInfos:      file_yelp_nrtsearch_luceneserver_proto_msgTypes,
	}.Build()
	File_yelp_nrtsearch_luceneserver_proto = out.File
	file_yelp_nrtsearch_luceneserver_proto_rawDesc = nil
	file_yelp_nrtsearch_luceneserver_proto_goTypes = nil
	file_yelp_nrtsearch_luceneserver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LuceneServerClient is the client API for LuceneServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LuceneServerClient interface {
	// Create an Index. Optionally, initial settings and live settings may be specified. The index is created
	// in the stopped state, unless specified.
	CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*CreateIndexResponse, error)
	// Change live settings for an index. These settings may be changed while the index is started. Pass no
	// settings changes to retrieve current live settings.
	LiveSettings(ctx context.Context, in *LiveSettingsRequest, opts ...grpc.CallOption) (*LiveSettingsResponse, error)
	// Change live settings for an index. These settings may be changed while the index is started. Pass no
	// settings changes to retrieve current live settings.
	LiveSettingsV2(ctx context.Context, in *LiveSettingsV2Request, opts ...grpc.CallOption) (*LiveSettingsV2Response, error)
	// Adds one or more fields. Fields must be registered before they can be added in a document (via @addDocument).
	// Pass a list of Fields and an indexName. Any number of fields may be registered in a single request,
	// and once a field is registered it cannot be changed (write-once).
	// This returns the full set of fields currently registered.
	RegisterFields(ctx context.Context, in *FieldDefRequest, opts ...grpc.CallOption) (*FieldDefResponse, error)
	// Adds one or more fields to an index. The behavior is currently the same as registerFields.
	UpdateFields(ctx context.Context, in *FieldDefRequest, opts ...grpc.CallOption) (*FieldDefResponse, error)
	// Change offline settings for an index. The index must be in a stopped state to make settings changes.
	// This returns the currently set settings. Passing no settings changes retrieves the current settings.
	Settings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*SettingsResponse, error)
	// Change offline settings for an index. The index must be in a stopped state to make settings changes.
	// This returns the currently set settings. Passing no settings changes retrieves the current settings.
	SettingsV2(ctx context.Context, in *SettingsV2Request, opts ...grpc.CallOption) (*SettingsV2Response, error)
	// Starts an index
	StartIndex(ctx context.Context, in *StartIndexRequest, opts ...grpc.CallOption) (*StartIndexResponse, error)
	// Starts an index based on configuration in IndexStartConfig
	StartIndexV2(ctx context.Context, in *StartIndexV2Request, opts ...grpc.CallOption) (*StartIndexResponse, error)
	// Stops an index
	StopIndex(ctx context.Context, in *StopIndexRequest, opts ...grpc.CallOption) (*DummyResponse, error)
	// Reload state from the backend. When run on replicas, this processes state changes made by the primary.
	// New indices are created/started, and existing indices state is updated as needed.
	ReloadState(ctx context.Context, in *ReloadStateRequest, opts ...grpc.CallOption) (*ReloadStateResponse, error)
	// Adds a stream of Documents to an index. Changes are not durable until after the next successful @commit call.
	AddDocuments(ctx context.Context, opts ...grpc.CallOption) (LuceneServer_AddDocumentsClient, error)
	// Refresh the latest searcher for an index
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	// Commits all pending index data changes to durable storage
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	// Retrieve index statistics
	Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
	// Execute a search query against an index
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Execute a search query against an index. Return response as an Any gRPC message. Useful if the client does
	// not need to process the response and wants to avoid some deserialization work.
	SearchV2(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*anypb.Any, error)
	// Delete documents from an index. Changes are not durable until after the next successful @commit call.
	Delete(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error)
	// Delete documents matching a query from an index. Changes are not durable until after the next successful
	// @commit call.
	DeleteByQuery(ctx context.Context, in *DeleteByQueryRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error)
	// Delete all documents for index. Changes are not durable until after the next successful @commit call.
	DeleteAll(ctx context.Context, in *DeleteAllDocumentsRequest, opts ...grpc.CallOption) (*DeleteAllDocumentsResponse, error)
	// Delete index and all of its local data
	DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*DeleteIndexResponse, error)
	// Creates a snapshot in the index, which is saved point-in-time view of the last commit
	// in the index such that no files referenced by that snapshot will be deleted by ongoing
	// indexing until the snapshot is released with @releaseSnapshot.  Note that this will
	// reference the last commit, so be sure to call commit first if you have pending changes
	// that you'd like to be included in the snapshot.
	// This can be used for backup purposes, i.e. after creating the snapshot you can copy
	// all referenced files to backup storage, and then release the snapshot once complete.
	// To restore the backup, just copy all the files back and restart the server.
	// It can also be used for transactional purposes, i.e. if you sometimes need to search a
	// specific snapshot instead of the current live index. Creating a snapshot is very fast
	// (does not require any file copying), but over time it will consume extra disk space as
	// old segments are merged in the index.  Be sure to release the snapshot once you're done.
	// Snapshots survive shutdown and restart of the server.  Returns all protected filenames
	// referenced by this snapshot: these files will not change and will not be deleted until
	// the snapshot is released. This returns the directories and files referenced by the snapshot.
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error)
	// Releases a snapshot previously created with @createSnapshot.
	ReleaseSnapshot(ctx context.Context, in *ReleaseSnapshotRequest, opts ...grpc.CallOption) (*ReleaseSnapshotResponse, error)
	// Gets all unreleased index gens of snapshots previously created with @createSnapshot
	GetAllSnapshotIndexGen(ctx context.Context, in *GetAllSnapshotGenRequest, opts ...grpc.CallOption) (*GetAllSnapshotGenResponse, error)
	// Backup warming queries for an index to S3
	BackupWarmingQueries(ctx context.Context, in *BackupWarmingQueriesRequest, opts ...grpc.CallOption) (*BackupWarmingQueriesResponse, error)
	// Get information about this node
	NodeInfo(ctx context.Context, in *NodeInfoRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error)
	// Get the global state of the cluster
	GlobalState(ctx context.Context, in *GlobalStateRequest, opts ...grpc.CallOption) (*GlobalStateResponse, error)
	// Gets the state of an index, includes settings, live_settings, search schema
	State(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error)
	// Gets the state information for an index, includes settings, live_settings, search schema
	IndexState(ctx context.Context, in *IndexStateRequest, opts ...grpc.CallOption) (*IndexStateResponse, error)
	// Basic healthcheck, successful if the server is running
	Status(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Checks if a node is ready to receive traffic by checking if all the indices configured to be started
	// are started. Can specify comma-separated list of index names to only check specific indices if needed.
	Ready(ctx context.Context, in *ReadyCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Get prometheus metrics
	Metrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Get information for all created indices
	Indices(ctx context.Context, in *IndicesRequest, opts ...grpc.CallOption) (*IndicesResponse, error)
	// Forces merge policy to merge segments until there are <= maxNumSegments. The actual
	// merges to be executed are determined by the MergePolicy. This call will merge those
	// segments present in the index when the call started. If other threads are still
	// adding documents and flushing segments, those newly created segments will not be
	// merged unless you call forceMerge again.
	ForceMerge(ctx context.Context, in *ForceMergeRequest, opts ...grpc.CallOption) (*ForceMergeResponse, error)
	// Forces merging of all segments that have deleted documents. The actual merges to be
	// executed are determined by the MergePolicy. For example, the default TieredMergePolicy
	// will only pick a segment if the percentage of deleted docs is over 10%.
	// This method first flushes a new segment (if there are indexed documents), and applies
	// all buffered deletes.
	ForceMergeDeletes(ctx context.Context, in *ForceMergeDeletesRequest, opts ...grpc.CallOption) (*ForceMergeDeletesResponse, error)
	// Process request in a plugin which implements CustomRequestPlugin interface.
	Custom(ctx context.Context, in *CustomRequest, opts ...grpc.CallOption) (*CustomResponse, error)
}

type luceneServerClient struct {
	cc grpc.ClientConnInterface
}

func NewLuceneServerClient(cc grpc.ClientConnInterface) LuceneServerClient {
	return &luceneServerClient{cc}
}

func (c *luceneServerClient) CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*CreateIndexResponse, error) {
	out := new(CreateIndexResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/createIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) LiveSettings(ctx context.Context, in *LiveSettingsRequest, opts ...grpc.CallOption) (*LiveSettingsResponse, error) {
	out := new(LiveSettingsResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/liveSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) LiveSettingsV2(ctx context.Context, in *LiveSettingsV2Request, opts ...grpc.CallOption) (*LiveSettingsV2Response, error) {
	out := new(LiveSettingsV2Response)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/liveSettingsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) RegisterFields(ctx context.Context, in *FieldDefRequest, opts ...grpc.CallOption) (*FieldDefResponse, error) {
	out := new(FieldDefResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/registerFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) UpdateFields(ctx context.Context, in *FieldDefRequest, opts ...grpc.CallOption) (*FieldDefResponse, error) {
	out := new(FieldDefResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/updateFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Settings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*SettingsResponse, error) {
	out := new(SettingsResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/settings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) SettingsV2(ctx context.Context, in *SettingsV2Request, opts ...grpc.CallOption) (*SettingsV2Response, error) {
	out := new(SettingsV2Response)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/settingsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) StartIndex(ctx context.Context, in *StartIndexRequest, opts ...grpc.CallOption) (*StartIndexResponse, error) {
	out := new(StartIndexResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/startIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) StartIndexV2(ctx context.Context, in *StartIndexV2Request, opts ...grpc.CallOption) (*StartIndexResponse, error) {
	out := new(StartIndexResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/startIndexV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) StopIndex(ctx context.Context, in *StopIndexRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/stopIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) ReloadState(ctx context.Context, in *ReloadStateRequest, opts ...grpc.CallOption) (*ReloadStateResponse, error) {
	out := new(ReloadStateResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/reloadState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) AddDocuments(ctx context.Context, opts ...grpc.CallOption) (LuceneServer_AddDocumentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LuceneServer_serviceDesc.Streams[0], "/luceneserver.LuceneServer/addDocuments", opts...)
	if err != nil {
		return nil, err
	}
	x := &luceneServerAddDocumentsClient{stream}
	return x, nil
}

type LuceneServer_AddDocumentsClient interface {
	Send(*AddDocumentRequest) error
	CloseAndRecv() (*AddDocumentResponse, error)
	grpc.ClientStream
}

type luceneServerAddDocumentsClient struct {
	grpc.ClientStream
}

func (x *luceneServerAddDocumentsClient) Send(m *AddDocumentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *luceneServerAddDocumentsClient) CloseAndRecv() (*AddDocumentResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddDocumentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *luceneServerClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) SearchV2(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/searchV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Delete(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error) {
	out := new(AddDocumentResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) DeleteByQuery(ctx context.Context, in *DeleteByQueryRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error) {
	out := new(AddDocumentResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/deleteByQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) DeleteAll(ctx context.Context, in *DeleteAllDocumentsRequest, opts ...grpc.CallOption) (*DeleteAllDocumentsResponse, error) {
	out := new(DeleteAllDocumentsResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/deleteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*DeleteIndexResponse, error) {
	out := new(DeleteIndexResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/deleteIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error) {
	out := new(CreateSnapshotResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/createSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) ReleaseSnapshot(ctx context.Context, in *ReleaseSnapshotRequest, opts ...grpc.CallOption) (*ReleaseSnapshotResponse, error) {
	out := new(ReleaseSnapshotResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/releaseSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) GetAllSnapshotIndexGen(ctx context.Context, in *GetAllSnapshotGenRequest, opts ...grpc.CallOption) (*GetAllSnapshotGenResponse, error) {
	out := new(GetAllSnapshotGenResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/getAllSnapshotIndexGen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) BackupWarmingQueries(ctx context.Context, in *BackupWarmingQueriesRequest, opts ...grpc.CallOption) (*BackupWarmingQueriesResponse, error) {
	out := new(BackupWarmingQueriesResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/backupWarmingQueries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) NodeInfo(ctx context.Context, in *NodeInfoRequest, opts ...grpc.CallOption) (*NodeInfoResponse, error) {
	out := new(NodeInfoResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/nodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) GlobalState(ctx context.Context, in *GlobalStateRequest, opts ...grpc.CallOption) (*GlobalStateResponse, error) {
	out := new(GlobalStateResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/globalState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) State(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/state", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) IndexState(ctx context.Context, in *IndexStateRequest, opts ...grpc.CallOption) (*IndexStateResponse, error) {
	out := new(IndexStateResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/indexState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Status(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Ready(ctx context.Context, in *ReadyCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/ready", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Metrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/metrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Indices(ctx context.Context, in *IndicesRequest, opts ...grpc.CallOption) (*IndicesResponse, error) {
	out := new(IndicesResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/indices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) ForceMerge(ctx context.Context, in *ForceMergeRequest, opts ...grpc.CallOption) (*ForceMergeResponse, error) {
	out := new(ForceMergeResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/forceMerge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) ForceMergeDeletes(ctx context.Context, in *ForceMergeDeletesRequest, opts ...grpc.CallOption) (*ForceMergeDeletesResponse, error) {
	out := new(ForceMergeDeletesResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/forceMergeDeletes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Custom(ctx context.Context, in *CustomRequest, opts ...grpc.CallOption) (*CustomResponse, error) {
	out := new(CustomResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/custom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LuceneServerServer is the server API for LuceneServer service.
type LuceneServerServer interface {
	// Create an Index. Optionally, initial settings and live settings may be specified. The index is created
	// in the stopped state, unless specified.
	CreateIndex(context.Context, *CreateIndexRequest) (*CreateIndexResponse, error)
	// Change live settings for an index. These settings may be changed while the index is started. Pass no
	// settings changes to retrieve current live settings.
	LiveSettings(context.Context, *LiveSettingsRequest) (*LiveSettingsResponse, error)
	// Change live settings for an index. These settings may be changed while the index is started. Pass no
	// settings changes to retrieve current live settings.
	LiveSettingsV2(context.Context, *LiveSettingsV2Request) (*LiveSettingsV2Response, error)
	// Adds one or more fields. Fields must be registered before they can be added in a document (via @addDocument).
	// Pass a list of Fields and an indexName. Any number of fields may be registered in a single request,
	// and once a field is registered it cannot be changed (write-once).
	// This returns the full set of fields currently registered.
	RegisterFields(context.Context, *FieldDefRequest) (*FieldDefResponse, error)
	// Adds one or more fields to an index. The behavior is currently the same as registerFields.
	UpdateFields(context.Context, *FieldDefRequest) (*FieldDefResponse, error)
	// Change offline settings for an index. The index must be in a stopped state to make settings changes.
	// This returns the currently set settings. Passing no settings changes retrieves the current settings.
	Settings(context.Context, *SettingsRequest) (*SettingsResponse, error)
	// Change offline settings for an index. The index must be in a stopped state to make settings changes.
	// This returns the currently set settings. Passing no settings changes retrieves the current settings.
	SettingsV2(context.Context, *SettingsV2Request) (*SettingsV2Response, error)
	// Starts an index
	StartIndex(context.Context, *StartIndexRequest) (*StartIndexResponse, error)
	// Starts an index based on configuration in IndexStartConfig
	StartIndexV2(context.Context, *StartIndexV2Request) (*StartIndexResponse, error)
	// Stops an index
	StopIndex(context.Context, *StopIndexRequest) (*DummyResponse, error)
	// Reload state from the backend. When run on replicas, this processes state changes made by the primary.
	// New indices are created/started, and existing indices state is updated as needed.
	ReloadState(context.Context, *ReloadStateRequest) (*ReloadStateResponse, error)
	// Adds a stream of Documents to an index. Changes are not durable until after the next successful @commit call.
	AddDocuments(LuceneServer_AddDocumentsServer) error
	// Refresh the latest searcher for an index
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	// Commits all pending index data changes to durable storage
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	// Retrieve index statistics
	Stats(context.Context, *StatsRequest) (*StatsResponse, error)
	// Execute a search query against an index
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// Execute a search query against an index. Return response as an Any gRPC message. Useful if the client does
	// not need to process the response and wants to avoid some deserialization work.
	SearchV2(context.Context, *SearchRequest) (*anypb.Any, error)
	// Delete documents from an index. Changes are not durable until after the next successful @commit call.
	Delete(context.Context, *AddDocumentRequest) (*AddDocumentResponse, error)
	// Delete documents matching a query from an index. Changes are not durable until after the next successful
	// @commit call.
	DeleteByQuery(context.Context, *DeleteByQueryRequest) (*AddDocumentResponse, error)
	// Delete all documents for index. Changes are not durable until after the next successful @commit call.
	DeleteAll(context.Context, *DeleteAllDocumentsRequest) (*DeleteAllDocumentsResponse, error)
	// Delete index and all of its local data
	DeleteIndex(context.Context, *DeleteIndexRequest) (*DeleteIndexResponse, error)
	// Creates a snapshot in the index, which is saved point-in-time view of the last commit
	// in the index such that no files referenced by that snapshot will be deleted by ongoing
	// indexing until the snapshot is released with @releaseSnapshot.  Note that this will
	// reference the last commit, so be sure to call commit first if you have pending changes
	// that you'd like to be included in the snapshot.
	// This can be used for backup purposes, i.e. after creating the snapshot you can copy
	// all referenced files to backup storage, and then release the snapshot once complete.
	// To restore the backup, just copy all the files back and restart the server.
	// It can also be used for transactional purposes, i.e. if you sometimes need to search a
	// specific snapshot instead of the current live index. Creating a snapshot is very fast
	// (does not require any file copying), but over time it will consume extra disk space as
	// old segments are merged in the index.  Be sure to release the snapshot once you're done.
	// Snapshots survive shutdown and restart of the server.  Returns all protected filenames
	// referenced by this snapshot: these files will not change and will not be deleted until
	// the snapshot is released. This returns the directories and files referenced by the snapshot.
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error)
	// Releases a snapshot previously created with @createSnapshot.
	ReleaseSnapshot(context.Context, *ReleaseSnapshotRequest) (*ReleaseSnapshotResponse, error)
	// Gets all unreleased index gens of snapshots previously created with @createSnapshot
	GetAllSnapshotIndexGen(context.Context, *GetAllSnapshotGenRequest) (*GetAllSnapshotGenResponse, error)
	// Backup warming queries for an index to S3
	BackupWarmingQueries(context.Context, *BackupWarmingQueriesRequest) (*BackupWarmingQueriesResponse, error)
	// Get information about this node
	NodeInfo(context.Context, *NodeInfoRequest) (*NodeInfoResponse, error)
	// Get the global state of the cluster
	GlobalState(context.Context, *GlobalStateRequest) (*GlobalStateResponse, error)
	// Gets the state of an index, includes settings, live_settings, search schema
	State(context.Context, *StateRequest) (*StateResponse, error)
	// Gets the state information for an index, includes settings, live_settings, search schema
	IndexState(context.Context, *IndexStateRequest) (*IndexStateResponse, error)
	// Basic healthcheck, successful if the server is running
	Status(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Checks if a node is ready to receive traffic by checking if all the indices configured to be started
	// are started. Can specify comma-separated list of index names to only check specific indices if needed.
	Ready(context.Context, *ReadyCheckRequest) (*HealthCheckResponse, error)
	// Get prometheus metrics
	Metrics(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	// Get information for all created indices
	Indices(context.Context, *IndicesRequest) (*IndicesResponse, error)
	// Forces merge policy to merge segments until there are <= maxNumSegments. The actual
	// merges to be executed are determined by the MergePolicy. This call will merge those
	// segments present in the index when the call started. If other threads are still
	// adding documents and flushing segments, those newly created segments will not be
	// merged unless you call forceMerge again.
	ForceMerge(context.Context, *ForceMergeRequest) (*ForceMergeResponse, error)
	// Forces merging of all segments that have deleted documents. The actual merges to be
	// executed are determined by the MergePolicy. For example, the default TieredMergePolicy
	// will only pick a segment if the percentage of deleted docs is over 10%.
	// This method first flushes a new segment (if there are indexed documents), and applies
	// all buffered deletes.
	ForceMergeDeletes(context.Context, *ForceMergeDeletesRequest) (*ForceMergeDeletesResponse, error)
	// Process request in a plugin which implements CustomRequestPlugin interface.
	Custom(context.Context, *CustomRequest) (*CustomResponse, error)
}

// UnimplementedLuceneServerServer can be embedded to have forward compatible implementations.
type UnimplementedLuceneServerServer struct {
}

func (*UnimplementedLuceneServerServer) CreateIndex(context.Context, *CreateIndexRequest) (*CreateIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (*UnimplementedLuceneServerServer) LiveSettings(context.Context, *LiveSettingsRequest) (*LiveSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveSettings not implemented")
}
func (*UnimplementedLuceneServerServer) LiveSettingsV2(context.Context, *LiveSettingsV2Request) (*LiveSettingsV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveSettingsV2 not implemented")
}
func (*UnimplementedLuceneServerServer) RegisterFields(context.Context, *FieldDefRequest) (*FieldDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFields not implemented")
}
func (*UnimplementedLuceneServerServer) UpdateFields(context.Context, *FieldDefRequest) (*FieldDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFields not implemented")
}
func (*UnimplementedLuceneServerServer) Settings(context.Context, *SettingsRequest) (*SettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Settings not implemented")
}
func (*UnimplementedLuceneServerServer) SettingsV2(context.Context, *SettingsV2Request) (*SettingsV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingsV2 not implemented")
}
func (*UnimplementedLuceneServerServer) StartIndex(context.Context, *StartIndexRequest) (*StartIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartIndex not implemented")
}
func (*UnimplementedLuceneServerServer) StartIndexV2(context.Context, *StartIndexV2Request) (*StartIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartIndexV2 not implemented")
}
func (*UnimplementedLuceneServerServer) StopIndex(context.Context, *StopIndexRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopIndex not implemented")
}
func (*UnimplementedLuceneServerServer) ReloadState(context.Context, *ReloadStateRequest) (*ReloadStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadState not implemented")
}
func (*UnimplementedLuceneServerServer) AddDocuments(LuceneServer_AddDocumentsServer) error {
	return status.Errorf(codes.Unimplemented, "method AddDocuments not implemented")
}
func (*UnimplementedLuceneServerServer) Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (*UnimplementedLuceneServerServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (*UnimplementedLuceneServerServer) Stats(context.Context, *StatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (*UnimplementedLuceneServerServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedLuceneServerServer) SearchV2(context.Context, *SearchRequest) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchV2 not implemented")
}
func (*UnimplementedLuceneServerServer) Delete(context.Context, *AddDocumentRequest) (*AddDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedLuceneServerServer) DeleteByQuery(context.Context, *DeleteByQueryRequest) (*AddDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByQuery not implemented")
}
func (*UnimplementedLuceneServerServer) DeleteAll(context.Context, *DeleteAllDocumentsRequest) (*DeleteAllDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (*UnimplementedLuceneServerServer) DeleteIndex(context.Context, *DeleteIndexRequest) (*DeleteIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIndex not implemented")
}
func (*UnimplementedLuceneServerServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (*UnimplementedLuceneServerServer) ReleaseSnapshot(context.Context, *ReleaseSnapshotRequest) (*ReleaseSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSnapshot not implemented")
}
func (*UnimplementedLuceneServerServer) GetAllSnapshotIndexGen(context.Context, *GetAllSnapshotGenRequest) (*GetAllSnapshotGenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSnapshotIndexGen not implemented")
}
func (*UnimplementedLuceneServerServer) BackupWarmingQueries(context.Context, *BackupWarmingQueriesRequest) (*BackupWarmingQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupWarmingQueries not implemented")
}
func (*UnimplementedLuceneServerServer) NodeInfo(context.Context, *NodeInfoRequest) (*NodeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeInfo not implemented")
}
func (*UnimplementedLuceneServerServer) GlobalState(context.Context, *GlobalStateRequest) (*GlobalStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GlobalState not implemented")
}
func (*UnimplementedLuceneServerServer) State(context.Context, *StateRequest) (*StateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method State not implemented")
}
func (*UnimplementedLuceneServerServer) IndexState(context.Context, *IndexStateRequest) (*IndexStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexState not implemented")
}
func (*UnimplementedLuceneServerServer) Status(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedLuceneServerServer) Ready(context.Context, *ReadyCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ready not implemented")
}
func (*UnimplementedLuceneServerServer) Metrics(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metrics not implemented")
}
func (*UnimplementedLuceneServerServer) Indices(context.Context, *IndicesRequest) (*IndicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Indices not implemented")
}
func (*UnimplementedLuceneServerServer) ForceMerge(context.Context, *ForceMergeRequest) (*ForceMergeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceMerge not implemented")
}
func (*UnimplementedLuceneServerServer) ForceMergeDeletes(context.Context, *ForceMergeDeletesRequest) (*ForceMergeDeletesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceMergeDeletes not implemented")
}
func (*UnimplementedLuceneServerServer) Custom(context.Context, *CustomRequest) (*CustomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Custom not implemented")
}

func RegisterLuceneServerServer(s *grpc.Server, srv LuceneServerServer) {
	s.RegisterService(&_LuceneServer_serviceDesc, srv)
}

func _LuceneServer_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/CreateIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).CreateIndex(ctx, req.(*CreateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_LiveSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).LiveSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/LiveSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).LiveSettings(ctx, req.(*LiveSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_LiveSettingsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveSettingsV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).LiveSettingsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/LiveSettingsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).LiveSettingsV2(ctx, req.(*LiveSettingsV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_RegisterFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).RegisterFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/RegisterFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).RegisterFields(ctx, req.(*FieldDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_UpdateFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).UpdateFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/UpdateFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).UpdateFields(ctx, req.(*FieldDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Settings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Settings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Settings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Settings(ctx, req.(*SettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_SettingsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).SettingsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/SettingsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).SettingsV2(ctx, req.(*SettingsV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_StartIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).StartIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/StartIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).StartIndex(ctx, req.(*StartIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_StartIndexV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartIndexV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).StartIndexV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/StartIndexV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).StartIndexV2(ctx, req.(*StartIndexV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_StopIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).StopIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/StopIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).StopIndex(ctx, req.(*StopIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_ReloadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).ReloadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/ReloadState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).ReloadState(ctx, req.(*ReloadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_AddDocuments_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LuceneServerServer).AddDocuments(&luceneServerAddDocumentsServer{stream})
}

type LuceneServer_AddDocumentsServer interface {
	SendAndClose(*AddDocumentResponse) error
	Recv() (*AddDocumentRequest, error)
	grpc.ServerStream
}

type luceneServerAddDocumentsServer struct {
	grpc.ServerStream
}

func (x *luceneServerAddDocumentsServer) SendAndClose(m *AddDocumentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *luceneServerAddDocumentsServer) Recv() (*AddDocumentRequest, error) {
	m := new(AddDocumentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LuceneServer_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Stats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_SearchV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).SearchV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/SearchV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).SearchV2(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Delete(ctx, req.(*AddDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_DeleteByQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).DeleteByQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/DeleteByQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).DeleteByQuery(ctx, req.(*DeleteByQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).DeleteAll(ctx, req.(*DeleteAllDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_DeleteIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).DeleteIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/DeleteIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).DeleteIndex(ctx, req.(*DeleteIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/CreateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_ReleaseSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).ReleaseSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/ReleaseSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).ReleaseSnapshot(ctx, req.(*ReleaseSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_GetAllSnapshotIndexGen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSnapshotGenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).GetAllSnapshotIndexGen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/GetAllSnapshotIndexGen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).GetAllSnapshotIndexGen(ctx, req.(*GetAllSnapshotGenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_BackupWarmingQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupWarmingQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).BackupWarmingQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/BackupWarmingQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).BackupWarmingQueries(ctx, req.(*BackupWarmingQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_NodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).NodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/NodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).NodeInfo(ctx, req.(*NodeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_GlobalState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).GlobalState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/GlobalState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).GlobalState(ctx, req.(*GlobalStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/State",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).State(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_IndexState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).IndexState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/IndexState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).IndexState(ctx, req.(*IndexStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Status(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Ready",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Ready(ctx, req.(*ReadyCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Metrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Metrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Metrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Metrics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Indices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Indices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Indices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Indices(ctx, req.(*IndicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_ForceMerge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceMergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).ForceMerge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/ForceMerge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).ForceMerge(ctx, req.(*ForceMergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_ForceMergeDeletes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceMergeDeletesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).ForceMergeDeletes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/ForceMergeDeletes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).ForceMergeDeletes(ctx, req.(*ForceMergeDeletesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Custom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Custom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Custom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Custom(ctx, req.(*CustomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LuceneServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luceneserver.LuceneServer",
	HandlerType: (*LuceneServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createIndex",
			Handler:    _LuceneServer_CreateIndex_Handler,
		},
		{
			MethodName: "liveSettings",
			Handler:    _LuceneServer_LiveSettings_Handler,
		},
		{
			MethodName: "liveSettingsV2",
			Handler:    _LuceneServer_LiveSettingsV2_Handler,
		},
		{
			MethodName: "registerFields",
			Handler:    _LuceneServer_RegisterFields_Handler,
		},
		{
			MethodName: "updateFields",
			Handler:    _LuceneServer_UpdateFields_Handler,
		},
		{
			MethodName: "settings",
			Handler:    _LuceneServer_Settings_Handler,
		},
		{
			MethodName: "settingsV2",
			Handler:    _LuceneServer_SettingsV2_Handler,
		},
		{
			MethodName: "startIndex",
			Handler:    _LuceneServer_StartIndex_Handler,
		},
		{
			MethodName: "startIndexV2",
			Handler:    _LuceneServer_StartIndexV2_Handler,
		},
		{
			MethodName: "stopIndex",
			Handler:    _LuceneServer_StopIndex_Handler,
		},
		{
			MethodName: "reloadState",
			Handler:    _LuceneServer_ReloadState_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _LuceneServer_Refresh_Handler,
		},
		{
			MethodName: "commit",
			Handler:    _LuceneServer_Commit_Handler,
		},
		{
			MethodName: "stats",
			Handler:    _LuceneServer_Stats_Handler,
		},
		{
			MethodName: "search",
			Handler:    _LuceneServer_Search_Handler,
		},
		{
			MethodName: "searchV2",
			Handler:    _LuceneServer_SearchV2_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _LuceneServer_Delete_Handler,
		},
		{
			MethodName: "deleteByQuery",
			Handler:    _LuceneServer_DeleteByQuery_Handler,
		},
		{
			MethodName: "deleteAll",
			Handler:    _LuceneServer_DeleteAll_Handler,
		},
		{
			MethodName: "deleteIndex",
			Handler:    _LuceneServer_DeleteIndex_Handler,
		},
		{
			MethodName: "createSnapshot",
			Handler:    _LuceneServer_CreateSnapshot_Handler,
		},
		{
			MethodName: "releaseSnapshot",
			Handler:    _LuceneServer_ReleaseSnapshot_Handler,
		},
		{
			MethodName: "getAllSnapshotIndexGen",
			Handler:    _LuceneServer_GetAllSnapshotIndexGen_Handler,
		},
		{
			MethodName: "backupWarmingQueries",
			Handler:    _LuceneServer_BackupWarmingQueries_Handler,
		},
		{
			MethodName: "nodeInfo",
			Handler:    _LuceneServer_NodeInfo_Handler,
		},
		{
			MethodName: "globalState",
			Handler:    _LuceneServer_GlobalState_Handler,
		},
		{
			MethodName: "state",
			Handler:    _LuceneServer_State_Handler,
		},
		{
			MethodName: "indexState",
			Handler:    _LuceneServer_IndexState_Handler,
		},
		{
			MethodName: "status",
			Handler:    _LuceneServer_Status_Handler,
		},
		{
			MethodName: "ready",
			Handler:    _LuceneServer_Ready_Handler,
		},
		{
			MethodName: "metrics",
			Handler:    _LuceneServer_Metrics_Handler,
		},
		{
			MethodName: "indices",
			Handler:    _LuceneServer_Indices_Handler,
		},
		{
			MethodName: "forceMerge",
			Handler:    _LuceneServer_ForceMerge_Handler,
		},
		{
			MethodName: "forceMergeDeletes",
			Handler:    _LuceneServer_ForceMergeDeletes_Handler,
		},
		{
			MethodName: "custom",
			Handler:    _LuceneServer_Custom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "addDocuments",
			Handler:       _LuceneServer_AddDocuments_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "yelp/nrtsearch/luceneserver.proto",
}

// ReplicationServerClient is the client API for ReplicationServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReplicationServerClient interface {
	// Issued by replica on primary node when it comes up
	AddReplicas(ctx context.Context, in *AddReplicaRequest, opts ...grpc.CallOption) (*AddReplicaResponse, error)
	// Issued by replica to receive CopyState from primary
	RecvCopyState(ctx context.Context, in *CopyStateRequest, opts ...grpc.CallOption) (*CopyState, error)
	// Send a file as a stream in chunks
	SendRawFile(ctx context.Context, opts ...grpc.CallOption) (ReplicationServer_SendRawFileClient, error)
	// Receives a file as a stream in chunks. Typically issued by replica on primary
	RecvRawFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (ReplicationServer_RecvRawFileClient, error)
	// Receives a file as a stream in chunks. Uses bidirectional streaming for acks to control in flight data.
	RecvRawFileV2(ctx context.Context, opts ...grpc.CallOption) (ReplicationServer_RecvRawFileV2Client, error)
	// Issued by primary on replica to inform it to start copying files either pre-warming (new merged segments)
	// or when replica comes up first time
	CopyFiles(ctx context.Context, in *CopyFiles, opts ...grpc.CallOption) (ReplicationServer_CopyFilesClient, error)
	// Invoked externally to replica, to notify it that a new NRT point was just created on the primary
	NewNRTPoint(ctx context.Context, in *NewNRTPoint, opts ...grpc.CallOption) (*TransferStatus, error)
	// Invoked externally to primary, to make all recent index operations searchable on the primary and,
	// once copying is done, on the replicas
	WriteNRTPoint(ctx context.Context, in *IndexName, opts ...grpc.CallOption) (*SearcherVersion, error)
	// Invoked externally to replica, to get the current Searcher version on replica
	GetCurrentSearcherVersion(ctx context.Context, in *IndexName, opts ...grpc.CallOption) (*SearcherVersion, error)
	// Invoked externally on primary to find the list of replica nodes this node is connected to for binary
	// replication for an index
	GetConnectedNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
}

type replicationServerClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicationServerClient(cc grpc.ClientConnInterface) ReplicationServerClient {
	return &replicationServerClient{cc}
}

func (c *replicationServerClient) AddReplicas(ctx context.Context, in *AddReplicaRequest, opts ...grpc.CallOption) (*AddReplicaResponse, error) {
	out := new(AddReplicaResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/addReplicas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServerClient) RecvCopyState(ctx context.Context, in *CopyStateRequest, opts ...grpc.CallOption) (*CopyState, error) {
	out := new(CopyState)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/recvCopyState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServerClient) SendRawFile(ctx context.Context, opts ...grpc.CallOption) (ReplicationServer_SendRawFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReplicationServer_serviceDesc.Streams[0], "/luceneserver.ReplicationServer/sendRawFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationServerSendRawFileClient{stream}
	return x, nil
}

type ReplicationServer_SendRawFileClient interface {
	Send(*RawFileChunk) error
	CloseAndRecv() (*TransferStatus, error)
	grpc.ClientStream
}

type replicationServerSendRawFileClient struct {
	grpc.ClientStream
}

func (x *replicationServerSendRawFileClient) Send(m *RawFileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *replicationServerSendRawFileClient) CloseAndRecv() (*TransferStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TransferStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationServerClient) RecvRawFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (ReplicationServer_RecvRawFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReplicationServer_serviceDesc.Streams[1], "/luceneserver.ReplicationServer/recvRawFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationServerRecvRawFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplicationServer_RecvRawFileClient interface {
	Recv() (*RawFileChunk, error)
	grpc.ClientStream
}

type replicationServerRecvRawFileClient struct {
	grpc.ClientStream
}

func (x *replicationServerRecvRawFileClient) Recv() (*RawFileChunk, error) {
	m := new(RawFileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationServerClient) RecvRawFileV2(ctx context.Context, opts ...grpc.CallOption) (ReplicationServer_RecvRawFileV2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_ReplicationServer_serviceDesc.Streams[2], "/luceneserver.ReplicationServer/recvRawFileV2", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationServerRecvRawFileV2Client{stream}
	return x, nil
}

type ReplicationServer_RecvRawFileV2Client interface {
	Send(*FileInfo) error
	Recv() (*RawFileChunk, error)
	grpc.ClientStream
}

type replicationServerRecvRawFileV2Client struct {
	grpc.ClientStream
}

func (x *replicationServerRecvRawFileV2Client) Send(m *FileInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *replicationServerRecvRawFileV2Client) Recv() (*RawFileChunk, error) {
	m := new(RawFileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationServerClient) CopyFiles(ctx context.Context, in *CopyFiles, opts ...grpc.CallOption) (ReplicationServer_CopyFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReplicationServer_serviceDesc.Streams[3], "/luceneserver.ReplicationServer/copyFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationServerCopyFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplicationServer_CopyFilesClient interface {
	Recv() (*TransferStatus, error)
	grpc.ClientStream
}

type replicationServerCopyFilesClient struct {
	grpc.ClientStream
}

func (x *replicationServerCopyFilesClient) Recv() (*TransferStatus, error) {
	m := new(TransferStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationServerClient) NewNRTPoint(ctx context.Context, in *NewNRTPoint, opts ...grpc.CallOption) (*TransferStatus, error) {
	out := new(TransferStatus)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/newNRTPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServerClient) WriteNRTPoint(ctx context.Context, in *IndexName, opts ...grpc.CallOption) (*SearcherVersion, error) {
	out := new(SearcherVersion)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/writeNRTPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServerClient) GetCurrentSearcherVersion(ctx context.Context, in *IndexName, opts ...grpc.CallOption) (*SearcherVersion, error) {
	out := new(SearcherVersion)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/getCurrentSearcherVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServerClient) GetConnectedNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/getConnectedNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicationServerServer is the server API for ReplicationServer service.
type ReplicationServerServer interface {
	// Issued by replica on primary node when it comes up
	AddReplicas(context.Context, *AddReplicaRequest) (*AddReplicaResponse, error)
	// Issued by replica to receive CopyState from primary
	RecvCopyState(context.Context, *CopyStateRequest) (*CopyState, error)
	// Send a file as a stream in chunks
	SendRawFile(ReplicationServer_SendRawFileServer) error
	// Receives a file as a stream in chunks. Typically issued by replica on primary
	RecvRawFile(*FileInfo, ReplicationServer_RecvRawFileServer) error
	// Receives a file as a stream in chunks. Uses bidirectional streaming for acks to control in flight data.
	RecvRawFileV2(ReplicationServer_RecvRawFileV2Server) error
	// Issued by primary on replica to inform it to start copying files either pre-warming (new merged segments)
	// or when replica comes up first time
	CopyFiles(*CopyFiles, ReplicationServer_CopyFilesServer) error
	// Invoked externally to replica, to notify it that a new NRT point was just created on the primary
	NewNRTPoint(context.Context, *NewNRTPoint) (*TransferStatus, error)
	// Invoked externally to primary, to make all recent index operations searchable on the primary and,
	// once copying is done, on the replicas
	WriteNRTPoint(context.Context, *IndexName) (*SearcherVersion, error)
	// Invoked externally to replica, to get the current Searcher version on replica
	GetCurrentSearcherVersion(context.Context, *IndexName) (*SearcherVersion, error)
	// Invoked externally on primary to find the list of replica nodes this node is connected to for binary
	// replication for an index
	GetConnectedNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
}

// UnimplementedReplicationServerServer can be embedded to have forward compatible implementations.
type UnimplementedReplicationServerServer struct {
}

func (*UnimplementedReplicationServerServer) AddReplicas(context.Context, *AddReplicaRequest) (*AddReplicaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReplicas not implemented")
}
func (*UnimplementedReplicationServerServer) RecvCopyState(context.Context, *CopyStateRequest) (*CopyState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvCopyState not implemented")
}
func (*UnimplementedReplicationServerServer) SendRawFile(ReplicationServer_SendRawFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendRawFile not implemented")
}
func (*UnimplementedReplicationServerServer) RecvRawFile(*FileInfo, ReplicationServer_RecvRawFileServer) error {
	return status.Errorf(codes.Unimplemented, "method RecvRawFile not implemented")
}
func (*UnimplementedReplicationServerServer) RecvRawFileV2(ReplicationServer_RecvRawFileV2Server) error {
	return status.Errorf(codes.Unimplemented, "method RecvRawFileV2 not implemented")
}
func (*UnimplementedReplicationServerServer) CopyFiles(*CopyFiles, ReplicationServer_CopyFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method CopyFiles not implemented")
}
func (*UnimplementedReplicationServerServer) NewNRTPoint(context.Context, *NewNRTPoint) (*TransferStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewNRTPoint not implemented")
}
func (*UnimplementedReplicationServerServer) WriteNRTPoint(context.Context, *IndexName) (*SearcherVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteNRTPoint not implemented")
}
func (*UnimplementedReplicationServerServer) GetCurrentSearcherVersion(context.Context, *IndexName) (*SearcherVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSearcherVersion not implemented")
}
func (*UnimplementedReplicationServerServer) GetConnectedNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectedNodes not implemented")
}

func RegisterReplicationServerServer(s *grpc.Server, srv ReplicationServerServer) {
	s.RegisterService(&_ReplicationServer_serviceDesc, srv)
}

func _ReplicationServer_AddReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).AddReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/AddReplicas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).AddReplicas(ctx, req.(*AddReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationServer_RecvCopyState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).RecvCopyState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/RecvCopyState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).RecvCopyState(ctx, req.(*CopyStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationServer_SendRawFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReplicationServerServer).SendRawFile(&replicationServerSendRawFileServer{stream})
}

type ReplicationServer_SendRawFileServer interface {
	SendAndClose(*TransferStatus) error
	Recv() (*RawFileChunk, error)
	grpc.ServerStream
}

type replicationServerSendRawFileServer struct {
	grpc.ServerStream
}

func (x *replicationServerSendRawFileServer) SendAndClose(m *TransferStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *replicationServerSendRawFileServer) Recv() (*RawFileChunk, error) {
	m := new(RawFileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ReplicationServer_RecvRawFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplicationServerServer).RecvRawFile(m, &replicationServerRecvRawFileServer{stream})
}

type ReplicationServer_RecvRawFileServer interface {
	Send(*RawFileChunk) error
	grpc.ServerStream
}

type replicationServerRecvRawFileServer struct {
	grpc.ServerStream
}

func (x *replicationServerRecvRawFileServer) Send(m *RawFileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplicationServer_RecvRawFileV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReplicationServerServer).RecvRawFileV2(&replicationServerRecvRawFileV2Server{stream})
}

type ReplicationServer_RecvRawFileV2Server interface {
	Send(*RawFileChunk) error
	Recv() (*FileInfo, error)
	grpc.ServerStream
}

type replicationServerRecvRawFileV2Server struct {
	grpc.ServerStream
}

func (x *replicationServerRecvRawFileV2Server) Send(m *RawFileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *replicationServerRecvRawFileV2Server) Recv() (*FileInfo, error) {
	m := new(FileInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ReplicationServer_CopyFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CopyFiles)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplicationServerServer).CopyFiles(m, &replicationServerCopyFilesServer{stream})
}

type ReplicationServer_CopyFilesServer interface {
	Send(*TransferStatus) error
	grpc.ServerStream
}

type replicationServerCopyFilesServer struct {
	grpc.ServerStream
}

func (x *replicationServerCopyFilesServer) Send(m *TransferStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplicationServer_NewNRTPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewNRTPoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).NewNRTPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/NewNRTPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).NewNRTPoint(ctx, req.(*NewNRTPoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationServer_WriteNRTPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).WriteNRTPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/WriteNRTPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).WriteNRTPoint(ctx, req.(*IndexName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationServer_GetCurrentSearcherVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).GetCurrentSearcherVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/GetCurrentSearcherVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).GetCurrentSearcherVersion(ctx, req.(*IndexName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationServer_GetConnectedNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).GetConnectedNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/GetConnectedNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).GetConnectedNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReplicationServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luceneserver.ReplicationServer",
	HandlerType: (*ReplicationServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addReplicas",
			Handler:    _ReplicationServer_AddReplicas_Handler,
		},
		{
			MethodName: "recvCopyState",
			Handler:    _ReplicationServer_RecvCopyState_Handler,
		},
		{
			MethodName: "newNRTPoint",
			Handler:    _ReplicationServer_NewNRTPoint_Handler,
		},
		{
			MethodName: "writeNRTPoint",
			Handler:    _ReplicationServer_WriteNRTPoint_Handler,
		},
		{
			MethodName: "getCurrentSearcherVersion",
			Handler:    _ReplicationServer_GetCurrentSearcherVersion_Handler,
		},
		{
			MethodName: "getConnectedNodes",
			Handler:    _ReplicationServer_GetConnectedNodes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sendRawFile",
			Handler:       _ReplicationServer_SendRawFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "recvRawFile",
			Handler:       _ReplicationServer_RecvRawFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "recvRawFileV2",
			Handler:       _ReplicationServer_RecvRawFileV2_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "copyFiles",
			Handler:       _ReplicationServer_CopyFiles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "yelp/nrtsearch/luceneserver.proto",
}
