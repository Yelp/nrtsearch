// Description of NRTSearch Service APIs and message types

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: yelp/nrtsearch/luceneserver.proto

package luceneserver

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//Type of the field
type FieldType int32

const (
	FieldType_ATOM      FieldType = 0 // Text that's indexed as a single token, with DOCS_ONLY and omitting norms.
	FieldType_TEXT      FieldType = 1 // Text that's tokenized and indexed, with the index-time analyzer.
	FieldType_BOOLEAN   FieldType = 2 // Boolean value.
	FieldType_LONG      FieldType = 3 //Long value.
	FieldType_INT       FieldType = 4 // Int value.
	FieldType_DOUBLE    FieldType = 5 //Double value.
	FieldType_FLOAT     FieldType = 6 // Float value.
	FieldType_LAT_LON   FieldType = 7 // A latitude/longitude point.
	FieldType_DATE_TIME FieldType = 8 // Date and optional time.
	// TODO name this "dynamic" instead of "virtual"?
	FieldType_VIRTUAL FieldType = 9 // Virtual field defined with a JavaScript expression.
	// TODO need tests for internal:
	FieldType_INTERNAL FieldType = 10 //Internal field, currently only for holding indexed facets data.
)

// Enum value maps for FieldType.
var (
	FieldType_name = map[int32]string{
		0:  "ATOM",
		1:  "TEXT",
		2:  "BOOLEAN",
		3:  "LONG",
		4:  "INT",
		5:  "DOUBLE",
		6:  "FLOAT",
		7:  "LAT_LON",
		8:  "DATE_TIME",
		9:  "VIRTUAL",
		10: "INTERNAL",
	}
	FieldType_value = map[string]int32{
		"ATOM":      0,
		"TEXT":      1,
		"BOOLEAN":   2,
		"LONG":      3,
		"INT":       4,
		"DOUBLE":    5,
		"FLOAT":     6,
		"LAT_LON":   7,
		"DATE_TIME": 8,
		"VIRTUAL":   9,
		"INTERNAL":  10,
	}
)

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}

func (x FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[0].Descriptor()
}

func (FieldType) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[0]
}

func (x FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldType.Descriptor instead.
func (FieldType) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{0}
}

//How the tokens should be indexed.
type IndexOptions int32

const (
	IndexOptions_DOCS_FREQS_POSITIONS         IndexOptions = 0 // Index doc ids, term frequencies and positions.
	IndexOptions_DOCS                         IndexOptions = 1 // Index only doc ids (for binary search).
	IndexOptions_DOCS_FREQS                   IndexOptions = 2 // Index doc ids and term frequencies.
	IndexOptions_DOCS_FREQS_POSITIONS_OFFSETS IndexOptions = 3 // Index doc ids, term frequencies, positions and offsets.
)

// Enum value maps for IndexOptions.
var (
	IndexOptions_name = map[int32]string{
		0: "DOCS_FREQS_POSITIONS",
		1: "DOCS",
		2: "DOCS_FREQS",
		3: "DOCS_FREQS_POSITIONS_OFFSETS",
	}
	IndexOptions_value = map[string]int32{
		"DOCS_FREQS_POSITIONS":         0,
		"DOCS":                         1,
		"DOCS_FREQS":                   2,
		"DOCS_FREQS_POSITIONS_OFFSETS": 3,
	}
)

func (x IndexOptions) Enum() *IndexOptions {
	p := new(IndexOptions)
	*p = x
	return p
}

func (x IndexOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[1].Descriptor()
}

func (IndexOptions) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[1]
}

func (x IndexOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexOptions.Descriptor instead.
func (IndexOptions) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{1}
}

//Whether/how term vectors should be indexed.
type TermVectors int32

const (
	TermVectors_NO_TERMVECTORS                   TermVectors = 0 // no term vectors are indexed
	TermVectors_TERMS                            TermVectors = 1 // Index terms and freqs only.
	TermVectors_TERMS_POSITIONS                  TermVectors = 2 // Index terms, freqs and positions.
	TermVectors_TERMS_POSITIONS_OFFSETS          TermVectors = 3 // Index terms, freqs, positions and offsets.
	TermVectors_TERMS_POSITIONS_OFFSETS_PAYLOADS TermVectors = 4 // Index terms, freqs, positions, offsets and payloads
)

// Enum value maps for TermVectors.
var (
	TermVectors_name = map[int32]string{
		0: "NO_TERMVECTORS",
		1: "TERMS",
		2: "TERMS_POSITIONS",
		3: "TERMS_POSITIONS_OFFSETS",
		4: "TERMS_POSITIONS_OFFSETS_PAYLOADS",
	}
	TermVectors_value = map[string]int32{
		"NO_TERMVECTORS":                   0,
		"TERMS":                            1,
		"TERMS_POSITIONS":                  2,
		"TERMS_POSITIONS_OFFSETS":          3,
		"TERMS_POSITIONS_OFFSETS_PAYLOADS": 4,
	}
)

func (x TermVectors) Enum() *TermVectors {
	p := new(TermVectors)
	*p = x
	return p
}

func (x TermVectors) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TermVectors) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[2].Descriptor()
}

func (TermVectors) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[2]
}

func (x TermVectors) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TermVectors.Descriptor instead.
func (TermVectors) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{2}
}

//Whether/How this field should index facets, and how.
type FacetType int32

const (
	FacetType_NO_FACETS             FacetType = 0 //No facets are indexed.
	FacetType_FLAT                  FacetType = 1 //Facets are indexed with no hierarchy.
	FacetType_HIERARCHY             FacetType = 2 //Facets are indexed and are hierarchical.
	FacetType_NUMERIC_RANGE         FacetType = 3 //Compute facet counts for custom numeric ranges
	FacetType_SORTED_SET_DOC_VALUES FacetType = 4 //"Use SortedSetDocValuesFacetCounts, which must be flat but don't require a taxonomy index
)

// Enum value maps for FacetType.
var (
	FacetType_name = map[int32]string{
		0: "NO_FACETS",
		1: "FLAT",
		2: "HIERARCHY",
		3: "NUMERIC_RANGE",
		4: "SORTED_SET_DOC_VALUES",
	}
	FacetType_value = map[string]int32{
		"NO_FACETS":             0,
		"FLAT":                  1,
		"HIERARCHY":             2,
		"NUMERIC_RANGE":         3,
		"SORTED_SET_DOC_VALUES": 4,
	}
)

func (x FacetType) Enum() *FacetType {
	p := new(FacetType)
	*p = x
	return p
}

func (x FacetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FacetType) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[3].Descriptor()
}

func (FacetType) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[3]
}

func (x FacetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FacetType.Descriptor instead.
func (FacetType) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{3}
}

type Mode int32

const (
	Mode_STANDALONE Mode = 0
	Mode_PRIMARY    Mode = 1
	Mode_REPLICA    Mode = 2
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "STANDALONE",
		1: "PRIMARY",
		2: "REPLICA",
	}
	Mode_value = map[string]int32{
		"STANDALONE": 0,
		"PRIMARY":    1,
		"REPLICA":    2,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[4].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[4]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{4}
}

type SampleType int32

const (
	SampleType_COUNTER   SampleType = 0
	SampleType_GAUGE     SampleType = 1
	SampleType_SUMMARY   SampleType = 2
	SampleType_HISTOGRAM SampleType = 3
	SampleType_UNTYPED   SampleType = 4
)

// Enum value maps for SampleType.
var (
	SampleType_name = map[int32]string{
		0: "COUNTER",
		1: "GAUGE",
		2: "SUMMARY",
		3: "HISTOGRAM",
		4: "UNTYPED",
	}
	SampleType_value = map[string]int32{
		"COUNTER":   0,
		"GAUGE":     1,
		"SUMMARY":   2,
		"HISTOGRAM": 3,
		"UNTYPED":   4,
	}
)

func (x SampleType) Enum() *SampleType {
	p := new(SampleType)
	*p = x
	return p
}

func (x SampleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SampleType) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[5].Descriptor()
}

func (SampleType) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[5]
}

func (x SampleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SampleType.Descriptor instead.
func (SampleType) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{5}
}

type TransferStatusCode int32

const (
	TransferStatusCode_Unknown TransferStatusCode = 0
	TransferStatusCode_Done    TransferStatusCode = 1
	TransferStatusCode_Failed  TransferStatusCode = 2
	TransferStatusCode_Ongoing TransferStatusCode = 3
)

// Enum value maps for TransferStatusCode.
var (
	TransferStatusCode_name = map[int32]string{
		0: "Unknown",
		1: "Done",
		2: "Failed",
		3: "Ongoing",
	}
	TransferStatusCode_value = map[string]int32{
		"Unknown": 0,
		"Done":    1,
		"Failed":  2,
		"Ongoing": 3,
	}
)

func (x TransferStatusCode) Enum() *TransferStatusCode {
	p := new(TransferStatusCode)
	*p = x
	return p
}

func (x TransferStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[6].Descriptor()
}

func (TransferStatusCode) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[6]
}

func (x TransferStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferStatusCode.Descriptor instead.
func (TransferStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{6}
}

// Input to createIndex
type CreateIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` // name of the index to be created. [a-zA-Z0-9]*
	RootDir   string `protobuf:"bytes,2,opt,name=rootDir,proto3" json:"rootDir,omitempty"`     //rootDirectory that maintains all state files for durability.
}

func (x *CreateIndexRequest) Reset() {
	*x = CreateIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIndexRequest) ProtoMessage() {}

func (x *CreateIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIndexRequest.ProtoReflect.Descriptor instead.
func (*CreateIndexRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{0}
}

func (x *CreateIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *CreateIndexRequest) GetRootDir() string {
	if x != nil {
		return x.RootDir
	}
	return ""
}

// Response from Server to createIndex
type CreateIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *CreateIndexResponse) Reset() {
	*x = CreateIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIndexResponse) ProtoMessage() {}

func (x *CreateIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIndexResponse.ProtoReflect.Descriptor instead.
func (*CreateIndexResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{1}
}

func (x *CreateIndexResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Input to liveSettings
type LiveSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` // name of index whose liveSettings are to be updated.
	//Longest time to wait before reopening IndexSearcher (i.e., periodic background reopen).
	MaxRefreshSec float64 `protobuf:"fixed64,2,opt,name=maxRefreshSec,proto3" json:"maxRefreshSec,omitempty"`
	//Shortest time to wait before reopening IndexSearcher (i.e., when a search is waiting for a specific indexGen).
	MinRefreshSec float64 `protobuf:"fixed64,3,opt,name=minRefreshSec,proto3" json:"minRefreshSec,omitempty"`
	//Non-current searchers older than this are pruned.
	MaxSearcherAgeSec float64 `protobuf:"fixed64,4,opt,name=maxSearcherAgeSec,proto3" json:"maxSearcherAgeSec,omitempty"`
	//Size (in MB) of IndexWriter's RAM buffer.
	IndexRamBufferSizeMB float64 `protobuf:"fixed64,5,opt,name=indexRamBufferSizeMB,proto3" json:"indexRamBufferSizeMB,omitempty"`
}

func (x *LiveSettingsRequest) Reset() {
	*x = LiveSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveSettingsRequest) ProtoMessage() {}

func (x *LiveSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveSettingsRequest.ProtoReflect.Descriptor instead.
func (*LiveSettingsRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{2}
}

func (x *LiveSettingsRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *LiveSettingsRequest) GetMaxRefreshSec() float64 {
	if x != nil {
		return x.MaxRefreshSec
	}
	return 0
}

func (x *LiveSettingsRequest) GetMinRefreshSec() float64 {
	if x != nil {
		return x.MinRefreshSec
	}
	return 0
}

func (x *LiveSettingsRequest) GetMaxSearcherAgeSec() float64 {
	if x != nil {
		return x.MaxSearcherAgeSec
	}
	return 0
}

func (x *LiveSettingsRequest) GetIndexRamBufferSizeMB() float64 {
	if x != nil {
		return x.IndexRamBufferSizeMB
	}
	return 0
}

// Response from Server to liveSettings
type LiveSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *LiveSettingsResponse) Reset() {
	*x = LiveSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveSettingsResponse) ProtoMessage() {}

func (x *LiveSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveSettingsResponse.ProtoReflect.Descriptor instead.
func (*LiveSettingsResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{3}
}

func (x *LiveSettingsResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // name of the field
	Type            FieldType    `protobuf:"varint,2,opt,name=type,proto3,enum=luceneserver.FieldType" json:"type,omitempty"`
	Search          bool         `protobuf:"varint,3,opt,name=search,proto3" json:"search,omitempty"`                                             // True if the value should be available for searching (or numeric range searching, for a numeric field).
	Store           bool         `protobuf:"varint,4,opt,name=store,proto3" json:"store,omitempty"`                                               // True if the value should be stored.
	StoreDocValues  bool         `protobuf:"varint,5,opt,name=storeDocValues,proto3" json:"storeDocValues,omitempty"`                             // Whether to index the value into doc values.
	Sort            bool         `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                                                 // True if the value should be indexed into doc values for sorting.
	Tokenize        bool         `protobuf:"varint,7,opt,name=tokenize,proto3" json:"tokenize,omitempty"`                                         // True if the value should be tokenized.
	Group           bool         `protobuf:"varint,8,opt,name=group,proto3" json:"group,omitempty"`                                               // True if the value should be indexed into doc values for grouping.
	MultiValued     bool         `protobuf:"varint,9,opt,name=multiValued,proto3" json:"multiValued,omitempty"`                                   // True if this field may sometimes have more than one value.
	Highlight       bool         `protobuf:"varint,10,opt,name=highlight,proto3" json:"highlight,omitempty"`                                      // True if the value should be indexed for highlighting.
	OmitNorms       bool         `protobuf:"varint,11,opt,name=omitNorms,proto3" json:"omitNorms,omitempty"`                                      // True if norms are omitted.
	DateTimeFormat  string       `protobuf:"bytes,12,opt,name=dateTimeFormat,proto3" json:"dateTimeFormat,omitempty"`                             // Format string used to parse datetime fields
	PostingsFormat  string       `protobuf:"bytes,13,opt,name=postingsFormat,proto3" json:"postingsFormat,omitempty"`                             // Which PostingsFormat should be used to index this field.
	DocValuesFormat string       `protobuf:"bytes,14,opt,name=docValuesFormat,proto3" json:"docValuesFormat,omitempty"`                           // Which DocValuesFormat should be used to index this field.
	IndexOptions    IndexOptions `protobuf:"varint,15,opt,name=indexOptions,proto3,enum=luceneserver.IndexOptions" json:"indexOptions,omitempty"` //How the tokens should be indexed.
	Expression      string       `protobuf:"bytes,16,opt,name=expression,proto3" json:"expression,omitempty"`                                     // The JavaScript expression defining a virtual field's value (only used with type=virtual).
	//TODO make analyzers message types i.e. StandardAnalyzer, EnglishAnalyzer, CustomAnalyzer etc
	Analyzer       *Analyzer   `protobuf:"bytes,17,opt,name=analyzer,proto3" json:"analyzer,omitempty"`                                      // Analyzer to use for this field during indexing and searching.
	IndexAnalyzer  *Analyzer   `protobuf:"bytes,18,opt,name=indexAnalyzer,proto3" json:"indexAnalyzer,omitempty"`                            // Analyzer to use for this field during indexing.
	SearchAnalyzer *Analyzer   `protobuf:"bytes,19,opt,name=searchAnalyzer,proto3" json:"searchAnalyzer,omitempty"`                          //Analyzer to use for this field during searching.
	TermVectors    TermVectors `protobuf:"varint,20,opt,name=termVectors,proto3,enum=luceneserver.TermVectors" json:"termVectors,omitempty"` // Whether/how term vectors should be indexed.
	//TODO make similarity message types i.d. DefaultSimilarity, CustomSimilarity, BM25Similarity;
	Similarity          string    `protobuf:"bytes,21,opt,name=similarity,proto3" json:"similarity,omitempty"`                    // Which Similarity implementation to use for this field.
	Facet               FacetType `protobuf:"varint,22,opt,name=facet,proto3,enum=luceneserver.FacetType" json:"facet,omitempty"` // Whether this field should index facets, and how.
	FacetIndexFieldName string    `protobuf:"bytes,23,opt,name=facetIndexFieldName,proto3" json:"facetIndexFieldName,omitempty"`  // "Which underlying Lucene index field is used to hold any indexed taxonomy or sorted set doc values facets
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{4}
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetType() FieldType {
	if x != nil {
		return x.Type
	}
	return FieldType_ATOM
}

func (x *Field) GetSearch() bool {
	if x != nil {
		return x.Search
	}
	return false
}

func (x *Field) GetStore() bool {
	if x != nil {
		return x.Store
	}
	return false
}

func (x *Field) GetStoreDocValues() bool {
	if x != nil {
		return x.StoreDocValues
	}
	return false
}

func (x *Field) GetSort() bool {
	if x != nil {
		return x.Sort
	}
	return false
}

func (x *Field) GetTokenize() bool {
	if x != nil {
		return x.Tokenize
	}
	return false
}

func (x *Field) GetGroup() bool {
	if x != nil {
		return x.Group
	}
	return false
}

func (x *Field) GetMultiValued() bool {
	if x != nil {
		return x.MultiValued
	}
	return false
}

func (x *Field) GetHighlight() bool {
	if x != nil {
		return x.Highlight
	}
	return false
}

func (x *Field) GetOmitNorms() bool {
	if x != nil {
		return x.OmitNorms
	}
	return false
}

func (x *Field) GetDateTimeFormat() string {
	if x != nil {
		return x.DateTimeFormat
	}
	return ""
}

func (x *Field) GetPostingsFormat() string {
	if x != nil {
		return x.PostingsFormat
	}
	return ""
}

func (x *Field) GetDocValuesFormat() string {
	if x != nil {
		return x.DocValuesFormat
	}
	return ""
}

func (x *Field) GetIndexOptions() IndexOptions {
	if x != nil {
		return x.IndexOptions
	}
	return IndexOptions_DOCS_FREQS_POSITIONS
}

func (x *Field) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *Field) GetAnalyzer() *Analyzer {
	if x != nil {
		return x.Analyzer
	}
	return nil
}

func (x *Field) GetIndexAnalyzer() *Analyzer {
	if x != nil {
		return x.IndexAnalyzer
	}
	return nil
}

func (x *Field) GetSearchAnalyzer() *Analyzer {
	if x != nil {
		return x.SearchAnalyzer
	}
	return nil
}

func (x *Field) GetTermVectors() TermVectors {
	if x != nil {
		return x.TermVectors
	}
	return TermVectors_NO_TERMVECTORS
}

func (x *Field) GetSimilarity() string {
	if x != nil {
		return x.Similarity
	}
	return ""
}

func (x *Field) GetFacet() FacetType {
	if x != nil {
		return x.Facet
	}
	return FacetType_NO_FACETS
}

func (x *Field) GetFacetIndexFieldName() string {
	if x != nil {
		return x.FacetIndexFieldName
	}
	return ""
}

// Input to registerFields
type FieldDefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string   `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` // name of the index against which the field is to be created
	Field     []*Field `protobuf:"bytes,2,rep,name=field,proto3" json:"field,omitempty"`
}

func (x *FieldDefRequest) Reset() {
	*x = FieldDefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldDefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldDefRequest) ProtoMessage() {}

func (x *FieldDefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldDefRequest.ProtoReflect.Descriptor instead.
func (*FieldDefRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{5}
}

func (x *FieldDefRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *FieldDefRequest) GetField() []*Field {
	if x != nil {
		return x.Field
	}
	return nil
}

// Response from Server for registerFields
type FieldDefResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *FieldDefResponse) Reset() {
	*x = FieldDefResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldDefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldDefResponse) ProtoMessage() {}

func (x *FieldDefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldDefResponse.ProtoReflect.Descriptor instead.
func (*FieldDefResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{6}
}

func (x *FieldDefResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Input to settings
type SettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName                              string      `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`                                                            // Index name
	MergeMaxMBPerSec                       float64     `protobuf:"fixed64,2,opt,name=mergeMaxMBPerSec,proto3" json:"mergeMaxMBPerSec,omitempty"`                                            // Rate limit merges to at most this many MB/sec
	NrtCachingDirectoryMaxMergeSizeMB      float64     `protobuf:"fixed64,3,opt,name=nrtCachingDirectoryMaxMergeSizeMB,proto3" json:"nrtCachingDirectoryMaxMergeSizeMB,omitempty"`          // Largest merged segment size to cache in RAMDirectory, default: 5.0MB
	NrtCachingDirectoryMaxSizeMB           float64     `protobuf:"fixed64,4,opt,name=nrtCachingDirectoryMaxSizeMB,proto3" json:"nrtCachingDirectoryMaxSizeMB,omitempty"`                    // Largest overall size for all files cached in NRTCachingDirectory; set to -1 to disable NRTCachingDirectory default: 60.0MB
	ConcurrentMergeSchedulerMaxThreadCount int32       `protobuf:"varint,5,opt,name=concurrentMergeSchedulerMaxThreadCount,proto3" json:"concurrentMergeSchedulerMaxThreadCount,omitempty"` // How many merge threads to allow at once
	ConcurrentMergeSchedulerMaxMergeCount  int32       `protobuf:"varint,6,opt,name=concurrentMergeSchedulerMaxMergeCount,proto3" json:"concurrentMergeSchedulerMaxMergeCount,omitempty"`   // Maximum backlog of pending merges before indexing threads are stalled
	IndexSort                              *SortFields `protobuf:"bytes,7,opt,name=indexSort,proto3" json:"indexSort,omitempty"`                                                            // Index time sorting; can only be written once", SearchHandler.SORT_TYPE
	IndexVerbose                           bool        `protobuf:"varint,8,opt,name=indexVerbose,proto3" json:"indexVerbose,omitempty"`                                                     // Turn on IndexWriter's infoStream (to stdout)
	IndexMergeSchedulerAutoThrottle        bool        `protobuf:"varint,9,opt,name=indexMergeSchedulerAutoThrottle,proto3" json:"indexMergeSchedulerAutoThrottle,omitempty"`               // Turn on/off the merge scheduler's auto throttling
	NormsFormat                            string      `protobuf:"bytes,10,opt,name=normsFormat,proto3" json:"normsFormat,omitempty"`                                                       // Which NormsFormat should be used for all indexed fields. default: Lucene80NormsFormat
	// Base Directory implementation to use (NRTCachingDirectory will wrap this) either one of the core implementations (FSDirectory, MMapDirectory, NIOFSDirectory, SimpleFSDirectory, RAMDirectory (for temporary indices!) or a fully qualified path to a Directory implementation that has a public constructor taking a single File argument default: FSDirectory
	Directory string `protobuf:"bytes,11,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *SettingsRequest) Reset() {
	*x = SettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsRequest) ProtoMessage() {}

func (x *SettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsRequest.ProtoReflect.Descriptor instead.
func (*SettingsRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{7}
}

func (x *SettingsRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *SettingsRequest) GetMergeMaxMBPerSec() float64 {
	if x != nil {
		return x.MergeMaxMBPerSec
	}
	return 0
}

func (x *SettingsRequest) GetNrtCachingDirectoryMaxMergeSizeMB() float64 {
	if x != nil {
		return x.NrtCachingDirectoryMaxMergeSizeMB
	}
	return 0
}

func (x *SettingsRequest) GetNrtCachingDirectoryMaxSizeMB() float64 {
	if x != nil {
		return x.NrtCachingDirectoryMaxSizeMB
	}
	return 0
}

func (x *SettingsRequest) GetConcurrentMergeSchedulerMaxThreadCount() int32 {
	if x != nil {
		return x.ConcurrentMergeSchedulerMaxThreadCount
	}
	return 0
}

func (x *SettingsRequest) GetConcurrentMergeSchedulerMaxMergeCount() int32 {
	if x != nil {
		return x.ConcurrentMergeSchedulerMaxMergeCount
	}
	return 0
}

func (x *SettingsRequest) GetIndexSort() *SortFields {
	if x != nil {
		return x.IndexSort
	}
	return nil
}

func (x *SettingsRequest) GetIndexVerbose() bool {
	if x != nil {
		return x.IndexVerbose
	}
	return false
}

func (x *SettingsRequest) GetIndexMergeSchedulerAutoThrottle() bool {
	if x != nil {
		return x.IndexMergeSchedulerAutoThrottle
	}
	return false
}

func (x *SettingsRequest) GetNormsFormat() string {
	if x != nil {
		return x.NormsFormat
	}
	return ""
}

func (x *SettingsRequest) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

// Settings Response returned from Server
type SettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *SettingsResponse) Reset() {
	*x = SettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsResponse) ProtoMessage() {}

func (x *SettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsResponse.ProtoReflect.Descriptor instead.
func (*SettingsResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{8}
}

func (x *SettingsResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Start the index
type StartIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName      string        `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`               //index name
	Mode           Mode          `protobuf:"varint,2,opt,name=mode,proto3,enum=luceneserver.Mode" json:"mode,omitempty"` //Standalone, NRT primary or replica mode to start this index.
	PrimaryGen     int64         `protobuf:"varint,3,opt,name=primaryGen,proto3" json:"primaryGen,omitempty"`            //primary, the generation of this primary (should increment each time a new primary starts for this index)
	PrimaryAddress string        `protobuf:"bytes,4,opt,name=primaryAddress,proto3" json:"primaryAddress,omitempty"`     //replica, the IP address or host name of the remote primary
	Port           int32         `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`                        //replica, the TCP port of the remote primary
	Restore        *RestoreIndex `protobuf:"bytes,6,opt,name=restore,proto3" json:"restore,omitempty"`                   // restore index from backup
}

func (x *StartIndexRequest) Reset() {
	*x = StartIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartIndexRequest) ProtoMessage() {}

func (x *StartIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartIndexRequest.ProtoReflect.Descriptor instead.
func (*StartIndexRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{9}
}

func (x *StartIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *StartIndexRequest) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_STANDALONE
}

func (x *StartIndexRequest) GetPrimaryGen() int64 {
	if x != nil {
		return x.PrimaryGen
	}
	return 0
}

func (x *StartIndexRequest) GetPrimaryAddress() string {
	if x != nil {
		return x.PrimaryAddress
	}
	return ""
}

func (x *StartIndexRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *StartIndexRequest) GetRestore() *RestoreIndex {
	if x != nil {
		return x.Restore
	}
	return nil
}

type StartIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxDoc      int32   `protobuf:"varint,1,opt,name=maxDoc,proto3" json:"maxDoc,omitempty"`            //one greater than the largest possible document number
	NumDocs     int32   `protobuf:"varint,2,opt,name=numDocs,proto3" json:"numDocs,omitempty"`          //the number of documents in this index.
	Segments    string  `protobuf:"bytes,3,opt,name=segments,proto3" json:"segments,omitempty"`         //string representation of the IndexReader implementation
	StartTimeMS float64 `protobuf:"fixed64,4,opt,name=startTimeMS,proto3" json:"startTimeMS,omitempty"` //time taken to start the index
}

func (x *StartIndexResponse) Reset() {
	*x = StartIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartIndexResponse) ProtoMessage() {}

func (x *StartIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartIndexResponse.ProtoReflect.Descriptor instead.
func (*StartIndexResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{10}
}

func (x *StartIndexResponse) GetMaxDoc() int32 {
	if x != nil {
		return x.MaxDoc
	}
	return 0
}

func (x *StartIndexResponse) GetNumDocs() int32 {
	if x != nil {
		return x.NumDocs
	}
	return 0
}

func (x *StartIndexResponse) GetSegments() string {
	if x != nil {
		return x.Segments
	}
	return ""
}

func (x *StartIndexResponse) GetStartTimeMS() float64 {
	if x != nil {
		return x.StartTimeMS
	}
	return 0
}

type AddDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string                                          `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`                                                                                   //name of the index
	Fields    map[string]*AddDocumentRequest_MultiValuedField `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //map of field name to a list of string values.
}

func (x *AddDocumentRequest) Reset() {
	*x = AddDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDocumentRequest) ProtoMessage() {}

func (x *AddDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDocumentRequest.ProtoReflect.Descriptor instead.
func (*AddDocumentRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{11}
}

func (x *AddDocumentRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *AddDocumentRequest) GetFields() map[string]*AddDocumentRequest_MultiValuedField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type AddDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenId string `protobuf:"bytes,1,opt,name=genId,proto3" json:"genId,omitempty"`
}

func (x *AddDocumentResponse) Reset() {
	*x = AddDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDocumentResponse) ProtoMessage() {}

func (x *AddDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDocumentResponse.ProtoReflect.Descriptor instead.
func (*AddDocumentResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{12}
}

func (x *AddDocumentResponse) GetGenId() string {
	if x != nil {
		return x.GenId
	}
	return ""
}

type RefreshRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //index name to be refreshed
}

func (x *RefreshRequest) Reset() {
	*x = RefreshRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshRequest) ProtoMessage() {}

func (x *RefreshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshRequest.ProtoReflect.Descriptor instead.
func (*RefreshRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{13}
}

func (x *RefreshRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type RefreshResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshTimeMS float64 `protobuf:"fixed64,1,opt,name=refreshTimeMS,proto3" json:"refreshTimeMS,omitempty"` //time taken in milliseconds to refresh the index
}

func (x *RefreshResponse) Reset() {
	*x = RefreshResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshResponse) ProtoMessage() {}

func (x *RefreshResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshResponse.ProtoReflect.Descriptor instead.
func (*RefreshResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{14}
}

func (x *RefreshResponse) GetRefreshTimeMS() float64 {
	if x != nil {
		return x.RefreshTimeMS
	}
	return 0
}

type CommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //index to commit
}

func (x *CommitRequest) Reset() {
	*x = CommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest) ProtoMessage() {}

func (x *CommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRequest.ProtoReflect.Descriptor instead.
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{15}
}

func (x *CommitRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type CommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//  sequence number of the last operation in the commit.  All sequence numbers less than this value
	//will be reflected in the commit, and all others will not.
	Gen int64 `protobuf:"varint,1,opt,name=gen,proto3" json:"gen,omitempty"`
}

func (x *CommitResponse) Reset() {
	*x = CommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitResponse) ProtoMessage() {}

func (x *CommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitResponse.ProtoReflect.Descriptor instead.
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{16}
}

func (x *CommitResponse) GetGen() int64 {
	if x != nil {
		return x.Gen
	}
	return 0
}

type StatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //retrieve stats of the index
}

func (x *StatsRequest) Reset() {
	*x = StatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsRequest) ProtoMessage() {}

func (x *StatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsRequest.ProtoReflect.Descriptor instead.
func (*StatsRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{17}
}

func (x *StatsRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type StatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ord int32 `protobuf:"varint,1,opt,name=ord,proto3" json:"ord,omitempty"` //shard ordinal
	// The total number of docs in this index, including docs not yet flushed (still in the RAM buffer),
	//not counting deletions.
	MaxDoc int32 `protobuf:"varint,2,opt,name=maxDoc,proto3" json:"maxDoc,omitempty"`
	//*
	// The total number of docs in this index, including
	// docs not yet flushed (still in the RAM buffer), and
	// including deletions. NOTE: buffered deletions
	// are not counted.  If you really need these to be
	// counted you should call {@link IndexWriter#commit()} first.
	NumDocs         int32       `protobuf:"varint,3,opt,name=numDocs,proto3" json:"numDocs,omitempty"`
	DirSize         int64       `protobuf:"varint,4,opt,name=dirSize,proto3" json:"dirSize,omitempty"`                //size of the this indexDir
	State           string      `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`                     //state of the index
	Taxonomy        *Taxonomy   `protobuf:"bytes,6,opt,name=taxonomy,proto3" json:"taxonomy,omitempty"`               //Taxonomy(facets) stats
	Searchers       []*Searcher `protobuf:"bytes,7,rep,name=searchers,proto3" json:"searchers,omitempty"`             //Searcher stats
	CurrentSearcher *Searcher   `protobuf:"bytes,8,opt,name=currentSearcher,proto3" json:"currentSearcher,omitempty"` //Current Searcher stats
}

func (x *StatsResponse) Reset() {
	*x = StatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsResponse) ProtoMessage() {}

func (x *StatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsResponse.ProtoReflect.Descriptor instead.
func (*StatsResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{18}
}

func (x *StatsResponse) GetOrd() int32 {
	if x != nil {
		return x.Ord
	}
	return 0
}

func (x *StatsResponse) GetMaxDoc() int32 {
	if x != nil {
		return x.MaxDoc
	}
	return 0
}

func (x *StatsResponse) GetNumDocs() int32 {
	if x != nil {
		return x.NumDocs
	}
	return 0
}

func (x *StatsResponse) GetDirSize() int64 {
	if x != nil {
		return x.DirSize
	}
	return 0
}

func (x *StatsResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *StatsResponse) GetTaxonomy() *Taxonomy {
	if x != nil {
		return x.Taxonomy
	}
	return nil
}

func (x *StatsResponse) GetSearchers() []*Searcher {
	if x != nil {
		return x.Searchers
	}
	return nil
}

func (x *StatsResponse) GetCurrentSearcher() *Searcher {
	if x != nil {
		return x.CurrentSearcher
	}
	return nil
}

type Taxonomy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumOrds  int32  `protobuf:"varint,1,opt,name=numOrds,proto3" json:"numOrds,omitempty"`  //number of docs in this taxonomy reader
	Segments string `protobuf:"bytes,2,opt,name=segments,proto3" json:"segments,omitempty"` //string representation of segments
}

func (x *Taxonomy) Reset() {
	*x = Taxonomy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Taxonomy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taxonomy) ProtoMessage() {}

func (x *Taxonomy) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taxonomy.ProtoReflect.Descriptor instead.
func (*Taxonomy) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{19}
}

func (x *Taxonomy) GetNumOrds() int32 {
	if x != nil {
		return x.NumOrds
	}
	return 0
}

func (x *Taxonomy) GetSegments() string {
	if x != nil {
		return x.Segments
	}
	return ""
}

type Searcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the version recorded in the commit that the reader opened.
	//This version is advanced every time a change is made with IndexWriter.
	Version         int64   `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	NumDocs         int32   `protobuf:"varint,2,opt,name=numDocs,proto3" json:"numDocs,omitempty"`                  //total number of docs in this index
	Segments        string  `protobuf:"bytes,3,opt,name=segments,proto3" json:"segments,omitempty"`                 //string representation of segments
	StaleAgeSeconds float64 `protobuf:"fixed64,4,opt,name=staleAgeSeconds,proto3" json:"staleAgeSeconds,omitempty"` //how much time has passed since this searcher was the current (live) searcher
}

func (x *Searcher) Reset() {
	*x = Searcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Searcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Searcher) ProtoMessage() {}

func (x *Searcher) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Searcher.ProtoReflect.Descriptor instead.
func (*Searcher) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{20}
}

func (x *Searcher) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Searcher) GetNumDocs() int32 {
	if x != nil {
		return x.NumDocs
	}
	return 0
}

func (x *Searcher) GetSegments() string {
	if x != nil {
		return x.Segments
	}
	return ""
}

func (x *Searcher) GetStaleAgeSeconds() float64 {
	if x != nil {
		return x.StaleAgeSeconds
	}
	return 0
}

type DeleteAllDocumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //index to delete all documents  from
}

func (x *DeleteAllDocumentsRequest) Reset() {
	*x = DeleteAllDocumentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllDocumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllDocumentsRequest) ProtoMessage() {}

func (x *DeleteAllDocumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllDocumentsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAllDocumentsRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteAllDocumentsRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type DeleteAllDocumentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenId string `protobuf:"bytes,1,opt,name=genId,proto3" json:"genId,omitempty"` //Returns the index generation (indexGen) that reflects the deletion.
}

func (x *DeleteAllDocumentsResponse) Reset() {
	*x = DeleteAllDocumentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllDocumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllDocumentsResponse) ProtoMessage() {}

func (x *DeleteAllDocumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllDocumentsResponse.ProtoReflect.Descriptor instead.
func (*DeleteAllDocumentsResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteAllDocumentsResponse) GetGenId() string {
	if x != nil {
		return x.GenId
	}
	return ""
}

type DeleteIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //index to delete
}

func (x *DeleteIndexRequest) Reset() {
	*x = DeleteIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIndexRequest) ProtoMessage() {}

func (x *DeleteIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIndexRequest.ProtoReflect.Descriptor instead.
func (*DeleteIndexRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type DeleteIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok string `protobuf:"bytes,1,opt,name=ok,proto3" json:"ok,omitempty"` //Returns "ok" string on  success
}

func (x *DeleteIndexResponse) Reset() {
	*x = DeleteIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIndexResponse) ProtoMessage() {}

func (x *DeleteIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIndexResponse.ProtoReflect.Descriptor instead.
func (*DeleteIndexResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteIndexResponse) GetOk() string {
	if x != nil {
		return x.Ok
	}
	return ""
}

type DummyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok string `protobuf:"bytes,1,opt,name=ok,proto3" json:"ok,omitempty"` // returns "ok" string on success
}

func (x *DummyResponse) Reset() {
	*x = DummyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DummyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DummyResponse) ProtoMessage() {}

func (x *DummyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DummyResponse.ProtoReflect.Descriptor instead.
func (*DummyResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{25}
}

func (x *DummyResponse) GetOk() string {
	if x != nil {
		return x.Ok
	}
	return ""
}

type StopIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //index name to stop
}

func (x *StopIndexRequest) Reset() {
	*x = StopIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopIndexRequest) ProtoMessage() {}

func (x *StopIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopIndexRequest.ProtoReflect.Descriptor instead.
func (*StopIndexRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{26}
}

func (x *StopIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type BuildSuggestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //index name
	// Types that are assignable to Suggester:
	//	*BuildSuggestRequest_InfixSuggester
	//	*BuildSuggestRequest_AnalyzingSuggester
	//	*BuildSuggestRequest_FuzzySuggester
	Suggester isBuildSuggestRequest_Suggester `protobuf_oneof:"Suggester"`
	// Types that are assignable to Source:
	//	*BuildSuggestRequest_LocalSource
	//	*BuildSuggestRequest_NonLocalSource
	Source      isBuildSuggestRequest_Source `protobuf_oneof:"Source"`
	SuggestName string                       `protobuf:"bytes,7,opt,name=suggestName,proto3" json:"suggestName,omitempty"` //Unique name for this suggest build.
}

func (x *BuildSuggestRequest) Reset() {
	*x = BuildSuggestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildSuggestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildSuggestRequest) ProtoMessage() {}

func (x *BuildSuggestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildSuggestRequest.ProtoReflect.Descriptor instead.
func (*BuildSuggestRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{27}
}

func (x *BuildSuggestRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (m *BuildSuggestRequest) GetSuggester() isBuildSuggestRequest_Suggester {
	if m != nil {
		return m.Suggester
	}
	return nil
}

func (x *BuildSuggestRequest) GetInfixSuggester() *InfixSuggester {
	if x, ok := x.GetSuggester().(*BuildSuggestRequest_InfixSuggester); ok {
		return x.InfixSuggester
	}
	return nil
}

func (x *BuildSuggestRequest) GetAnalyzingSuggester() *AnalyzingSuggester {
	if x, ok := x.GetSuggester().(*BuildSuggestRequest_AnalyzingSuggester); ok {
		return x.AnalyzingSuggester
	}
	return nil
}

func (x *BuildSuggestRequest) GetFuzzySuggester() *FuzzySuggester {
	if x, ok := x.GetSuggester().(*BuildSuggestRequest_FuzzySuggester); ok {
		return x.FuzzySuggester
	}
	return nil
}

func (m *BuildSuggestRequest) GetSource() isBuildSuggestRequest_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *BuildSuggestRequest) GetLocalSource() *SuggestLocalSource {
	if x, ok := x.GetSource().(*BuildSuggestRequest_LocalSource); ok {
		return x.LocalSource
	}
	return nil
}

func (x *BuildSuggestRequest) GetNonLocalSource() *SuggestNonLocalSource {
	if x, ok := x.GetSource().(*BuildSuggestRequest_NonLocalSource); ok {
		return x.NonLocalSource
	}
	return nil
}

func (x *BuildSuggestRequest) GetSuggestName() string {
	if x != nil {
		return x.SuggestName
	}
	return ""
}

type isBuildSuggestRequest_Suggester interface {
	isBuildSuggestRequest_Suggester()
}

type BuildSuggestRequest_InfixSuggester struct {
	//A suggester that matches terms anywhere in the input text, not just as a prefix. (see @lucene:org:server.InfixSuggester)
	InfixSuggester *InfixSuggester `protobuf:"bytes,2,opt,name=infixSuggester,proto3,oneof"`
}

type BuildSuggestRequest_AnalyzingSuggester struct {
	// Suggester that first analyzes the surface form, adds the analyzed form to a weighted FST, and then does the same thing at lookup time (see @lucene:suggest:org.apache.lucene.search.suggest.analyzing.AnalyzingSuggester
	AnalyzingSuggester *AnalyzingSuggester `protobuf:"bytes,3,opt,name=analyzingSuggester,proto3,oneof"`
}

type BuildSuggestRequest_FuzzySuggester struct {
	// Implements a fuzzy AnalyzingSuggester (see @lucene:suggest:org.apache.lucene.search.suggest.analyzing.FuzzySuggester
	FuzzySuggester *FuzzySuggester `protobuf:"bytes,4,opt,name=fuzzySuggester,proto3,oneof"`
}

func (*BuildSuggestRequest_InfixSuggester) isBuildSuggestRequest_Suggester() {}

func (*BuildSuggestRequest_AnalyzingSuggester) isBuildSuggestRequest_Suggester() {}

func (*BuildSuggestRequest_FuzzySuggester) isBuildSuggestRequest_Suggester() {}

type isBuildSuggestRequest_Source interface {
	isBuildSuggestRequest_Source()
}

type BuildSuggestRequest_LocalSource struct {
	LocalSource *SuggestLocalSource `protobuf:"bytes,5,opt,name=localSource,proto3,oneof"`
}

type BuildSuggestRequest_NonLocalSource struct {
	NonLocalSource *SuggestNonLocalSource `protobuf:"bytes,6,opt,name=nonLocalSource,proto3,oneof"`
}

func (*BuildSuggestRequest_LocalSource) isBuildSuggestRequest_Source() {}

func (*BuildSuggestRequest_NonLocalSource) isBuildSuggestRequest_Source() {}

type BuildSuggestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeInBytes int64 `protobuf:"varint,1,opt,name=sizeInBytes,proto3" json:"sizeInBytes,omitempty"` //size in bytes in RAM if using AnalyzingSuggester
	Count       int64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`             //total number of suggester entries
}

func (x *BuildSuggestResponse) Reset() {
	*x = BuildSuggestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildSuggestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildSuggestResponse) ProtoMessage() {}

func (x *BuildSuggestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildSuggestResponse.ProtoReflect.Descriptor instead.
func (*BuildSuggestResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{28}
}

func (x *BuildSuggestResponse) GetSizeInBytes() int64 {
	if x != nil {
		return x.SizeInBytes
	}
	return 0
}

func (x *BuildSuggestResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SuggestLookupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName        string   `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`                //Index name
	SuggestName      string   `protobuf:"bytes,2,opt,name=suggestName,proto3" json:"suggestName,omitempty"`            //Which suggester to use
	Text             string   `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`                          //Text to suggest from
	Highlight        bool     `protobuf:"varint,4,opt,name=highlight,proto3" json:"highlight,omitempty"`               //True if the suggestions should be highlighted (currently only works with AnalyzingInfixSuggester)
	AllTermsRequired bool     `protobuf:"varint,5,opt,name=allTermsRequired,proto3" json:"allTermsRequired,omitempty"` //If true then all terms must be found (this only applies to InfixSuggester currently)
	Contexts         []string `protobuf:"bytes,6,rep,name=contexts,proto3" json:"contexts,omitempty"`                  //Which contexts to filter by
	Count            int32    `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`                       //How many suggestions to return, default = 5
}

func (x *SuggestLookupRequest) Reset() {
	*x = SuggestLookupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestLookupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestLookupRequest) ProtoMessage() {}

func (x *SuggestLookupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestLookupRequest.ProtoReflect.Descriptor instead.
func (*SuggestLookupRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{29}
}

func (x *SuggestLookupRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *SuggestLookupRequest) GetSuggestName() string {
	if x != nil {
		return x.SuggestName
	}
	return ""
}

func (x *SuggestLookupRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SuggestLookupRequest) GetHighlight() bool {
	if x != nil {
		return x.Highlight
	}
	return false
}

func (x *SuggestLookupRequest) GetAllTermsRequired() bool {
	if x != nil {
		return x.AllTermsRequired
	}
	return false
}

func (x *SuggestLookupRequest) GetContexts() []string {
	if x != nil {
		return x.Contexts
	}
	return nil
}

func (x *SuggestLookupRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type SuggestLookupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*OneSuggestLookupResponse `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"` //SuggestLookup results as an array
}

func (x *SuggestLookupResponse) Reset() {
	*x = SuggestLookupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestLookupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestLookupResponse) ProtoMessage() {}

func (x *SuggestLookupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestLookupResponse.ProtoReflect.Descriptor instead.
func (*SuggestLookupResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{30}
}

func (x *SuggestLookupResponse) GetResults() []*OneSuggestLookupResponse {
	if x != nil {
		return x.Results
	}
	return nil
}

type OneSuggestLookupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to HighlightKey:
	//	*OneSuggestLookupResponse_SuggestLookupHighlight
	//	*OneSuggestLookupResponse_Key
	HighlightKey isOneSuggestLookupResponse_HighlightKey `protobuf_oneof:"HighlightKey"`
	Weight       int64                                   `protobuf:"varint,3,opt,name=weight,proto3" json:"weight,omitempty"`  //the key's weight
	Payload      string                                  `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"` //the key's payload (null if not present)
}

func (x *OneSuggestLookupResponse) Reset() {
	*x = OneSuggestLookupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneSuggestLookupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneSuggestLookupResponse) ProtoMessage() {}

func (x *OneSuggestLookupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneSuggestLookupResponse.ProtoReflect.Descriptor instead.
func (*OneSuggestLookupResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{31}
}

func (m *OneSuggestLookupResponse) GetHighlightKey() isOneSuggestLookupResponse_HighlightKey {
	if m != nil {
		return m.HighlightKey
	}
	return nil
}

func (x *OneSuggestLookupResponse) GetSuggestLookupHighlight() *SuggestLookupHighlight {
	if x, ok := x.GetHighlightKey().(*OneSuggestLookupResponse_SuggestLookupHighlight); ok {
		return x.SuggestLookupHighlight
	}
	return nil
}

func (x *OneSuggestLookupResponse) GetKey() string {
	if x, ok := x.GetHighlightKey().(*OneSuggestLookupResponse_Key); ok {
		return x.Key
	}
	return ""
}

func (x *OneSuggestLookupResponse) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *OneSuggestLookupResponse) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type isOneSuggestLookupResponse_HighlightKey interface {
	isOneSuggestLookupResponse_HighlightKey()
}

type OneSuggestLookupResponse_SuggestLookupHighlight struct {
	// Expert: custom Object to hold the result of a highlighted suggestion (currently only works with AnalyzingInfixSuggester)
	SuggestLookupHighlight *SuggestLookupHighlight `protobuf:"bytes,1,opt,name=suggestLookupHighlight,proto3,oneof"`
}

type OneSuggestLookupResponse_Key struct {
	// the key's text
	Key string `protobuf:"bytes,2,opt,name=key,proto3,oneof"`
}

func (*OneSuggestLookupResponse_SuggestLookupHighlight) isOneSuggestLookupResponse_HighlightKey() {}

func (*OneSuggestLookupResponse_Key) isOneSuggestLookupResponse_HighlightKey() {}

type SuggestLookupHighlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OneHighlight []*OneHighlight `protobuf:"bytes,1,rep,name=oneHighlight,proto3" json:"oneHighlight,omitempty"`
}

func (x *SuggestLookupHighlight) Reset() {
	*x = SuggestLookupHighlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestLookupHighlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestLookupHighlight) ProtoMessage() {}

func (x *SuggestLookupHighlight) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestLookupHighlight.ProtoReflect.Descriptor instead.
func (*SuggestLookupHighlight) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{32}
}

func (x *SuggestLookupHighlight) GetOneHighlight() []*OneHighlight {
	if x != nil {
		return x.OneHighlight
	}
	return nil
}

type OneHighlight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHit bool   `protobuf:"varint,1,opt,name=isHit,proto3" json:"isHit,omitempty"`
	Text  string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *OneHighlight) Reset() {
	*x = OneHighlight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneHighlight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneHighlight) ProtoMessage() {}

func (x *OneHighlight) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneHighlight.ProtoReflect.Descriptor instead.
func (*OneHighlight) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{33}
}

func (x *OneHighlight) GetIsHit() bool {
	if x != nil {
		return x.IsHit
	}
	return false
}

func (x *OneHighlight) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type SuggestLocalSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Local file (to the server) to read suggestions + weights from; format is weight U+001F suggestion U+001F payload,
	//one per line, with suggestion UTF-8 encoded. If this option is used then searcher, suggestField,
	//weightField/Expression, payloadField should not be specified.
	LocalFile   string `protobuf:"bytes,1,opt,name=localFile,proto3" json:"localFile,omitempty"`
	HasContexts bool   `protobuf:"varint,2,opt,name=hasContexts,proto3" json:"hasContexts,omitempty"` //True if this file provides per-suggestion contexts.
}

func (x *SuggestLocalSource) Reset() {
	*x = SuggestLocalSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestLocalSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestLocalSource) ProtoMessage() {}

func (x *SuggestLocalSource) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestLocalSource.ProtoReflect.Descriptor instead.
func (*SuggestLocalSource) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{34}
}

func (x *SuggestLocalSource) GetLocalFile() string {
	if x != nil {
		return x.LocalFile
	}
	return ""
}

func (x *SuggestLocalSource) GetHasContexts() bool {
	if x != nil {
		return x.HasContexts
	}
	return false
}

type SuggestNonLocalSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specific searcher version to use for pull suggestions to build.  There are three different ways to specify a searcher version.
	// Types that are assignable to Searcher:
	//	*SuggestNonLocalSource_IndexGen
	//	*SuggestNonLocalSource_Version
	//	*SuggestNonLocalSource_Snapshot
	Searcher     isSuggestNonLocalSource_Searcher `protobuf_oneof:"Searcher"`
	SuggestField string                           `protobuf:"bytes,4,opt,name=suggestField,proto3" json:"suggestField,omitempty"` //Field (from stored documents) containing the suggestion text
	// Types that are assignable to Weight:
	//	*SuggestNonLocalSource_WeightField
	//	*SuggestNonLocalSource_WeightExpression
	Weight       isSuggestNonLocalSource_Weight `protobuf_oneof:"Weight"`
	PayloadField string                         `protobuf:"bytes,7,opt,name=payloadField,proto3" json:"payloadField,omitempty"` //Optional binary or string field (from stored documents) containing the payload
	ContextField string                         `protobuf:"bytes,8,opt,name=contextField,proto3" json:"contextField,omitempty"` //Numeric field (from stored documents) containing the context which can be later filtered on during lookup
}

func (x *SuggestNonLocalSource) Reset() {
	*x = SuggestNonLocalSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuggestNonLocalSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuggestNonLocalSource) ProtoMessage() {}

func (x *SuggestNonLocalSource) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuggestNonLocalSource.ProtoReflect.Descriptor instead.
func (*SuggestNonLocalSource) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{35}
}

func (m *SuggestNonLocalSource) GetSearcher() isSuggestNonLocalSource_Searcher {
	if m != nil {
		return m.Searcher
	}
	return nil
}

func (x *SuggestNonLocalSource) GetIndexGen() int64 {
	if x, ok := x.GetSearcher().(*SuggestNonLocalSource_IndexGen); ok {
		return x.IndexGen
	}
	return 0
}

func (x *SuggestNonLocalSource) GetVersion() int64 {
	if x, ok := x.GetSearcher().(*SuggestNonLocalSource_Version); ok {
		return x.Version
	}
	return 0
}

func (x *SuggestNonLocalSource) GetSnapshot() string {
	if x, ok := x.GetSearcher().(*SuggestNonLocalSource_Snapshot); ok {
		return x.Snapshot
	}
	return ""
}

func (x *SuggestNonLocalSource) GetSuggestField() string {
	if x != nil {
		return x.SuggestField
	}
	return ""
}

func (m *SuggestNonLocalSource) GetWeight() isSuggestNonLocalSource_Weight {
	if m != nil {
		return m.Weight
	}
	return nil
}

func (x *SuggestNonLocalSource) GetWeightField() string {
	if x, ok := x.GetWeight().(*SuggestNonLocalSource_WeightField); ok {
		return x.WeightField
	}
	return ""
}

func (x *SuggestNonLocalSource) GetWeightExpression() string {
	if x, ok := x.GetWeight().(*SuggestNonLocalSource_WeightExpression); ok {
		return x.WeightExpression
	}
	return ""
}

func (x *SuggestNonLocalSource) GetPayloadField() string {
	if x != nil {
		return x.PayloadField
	}
	return ""
}

func (x *SuggestNonLocalSource) GetContextField() string {
	if x != nil {
		return x.ContextField
	}
	return ""
}

type isSuggestNonLocalSource_Searcher interface {
	isSuggestNonLocalSource_Searcher()
}

type SuggestNonLocalSource_IndexGen struct {
	IndexGen int64 `protobuf:"varint,1,opt,name=indexGen,proto3,oneof"` //Search a generation previously returned by an indexing operation such as #addDocument.  Use this to search a non-committed (near-real-time) view of the index.
}

type SuggestNonLocalSource_Version struct {
	Version int64 `protobuf:"varint,2,opt,name=version,proto3,oneof"` //Search a specific searcher version.  This is typically used by follow-on searches (e.g., user clicks next page, drills down, or changes sort, etc.) to get the same searcher used by the original search.
}

type SuggestNonLocalSource_Snapshot struct {
	Snapshot string `protobuf:"bytes,3,opt,name=snapshot,proto3,oneof"` //Search a snapshot previously created with #createSnapshot
}

func (*SuggestNonLocalSource_IndexGen) isSuggestNonLocalSource_Searcher() {}

func (*SuggestNonLocalSource_Version) isSuggestNonLocalSource_Searcher() {}

func (*SuggestNonLocalSource_Snapshot) isSuggestNonLocalSource_Searcher() {}

type isSuggestNonLocalSource_Weight interface {
	isSuggestNonLocalSource_Weight()
}

type SuggestNonLocalSource_WeightField struct {
	WeightField string `protobuf:"bytes,5,opt,name=weightField,proto3,oneof"` //Numeric field (from stored documents) containing the weight
}

type SuggestNonLocalSource_WeightExpression struct {
	WeightExpression string `protobuf:"bytes,6,opt,name=weightExpression,proto3,oneof"` //Alternative to weightField, an expression that's evaluated to the weight. Note that any fields referenced in the expression must have been indexed with sort=true
}

func (*SuggestNonLocalSource_WeightField) isSuggestNonLocalSource_Weight() {}

func (*SuggestNonLocalSource_WeightExpression) isSuggestNonLocalSource_Weight() {}

// A suggester that matches terms anywhere in the input text, not just as a prefix. (see @lucene:org:server.InfixSuggester)
type InfixSuggester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analyzer      string `protobuf:"bytes,1,opt,name=analyzer,proto3" json:"analyzer,omitempty"`           //Index and query analyzer
	IndexAnalyzer string `protobuf:"bytes,2,opt,name=indexAnalyzer,proto3" json:"indexAnalyzer,omitempty"` // Index Analyzer
	QueryAnalyzer string `protobuf:"bytes,3,opt,name=queryAnalyzer,proto3" json:"queryAnalyzer,omitempty"` // Query Analyzer
}

func (x *InfixSuggester) Reset() {
	*x = InfixSuggester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfixSuggester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfixSuggester) ProtoMessage() {}

func (x *InfixSuggester) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfixSuggester.ProtoReflect.Descriptor instead.
func (*InfixSuggester) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{36}
}

func (x *InfixSuggester) GetAnalyzer() string {
	if x != nil {
		return x.Analyzer
	}
	return ""
}

func (x *InfixSuggester) GetIndexAnalyzer() string {
	if x != nil {
		return x.IndexAnalyzer
	}
	return ""
}

func (x *InfixSuggester) GetQueryAnalyzer() string {
	if x != nil {
		return x.QueryAnalyzer
	}
	return ""
}

// Suggester that first analyzes the surface form, adds the analyzed form to a weighted FST, and then does the same thing at lookup time (see @lucene:suggest:org.apache.lucene.search.suggest.analyzing.AnalyzingSuggester
type AnalyzingSuggester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analyzer                       string `protobuf:"bytes,1,opt,name=analyzer,proto3" json:"analyzer,omitempty"`                                              //Index and query analyzer
	IndexAnalyzer                  string `protobuf:"bytes,2,opt,name=indexAnalyzer,proto3" json:"indexAnalyzer,omitempty"`                                    // Index Analyzer
	QueryAnalyzer                  string `protobuf:"bytes,3,opt,name=queryAnalyzer,proto3" json:"queryAnalyzer,omitempty"`                                    // Query Analyzer
	MaxSurfaceFormsPerAnalyzedForm int32  `protobuf:"varint,4,opt,name=maxSurfaceFormsPerAnalyzedForm,proto3" json:"maxSurfaceFormsPerAnalyzedForm,omitempty"` //Maximum number of surface forms to keep for a single analyzed form
	MaxGraphExpansions             int32  `protobuf:"varint,5,opt,name=maxGraphExpansions,proto3" json:"maxGraphExpansions,omitempty"`                         //Maximum number of graph paths to expand from the analyzed from
	PreserveSep                    bool   `protobuf:"varint,6,opt,name=preserveSep,proto3" json:"preserveSep,omitempty"`                                       //True if token separators should be preserved when matching
	ExactFirst                     bool   `protobuf:"varint,7,opt,name=exactFirst,proto3" json:"exactFirst,omitempty"`                                         //True if the exact match should always be returned first regardless of score
}

func (x *AnalyzingSuggester) Reset() {
	*x = AnalyzingSuggester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnalyzingSuggester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzingSuggester) ProtoMessage() {}

func (x *AnalyzingSuggester) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzingSuggester.ProtoReflect.Descriptor instead.
func (*AnalyzingSuggester) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{37}
}

func (x *AnalyzingSuggester) GetAnalyzer() string {
	if x != nil {
		return x.Analyzer
	}
	return ""
}

func (x *AnalyzingSuggester) GetIndexAnalyzer() string {
	if x != nil {
		return x.IndexAnalyzer
	}
	return ""
}

func (x *AnalyzingSuggester) GetQueryAnalyzer() string {
	if x != nil {
		return x.QueryAnalyzer
	}
	return ""
}

func (x *AnalyzingSuggester) GetMaxSurfaceFormsPerAnalyzedForm() int32 {
	if x != nil {
		return x.MaxSurfaceFormsPerAnalyzedForm
	}
	return 0
}

func (x *AnalyzingSuggester) GetMaxGraphExpansions() int32 {
	if x != nil {
		return x.MaxGraphExpansions
	}
	return 0
}

func (x *AnalyzingSuggester) GetPreserveSep() bool {
	if x != nil {
		return x.PreserveSep
	}
	return false
}

func (x *AnalyzingSuggester) GetExactFirst() bool {
	if x != nil {
		return x.ExactFirst
	}
	return false
}

// Implements a fuzzy AnalyzingSuggester (see @lucene:suggest:org.apache.lucene.search.suggest.analyzing.FuzzySuggester
type FuzzySuggester struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Analyzer                       string `protobuf:"bytes,1,opt,name=analyzer,proto3" json:"analyzer,omitempty"`                                              //Index and query analyzer
	IndexAnalyzer                  string `protobuf:"bytes,2,opt,name=indexAnalyzer,proto3" json:"indexAnalyzer,omitempty"`                                    // Index Analyzer
	QueryAnalyzer                  string `protobuf:"bytes,3,opt,name=queryAnalyzer,proto3" json:"queryAnalyzer,omitempty"`                                    // Query Analyzer
	MaxSurfaceFormsPerAnalyzedForm int32  `protobuf:"varint,4,opt,name=maxSurfaceFormsPerAnalyzedForm,proto3" json:"maxSurfaceFormsPerAnalyzedForm,omitempty"` //Maximum number of surface forms to keep for a single analyzed form
	MaxGraphExpansions             int32  `protobuf:"varint,5,opt,name=maxGraphExpansions,proto3" json:"maxGraphExpansions,omitempty"`                         //Maximum number of graph paths to expand from the analyzed from
	PreserveSep                    bool   `protobuf:"varint,6,opt,name=preserveSep,proto3" json:"preserveSep,omitempty"`                                       //True if token separators should be preserved when matching
	ExactFirst                     bool   `protobuf:"varint,7,opt,name=exactFirst,proto3" json:"exactFirst,omitempty"`                                         //True if the exact match should always be returned first regardless of score
	MinFuzzyLength                 int32  `protobuf:"varint,8,opt,name=minFuzzyLength,proto3" json:"minFuzzyLength,omitempty"`                                 //Minimum key length before edits are allowed,
	NonFuzzyPrefix                 int32  `protobuf:"varint,9,opt,name=nonFuzzyPrefix,proto3" json:"nonFuzzyPrefix,omitempty"`                                 //Key prefix where edits are not allowed,
	MaxEdits                       int32  `protobuf:"varint,10,opt,name=maxEdits,proto3" json:"maxEdits,omitempty"`                                            //Maximum number of edits for fuzzy suggestions
	Transpositions                 bool   `protobuf:"varint,11,opt,name=transpositions,proto3" json:"transpositions,omitempty"`                                //Whether transpositions are allowed
	UnicodeAware                   bool   `protobuf:"varint,12,opt,name=unicodeAware,proto3" json:"unicodeAware,omitempty"`                                    //True if all edits are measured in unicode characters, not UTF-8 bytes
}

func (x *FuzzySuggester) Reset() {
	*x = FuzzySuggester{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FuzzySuggester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FuzzySuggester) ProtoMessage() {}

func (x *FuzzySuggester) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FuzzySuggester.ProtoReflect.Descriptor instead.
func (*FuzzySuggester) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{38}
}

func (x *FuzzySuggester) GetAnalyzer() string {
	if x != nil {
		return x.Analyzer
	}
	return ""
}

func (x *FuzzySuggester) GetIndexAnalyzer() string {
	if x != nil {
		return x.IndexAnalyzer
	}
	return ""
}

func (x *FuzzySuggester) GetQueryAnalyzer() string {
	if x != nil {
		return x.QueryAnalyzer
	}
	return ""
}

func (x *FuzzySuggester) GetMaxSurfaceFormsPerAnalyzedForm() int32 {
	if x != nil {
		return x.MaxSurfaceFormsPerAnalyzedForm
	}
	return 0
}

func (x *FuzzySuggester) GetMaxGraphExpansions() int32 {
	if x != nil {
		return x.MaxGraphExpansions
	}
	return 0
}

func (x *FuzzySuggester) GetPreserveSep() bool {
	if x != nil {
		return x.PreserveSep
	}
	return false
}

func (x *FuzzySuggester) GetExactFirst() bool {
	if x != nil {
		return x.ExactFirst
	}
	return false
}

func (x *FuzzySuggester) GetMinFuzzyLength() int32 {
	if x != nil {
		return x.MinFuzzyLength
	}
	return 0
}

func (x *FuzzySuggester) GetNonFuzzyPrefix() int32 {
	if x != nil {
		return x.NonFuzzyPrefix
	}
	return 0
}

func (x *FuzzySuggester) GetMaxEdits() int32 {
	if x != nil {
		return x.MaxEdits
	}
	return 0
}

func (x *FuzzySuggester) GetTranspositions() bool {
	if x != nil {
		return x.Transpositions
	}
	return false
}

func (x *FuzzySuggester) GetUnicodeAware() bool {
	if x != nil {
		return x.UnicodeAware
	}
	return false
}

//
//Creates a snapshot in the index, which is saved point-in-time view of the last commit in the
//index such that no files referenced by that snapshot will be deleted by ongoing indexing until
//the snapshot is released with @releaseSnapshot.  Note that this will reference the last commit,
//so be sure to call commit first if you have pending changes that you'd like to be included in
//the snapshot.<p>This can be used for backup purposes, i.e. after creating the snapshot you can
//copy all referenced files to backup storage, and then release the snapshot once complete.
//To restore the backup, just copy all the files back and restart the server.  It can also
//be used for transactional purposes, i.e. if you sometimes need to search a specific snapshot
//instead of the current live index.<p>Creating a snapshot is very fast (does not require any
//file copying), but over time it will consume extra disk space as old segments are merged in
//the index.  Be sure to release the snapshot once you're done.  Snapshots survive shutdown
//and restart of the server.  Returns all protected filenames referenced by this snapshot:
//these files will not change and will not be deleted until the snapshot is released.
//This returns the directories and files referenced by the snapshot.
type CreateSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName    string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`        //name of the index to snapshot;
	OpenSearcher bool   `protobuf:"varint,2,opt,name=openSearcher,proto3" json:"openSearcher,omitempty"` //Pass true if you intend to do searches against this snapshot, by passing searcher: {snapshot: X} to @search
}

func (x *CreateSnapshotRequest) Reset() {
	*x = CreateSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshotRequest) ProtoMessage() {}

func (x *CreateSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshotRequest.ProtoReflect.Descriptor instead.
func (*CreateSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{39}
}

func (x *CreateSnapshotRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *CreateSnapshotRequest) GetOpenSearcher() bool {
	if x != nil {
		return x.OpenSearcher
	}
	return false
}

type CreateSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexFiles    []string    `protobuf:"bytes,1,rep,name=indexFiles,proto3" json:"indexFiles,omitempty"`
	TaxonomyFiles []string    `protobuf:"bytes,2,rep,name=taxonomyFiles,proto3" json:"taxonomyFiles,omitempty"`
	StateFiles    []string    `protobuf:"bytes,3,rep,name=stateFiles,proto3" json:"stateFiles,omitempty"`
	SnapshotId    *SnapshotId `protobuf:"bytes,4,opt,name=snapshotId,proto3" json:"snapshotId,omitempty"`
}

func (x *CreateSnapshotResponse) Reset() {
	*x = CreateSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshotResponse) ProtoMessage() {}

func (x *CreateSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshotResponse.ProtoReflect.Descriptor instead.
func (*CreateSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{40}
}

func (x *CreateSnapshotResponse) GetIndexFiles() []string {
	if x != nil {
		return x.IndexFiles
	}
	return nil
}

func (x *CreateSnapshotResponse) GetTaxonomyFiles() []string {
	if x != nil {
		return x.TaxonomyFiles
	}
	return nil
}

func (x *CreateSnapshotResponse) GetStateFiles() []string {
	if x != nil {
		return x.StateFiles
	}
	return nil
}

func (x *CreateSnapshotResponse) GetSnapshotId() *SnapshotId {
	if x != nil {
		return x.SnapshotId
	}
	return nil
}

type SnapshotId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexGen    int64 `protobuf:"varint,1,opt,name=indexGen,proto3" json:"indexGen,omitempty"`
	TaxonomyGen int64 `protobuf:"varint,2,opt,name=taxonomyGen,proto3" json:"taxonomyGen,omitempty"`
	StateGen    int64 `protobuf:"varint,3,opt,name=stateGen,proto3" json:"stateGen,omitempty"`
}

func (x *SnapshotId) Reset() {
	*x = SnapshotId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotId) ProtoMessage() {}

func (x *SnapshotId) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotId.ProtoReflect.Descriptor instead.
func (*SnapshotId) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{41}
}

func (x *SnapshotId) GetIndexGen() int64 {
	if x != nil {
		return x.IndexGen
	}
	return 0
}

func (x *SnapshotId) GetTaxonomyGen() int64 {
	if x != nil {
		return x.TaxonomyGen
	}
	return 0
}

func (x *SnapshotId) GetStateGen() int64 {
	if x != nil {
		return x.StateGen
	}
	return 0
}

type ReleaseSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName  string      `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`   // name of snapshotted index to be released
	SnapshotId *SnapshotId `protobuf:"bytes,2,opt,name=snapshotId,proto3" json:"snapshotId,omitempty"` //The id for this snapshot; this must have been previously created via @createSnapshot.
}

func (x *ReleaseSnapshotRequest) Reset() {
	*x = ReleaseSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSnapshotRequest) ProtoMessage() {}

func (x *ReleaseSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSnapshotRequest.ProtoReflect.Descriptor instead.
func (*ReleaseSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{42}
}

func (x *ReleaseSnapshotRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *ReleaseSnapshotRequest) GetSnapshotId() *SnapshotId {
	if x != nil {
		return x.SnapshotId
	}
	return nil
}

type ReleaseSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` //true if successful
}

func (x *ReleaseSnapshotResponse) Reset() {
	*x = ReleaseSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSnapshotResponse) ProtoMessage() {}

func (x *ReleaseSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSnapshotResponse.ProtoReflect.Descriptor instead.
func (*ReleaseSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{43}
}

func (x *ReleaseSnapshotResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type BackupIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName    string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`       //name of the index to backup
	ServiceName  string `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`   // remote storage namespace qualifier for service
	ResourceName string `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"` //remote storage namespace qualifier for resource e.g. indexName
}

func (x *BackupIndexRequest) Reset() {
	*x = BackupIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupIndexRequest) ProtoMessage() {}

func (x *BackupIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupIndexRequest.ProtoReflect.Descriptor instead.
func (*BackupIndexRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{44}
}

func (x *BackupIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *BackupIndexRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *BackupIndexRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

type BackupIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataVersionHash     string `protobuf:"bytes,1,opt,name=dataVersionHash,proto3" json:"dataVersionHash,omitempty"`         //version identifier for data on s3
	MetadataVersionHash string `protobuf:"bytes,2,opt,name=metadataVersionHash,proto3" json:"metadataVersionHash,omitempty"` //version identifier for metadata on s3
}

func (x *BackupIndexResponse) Reset() {
	*x = BackupIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupIndexResponse) ProtoMessage() {}

func (x *BackupIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupIndexResponse.ProtoReflect.Descriptor instead.
func (*BackupIndexResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{45}
}

func (x *BackupIndexResponse) GetDataVersionHash() string {
	if x != nil {
		return x.DataVersionHash
	}
	return ""
}

func (x *BackupIndexResponse) GetMetadataVersionHash() string {
	if x != nil {
		return x.MetadataVersionHash
	}
	return ""
}

type MetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetricsRequest) Reset() {
	*x = MetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsRequest) ProtoMessage() {}

func (x *MetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsRequest.ProtoReflect.Descriptor instead.
func (*MetricsRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{46}
}

type MetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetricFamilySample []*MetricFamilySamples `protobuf:"bytes,1,rep,name=metricFamilySample,proto3" json:"metricFamilySample,omitempty"`
}

func (x *MetricsResponse) Reset() {
	*x = MetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsResponse) ProtoMessage() {}

func (x *MetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsResponse.ProtoReflect.Descriptor instead.
func (*MetricsResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{47}
}

func (x *MetricsResponse) GetMetricFamilySample() []*MetricFamilySamples {
	if x != nil {
		return x.MetricFamilySample
	}
	return nil
}

type MetricFamilySamples struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type    SampleType `protobuf:"varint,2,opt,name=type,proto3,enum=luceneserver.SampleType" json:"type,omitempty"`
	Help    string     `protobuf:"bytes,3,opt,name=help,proto3" json:"help,omitempty"`
	Samples []*Sample  `protobuf:"bytes,4,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *MetricFamilySamples) Reset() {
	*x = MetricFamilySamples{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricFamilySamples) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricFamilySamples) ProtoMessage() {}

func (x *MetricFamilySamples) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricFamilySamples.ProtoReflect.Descriptor instead.
func (*MetricFamilySamples) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{48}
}

func (x *MetricFamilySamples) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MetricFamilySamples) GetType() SampleType {
	if x != nil {
		return x.Type
	}
	return SampleType_COUNTER
}

func (x *MetricFamilySamples) GetHelp() string {
	if x != nil {
		return x.Help
	}
	return ""
}

func (x *MetricFamilySamples) GetSamples() []*Sample {
	if x != nil {
		return x.Samples
	}
	return nil
}

type Sample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LabelValues []string `protobuf:"bytes,2,rep,name=labelValues,proto3" json:"labelValues,omitempty"`
	LabelNames  []string `protobuf:"bytes,3,rep,name=labelNames,proto3" json:"labelNames,omitempty"`
	Value       float64  `protobuf:"fixed64,4,opt,name=value,proto3" json:"value,omitempty"`
	TimestampMs int64    `protobuf:"varint,5,opt,name=timestampMs,proto3" json:"timestampMs,omitempty"`
}

func (x *Sample) Reset() {
	*x = Sample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample) ProtoMessage() {}

func (x *Sample) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample.ProtoReflect.Descriptor instead.
func (*Sample) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{49}
}

func (x *Sample) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sample) GetLabelValues() []string {
	if x != nil {
		return x.LabelValues
	}
	return nil
}

func (x *Sample) GetLabelNames() []string {
	if x != nil {
		return x.LabelNames
	}
	return nil
}

func (x *Sample) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Sample) GetTimestampMs() int64 {
	if x != nil {
		return x.TimestampMs
	}
	return 0
}

type IndicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IndicesRequest) Reset() {
	*x = IndicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicesRequest) ProtoMessage() {}

func (x *IndicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicesRequest.ProtoReflect.Descriptor instead.
func (*IndicesRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{50}
}

type IndicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndicesResponse []*IndexStatsResponse `protobuf:"bytes,1,rep,name=indicesResponse,proto3" json:"indicesResponse,omitempty"` //list of IndexStatsResponse
}

func (x *IndicesResponse) Reset() {
	*x = IndicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicesResponse) ProtoMessage() {}

func (x *IndicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicesResponse.ProtoReflect.Descriptor instead.
func (*IndicesResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{51}
}

func (x *IndicesResponse) GetIndicesResponse() []*IndexStatsResponse {
	if x != nil {
		return x.IndicesResponse
	}
	return nil
}

type IndexStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName     string         `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`         //index name
	StatsResponse *StatsResponse `protobuf:"bytes,2,opt,name=statsResponse,proto3" json:"statsResponse,omitempty"` //stats for an index
}

func (x *IndexStatsResponse) Reset() {
	*x = IndexStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexStatsResponse) ProtoMessage() {}

func (x *IndexStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexStatsResponse.ProtoReflect.Descriptor instead.
func (*IndexStatsResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{52}
}

func (x *IndexStatsResponse) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *IndexStatsResponse) GetStatsResponse() *StatsResponse {
	if x != nil {
		return x.StatsResponse
	}
	return nil
}

type RestoreIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName  string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`   // remote storage namespace qualifier for service
	ResourceName string `protobuf:"bytes,2,opt,name=resourceName,proto3" json:"resourceName,omitempty"` //remote storage namespace qualifier for resource e.g. indexName
}

func (x *RestoreIndex) Reset() {
	*x = RestoreIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreIndex) ProtoMessage() {}

func (x *RestoreIndex) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreIndex.ProtoReflect.Descriptor instead.
func (*RestoreIndex) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{53}
}

func (x *RestoreIndex) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RestoreIndex) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

type AddReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicNumber int32  `protobuf:"varint,1,opt,name=magicNumber,proto3" json:"magicNumber,omitempty"` //magic number send on all requests since these are meant for internal communication only
	IndexName   string `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`      //index name
	ReplicaId   int32  `protobuf:"varint,3,opt,name=replicaId,proto3" json:"replicaId,omitempty"`     //replica Id
	HostName    string `protobuf:"bytes,4,opt,name=hostName,proto3" json:"hostName,omitempty"`        // replica host name
	Port        int32  `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`               // replica port number
}

func (x *AddReplicaRequest) Reset() {
	*x = AddReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReplicaRequest) ProtoMessage() {}

func (x *AddReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReplicaRequest.ProtoReflect.Descriptor instead.
func (*AddReplicaRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{54}
}

func (x *AddReplicaRequest) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *AddReplicaRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *AddReplicaRequest) GetReplicaId() int32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *AddReplicaRequest) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *AddReplicaRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type AddReplicaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok string `protobuf:"bytes,1,opt,name=ok,proto3" json:"ok,omitempty"` //Returns "ok" string on  success
}

func (x *AddReplicaResponse) Reset() {
	*x = AddReplicaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReplicaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReplicaResponse) ProtoMessage() {}

func (x *AddReplicaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReplicaResponse.ProtoReflect.Descriptor instead.
func (*AddReplicaResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{55}
}

func (x *AddReplicaResponse) GetOk() string {
	if x != nil {
		return x.Ok
	}
	return ""
}

// Holds incRef'd file level details for one point-in-time segment infos on the primary node.
type CopyState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoBytesLength         int32          `protobuf:"varint,1,opt,name=infoBytesLength,proto3" json:"infoBytesLength,omitempty"`                 // infoBytes len
	InfoBytes               []byte         `protobuf:"bytes,2,opt,name=infoBytes,proto3" json:"infoBytes,omitempty"`                              //infoBytes
	Gen                     int64          `protobuf:"varint,3,opt,name=gen,proto3" json:"gen,omitempty"`                                         //gen
	Version                 int64          `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`                                 //versiom
	FilesMetadata           *FilesMetadata `protobuf:"bytes,5,opt,name=filesMetadata,proto3" json:"filesMetadata,omitempty"`                      //fileMetadata
	CompletedMergeFilesSize int32          `protobuf:"varint,6,opt,name=completedMergeFilesSize,proto3" json:"completedMergeFilesSize,omitempty"` //completed merged files
	CompletedMergeFiles     []string       `protobuf:"bytes,7,rep,name=completedMergeFiles,proto3" json:"completedMergeFiles,omitempty"`          //names of files that finished merge
	PrimaryGen              int64          `protobuf:"varint,8,opt,name=primaryGen,proto3" json:"primaryGen,omitempty"`                           //primary Gen
}

func (x *CopyState) Reset() {
	*x = CopyState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyState) ProtoMessage() {}

func (x *CopyState) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyState.ProtoReflect.Descriptor instead.
func (*CopyState) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{56}
}

func (x *CopyState) GetInfoBytesLength() int32 {
	if x != nil {
		return x.InfoBytesLength
	}
	return 0
}

func (x *CopyState) GetInfoBytes() []byte {
	if x != nil {
		return x.InfoBytes
	}
	return nil
}

func (x *CopyState) GetGen() int64 {
	if x != nil {
		return x.Gen
	}
	return 0
}

func (x *CopyState) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CopyState) GetFilesMetadata() *FilesMetadata {
	if x != nil {
		return x.FilesMetadata
	}
	return nil
}

func (x *CopyState) GetCompletedMergeFilesSize() int32 {
	if x != nil {
		return x.CompletedMergeFilesSize
	}
	return 0
}

func (x *CopyState) GetCompletedMergeFiles() []string {
	if x != nil {
		return x.CompletedMergeFiles
	}
	return nil
}

func (x *CopyState) GetPrimaryGen() int64 {
	if x != nil {
		return x.PrimaryGen
	}
	return 0
}

type FilesMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumFiles     int32           `protobuf:"varint,1,opt,name=numFiles,proto3" json:"numFiles,omitempty"`        //number of files int this set
	FileMetadata []*FileMetadata `protobuf:"bytes,2,rep,name=fileMetadata,proto3" json:"fileMetadata,omitempty"` //list of metadata for each file
}

func (x *FilesMetadata) Reset() {
	*x = FilesMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesMetadata) ProtoMessage() {}

func (x *FilesMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesMetadata.ProtoReflect.Descriptor instead.
func (*FilesMetadata) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{57}
}

func (x *FilesMetadata) GetNumFiles() int32 {
	if x != nil {
		return x.NumFiles
	}
	return 0
}

func (x *FilesMetadata) GetFileMetadata() []*FileMetadata {
	if x != nil {
		return x.FileMetadata
	}
	return nil
}

type FileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName     string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`          //file Name
	Len          int64  `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`                   //file checksum
	Checksum     int64  `protobuf:"varint,3,opt,name=checksum,proto3" json:"checksum,omitempty"`         //file checksum
	HeaderLength int32  `protobuf:"varint,4,opt,name=headerLength,proto3" json:"headerLength,omitempty"` //file header length;
	Header       []byte `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`              //file header;
	FooterLength int32  `protobuf:"varint,6,opt,name=footerLength,proto3" json:"footerLength,omitempty"` //file header length;
	Footer       []byte `protobuf:"bytes,7,opt,name=footer,proto3" json:"footer,omitempty"`              //file header;
}

func (x *FileMetadata) Reset() {
	*x = FileMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadata) ProtoMessage() {}

func (x *FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadata.ProtoReflect.Descriptor instead.
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{58}
}

func (x *FileMetadata) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileMetadata) GetLen() int64 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *FileMetadata) GetChecksum() int64 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *FileMetadata) GetHeaderLength() int32 {
	if x != nil {
		return x.HeaderLength
	}
	return 0
}

func (x *FileMetadata) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FileMetadata) GetFooterLength() int32 {
	if x != nil {
		return x.FooterLength
	}
	return 0
}

func (x *FileMetadata) GetFooter() []byte {
	if x != nil {
		return x.Footer
	}
	return nil
}

//* Primary invokes this on a replica to ask it to copy files
type CopyFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicNumber   int32          `protobuf:"varint,1,opt,name=magicNumber,proto3" json:"magicNumber,omitempty"`    //magic number send on all requests since these are meant for internal communication only
	IndexName     string         `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`         //index name
	PrimaryGen    int64          `protobuf:"varint,3,opt,name=primaryGen,proto3" json:"primaryGen,omitempty"`      //primary, the generation of this primary (should increment each time a new primary starts for this index)
	FilesMetadata *FilesMetadata `protobuf:"bytes,4,opt,name=filesMetadata,proto3" json:"filesMetadata,omitempty"` //file metadata to copy
}

func (x *CopyFiles) Reset() {
	*x = CopyFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFiles) ProtoMessage() {}

func (x *CopyFiles) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFiles.ProtoReflect.Descriptor instead.
func (*CopyFiles) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{59}
}

func (x *CopyFiles) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *CopyFiles) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *CopyFiles) GetPrimaryGen() int64 {
	if x != nil {
		return x.PrimaryGen
	}
	return 0
}

func (x *CopyFiles) GetFilesMetadata() *FilesMetadata {
	if x != nil {
		return x.FilesMetadata
	}
	return nil
}

//* Replica invokes this on a primary to let primary know it needs the CopyState
type CopyStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicNumber int32  `protobuf:"varint,1,opt,name=magicNumber,proto3" json:"magicNumber,omitempty"` //magic number send on all requests since these are meant for internal communication only
	IndexName   string `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`      //index name
	ReplicaId   int32  `protobuf:"varint,3,opt,name=replicaId,proto3" json:"replicaId,omitempty"`     //replica Id
}

func (x *CopyStateRequest) Reset() {
	*x = CopyStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyStateRequest) ProtoMessage() {}

func (x *CopyStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyStateRequest.ProtoReflect.Descriptor instead.
func (*CopyStateRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{60}
}

func (x *CopyStateRequest) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *CopyStateRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *CopyStateRequest) GetReplicaId() int32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

type FilesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicNumber int32       `protobuf:"varint,1,opt,name=magicNumber,proto3" json:"magicNumber,omitempty"` //magic number send on all requests since these are meant for internal communication only
	IndexName   string      `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`      //index name
	ReplicaId   int32       `protobuf:"varint,3,opt,name=replicaId,proto3" json:"replicaId,omitempty"`     //replica Id
	FileInfo    []*FileInfo `protobuf:"bytes,4,rep,name=fileInfo,proto3" json:"fileInfo,omitempty"`        //list of file name and offsets from where primary should start sending bytes to replica
}

func (x *FilesInfo) Reset() {
	*x = FilesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesInfo) ProtoMessage() {}

func (x *FilesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesInfo.ProtoReflect.Descriptor instead.
func (*FilesInfo) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{61}
}

func (x *FilesInfo) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *FilesInfo) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *FilesInfo) GetReplicaId() int32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *FilesInfo) GetFileInfo() []*FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName  string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`   // Name of the file the replica wants primary to send
	FpStart   int64  `protobuf:"varint,2,opt,name=fpStart,proto3" json:"fpStart,omitempty"`    // Starting offset in the file primary should start sending bytes from:
	IndexName string `protobuf:"bytes,3,opt,name=indexName,proto3" json:"indexName,omitempty"` //index name these files belong to
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{62}
}

func (x *FileInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileInfo) GetFpStart() int64 {
	if x != nil {
		return x.FpStart
	}
	return 0
}

func (x *FileInfo) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type RawFileChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"` //raw contents of file
}

func (x *RawFileChunk) Reset() {
	*x = RawFileChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawFileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawFileChunk) ProtoMessage() {}

func (x *RawFileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawFileChunk.ProtoReflect.Descriptor instead.
func (*RawFileChunk) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{63}
}

func (x *RawFileChunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Check bool `protobuf:"varint,1,opt,name=check,proto3" json:"check,omitempty"` //healthcheck request
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{64}
}

func (x *HealthCheckRequest) GetCheck() bool {
	if x != nil {
		return x.Check
	}
	return false
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Health TransferStatusCode `protobuf:"varint,1,opt,name=health,proto3,enum=luceneserver.TransferStatusCode" json:"health,omitempty"` //enum response of healthcheck;
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{65}
}

func (x *HealthCheckResponse) GetHealth() TransferStatusCode {
	if x != nil {
		return x.Health
	}
	return TransferStatusCode_Unknown
}

type TransferStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string             `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Code    TransferStatusCode `protobuf:"varint,2,opt,name=Code,proto3,enum=luceneserver.TransferStatusCode" json:"Code,omitempty"`
}

func (x *TransferStatus) Reset() {
	*x = TransferStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferStatus) ProtoMessage() {}

func (x *TransferStatus) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferStatus.ProtoReflect.Descriptor instead.
func (*TransferStatus) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{66}
}

func (x *TransferStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TransferStatus) GetCode() TransferStatusCode {
	if x != nil {
		return x.Code
	}
	return TransferStatusCode_Unknown
}

type NewNRTPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicNumber int32  `protobuf:"varint,1,opt,name=magicNumber,proto3" json:"magicNumber,omitempty"` //magic number send on all requests since these are meant for internal communication only
	IndexName   string `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`      //index name
	PrimaryGen  int64  `protobuf:"varint,3,opt,name=primaryGen,proto3" json:"primaryGen,omitempty"`   //primary, the generation of this primary (should increment each time a new primary starts for this index)
	Version     int64  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`         //version number when this SegmentInfos was generated
}

func (x *NewNRTPoint) Reset() {
	*x = NewNRTPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewNRTPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewNRTPoint) ProtoMessage() {}

func (x *NewNRTPoint) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewNRTPoint.ProtoReflect.Descriptor instead.
func (*NewNRTPoint) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{67}
}

func (x *NewNRTPoint) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *NewNRTPoint) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *NewNRTPoint) GetPrimaryGen() int64 {
	if x != nil {
		return x.PrimaryGen
	}
	return 0
}

func (x *NewNRTPoint) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type IndexName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicNumber int32  `protobuf:"varint,1,opt,name=magicNumber,proto3" json:"magicNumber,omitempty"` //magic number send on all requests since these are meant for internal communication only
	IndexName   string `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`      //index name
}

func (x *IndexName) Reset() {
	*x = IndexName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexName) ProtoMessage() {}

func (x *IndexName) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexName.ProtoReflect.Descriptor instead.
func (*IndexName) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{68}
}

func (x *IndexName) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *IndexName) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type SearcherVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`       //returns the version recorded in the commit that the reader opened.  This version is advanced every time a change is made with IndexWriter
	DidRefresh bool  `protobuf:"varint,2,opt,name=didRefresh,proto3" json:"didRefresh,omitempty"` //true if refresh happened
}

func (x *SearcherVersion) Reset() {
	*x = SearcherVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearcherVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearcherVersion) ProtoMessage() {}

func (x *SearcherVersion) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearcherVersion.ProtoReflect.Descriptor instead.
func (*SearcherVersion) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{69}
}

func (x *SearcherVersion) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SearcherVersion) GetDidRefresh() bool {
	if x != nil {
		return x.DidRefresh
	}
	return false
}

type GetNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //name of the started index whose binary connections we wish to see
}

func (x *GetNodesRequest) Reset() {
	*x = GetNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesRequest) ProtoMessage() {}

func (x *GetNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesRequest.ProtoReflect.Descriptor instead.
func (*GetNodesRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{70}
}

func (x *GetNodesRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type GetNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*NodeInfo `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"` //list of NodeInfo
}

func (x *GetNodesResponse) Reset() {
	*x = GetNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesResponse) ProtoMessage() {}

func (x *GetNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesResponse.ProtoReflect.Descriptor instead.
func (*GetNodesResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{71}
}

func (x *GetNodesResponse) GetNodes() []*NodeInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"` //name or ip address of the remote host that this node is connected to for binary replication
	Port     int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`        //port number of the remote host that this node is connected to for binary replication
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{72}
}

func (x *NodeInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NodeInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

//we use this wrapper object to represent each field as a multivalued field.
type AddDocumentRequest_MultiValuedField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"` //list of values for this field
}

func (x *AddDocumentRequest_MultiValuedField) Reset() {
	*x = AddDocumentRequest_MultiValuedField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDocumentRequest_MultiValuedField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDocumentRequest_MultiValuedField) ProtoMessage() {}

func (x *AddDocumentRequest_MultiValuedField) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDocumentRequest_MultiValuedField.ProtoReflect.Descriptor instead.
func (*AddDocumentRequest_MultiValuedField) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{11, 0}
}

func (x *AddDocumentRequest_MultiValuedField) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_yelp_nrtsearch_luceneserver_proto protoreflect.FileDescriptor

var file_yelp_nrtsearch_luceneserver_proto_rawDesc = []byte{
	0x0a, 0x21, 0x79, 0x65, 0x6c, 0x70, 0x2f, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2f, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x1a, 0x1b, 0x79, 0x65, 0x6c, 0x70, 0x2f, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x79, 0x65, 0x6c, 0x70, 0x2f, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x72, 0x22, 0x31, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe1, 0x01, 0x0a,
	0x13, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x53, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x63, 0x12, 0x2c,
	0x0a, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x53, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x14,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x61, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69,
	0x7a, 0x65, 0x4d, 0x42, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x61, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42,
	0x22, 0x32, 0x0a, 0x14, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8c, 0x07, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f,
	0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6f, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x6f, 0x63,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x08, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x66, 0x61, 0x63, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x66, 0x61, 0x63, 0x65,
	0x74, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x61, 0x63, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x66, 0x61, 0x63, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x5a, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22,
	0x2e, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x81, 0x05, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x4d, 0x42, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x4d, 0x61, 0x78, 0x4d, 0x42, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x4c, 0x0a,
	0x21, 0x6e, 0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x4d, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x21, 0x6e, 0x72, 0x74, 0x43, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x12, 0x42, 0x0a, 0x1c, 0x6e,
	0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x1c, 0x6e, 0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x12,
	0x56, 0x0a, 0x26, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x26, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x4d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x65,
	0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x74,
	0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x73, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x22, 0x2e, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x22, 0x84, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x44,
	0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x63,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x4d, 0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x53, 0x22, 0x90, 0x02, 0x0a, 0x12, 0x41, 0x64, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x1a, 0x28, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x6c, 0x0a,
	0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2b, 0x0a, 0x13, 0x41,
	0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x53, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x53, 0x22, 0x2d, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x22, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x67, 0x65, 0x6e, 0x22, 0x2c, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xaf, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x63, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x64, 0x69, 0x72, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x61, 0x78, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x52, 0x08, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x12, 0x34, 0x0a, 0x09,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x72, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x72, 0x22, 0x40, 0x0a, 0x08, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x73, 0x74,
	0x61, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x39, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x1f, 0x0a, 0x0d, 0x44, 0x75, 0x6d, 0x6d, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x30, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe5, 0x03, 0x0a, 0x13, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x46, 0x0a, 0x0e, 0x69, 0x6e, 0x66, 0x69, 0x78, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x66, 0x69, 0x78, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x66, 0x69, 0x78, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x12, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x12, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x69, 0x6e, 0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0e,
	0x66, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x01, 0x52, 0x0b, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x6e, 0x6f,
	0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x01, 0x52, 0x0e, 0x6e, 0x6f, 0x6e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x4e, 0x0a, 0x14, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x69,
	0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xe6, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x72, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x59, 0x0a, 0x15, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x6e, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x18, 0x4f, 0x6e, 0x65, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x16, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x48, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x48, 0x00, 0x52, 0x16, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x48, 0x69, 0x67,
	0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4b, 0x65, 0x79, 0x22, 0x58, 0x0a, 0x16, 0x53, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x6e, 0x65, 0x48, 0x69, 0x67, 0x68,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x38, 0x0a, 0x0c, 0x4f, 0x6e, 0x65, 0x48, 0x69, 0x67, 0x68, 0x6c, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x48, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x48, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x54, 0x0a,
	0x12, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x22, 0xc3, 0x02, 0x0a, 0x15, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4e,
	0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x22, 0x0a, 0x0b, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0b, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a,
	0x10, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x42,
	0x08, 0x0a, 0x06, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x78, 0x0a, 0x0e, 0x49, 0x6e, 0x66,
	0x69, 0x78, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x7a, 0x65, 0x72, 0x22, 0xb6, 0x02, 0x0a, 0x12, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x69, 0x6e,
	0x67, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x72, 0x12, 0x46, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x6d, 0x61, 0x78, 0x53,
	0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x2e, 0x0a, 0x12, 0x6d, 0x61,
	0x78, 0x47, 0x72, 0x61, 0x70, 0x68, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x65, 0x70, 0x12, 0x1e, 0x0a, 0x0a,
	0x65, 0x78, 0x61, 0x63, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x65, 0x78, 0x61, 0x63, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x22, 0xea, 0x03, 0x0a,
	0x0e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x1e, 0x6d, 0x61, 0x78, 0x53, 0x75,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x73, 0x50, 0x65, 0x72, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1e, 0x6d, 0x61, 0x78, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x73,
	0x50, 0x65, 0x72, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x12,
	0x2e, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x47, 0x72, 0x61, 0x70, 0x68, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x65, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x53, 0x65,
	0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x61, 0x63, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x63, 0x74, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x46, 0x75,
	0x7a, 0x7a, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x6e, 0x6f, 0x6e,
	0x46, 0x75, 0x7a, 0x7a, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6e, 0x6f, 0x6e, 0x46, 0x75, 0x7a, 0x7a, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x45, 0x64, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x45, 0x64, 0x69, 0x74, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65,
	0x41, 0x77, 0x61, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x6e, 0x69,
	0x63, 0x6f, 0x64, 0x65, 0x41, 0x77, 0x61, 0x72, 0x65, 0x22, 0x59, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x65, 0x72, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x49, 0x64, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22,
	0x66, 0x0a, 0x0a, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x65, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x61, 0x78,
	0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x47, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x47, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x22, 0x70, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x38, 0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x52, 0x0a, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x17, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x78,
	0x0a, 0x12, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x13, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0x10, 0x0a, 0x0e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x64, 0x0a,
	0x0f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x51, 0x0a, 0x12, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52,
	0x12, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x65, 0x6c, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x65, 0x6c,
	0x70, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0x22, 0x96, 0x01, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x49, 0x6e,
	0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x0f,
	0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x0f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x12, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x41, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x54, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x24, 0x0a, 0x12,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x6f, 0x6b, 0x22, 0xce, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x66, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x67, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x47, 0x65, 0x6e, 0x22, 0x6b, 0x0a, 0x0d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x12, 0x3e, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xd0, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x6f, 0x74, 0x65,
	0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66,
	0x6f, 0x6f, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x66, 0x6f, 0x6f,
	0x74, 0x65, 0x72, 0x22, 0xae, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65,
	0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x10, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69,
	0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d,
	0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5e, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x66, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x0c, 0x52, 0x61, 0x77, 0x46, 0x69, 0x6c,
	0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x2a, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x4f, 0x0a, 0x13,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x60, 0x0a,
	0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x87, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x4e, 0x52, 0x54, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x09, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x64, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x64, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x22, 0x2f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x2a, 0x8d, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x41, 0x54, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45,
	0x58, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x49,
	0x4e, 0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x05,
	0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x4c,
	0x41, 0x54, 0x5f, 0x4c, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41, 0x54, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x52, 0x54, 0x55,
	0x41, 0x4c, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x10, 0x0a, 0x2a, 0x64, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x43, 0x53, 0x5f, 0x46, 0x52, 0x45, 0x51, 0x53,
	0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x4f, 0x43, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4f, 0x43, 0x53, 0x5f, 0x46,
	0x52, 0x45, 0x51, 0x53, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4f, 0x43, 0x53, 0x5f, 0x46,
	0x52, 0x45, 0x51, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f,
	0x46, 0x46, 0x53, 0x45, 0x54, 0x53, 0x10, 0x03, 0x2a, 0x84, 0x01, 0x0a, 0x0b, 0x54, 0x65, 0x72,
	0x6d, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f, 0x54,
	0x45, 0x52, 0x4d, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x45, 0x52, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x52, 0x4d, 0x53,
	0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17,
	0x54, 0x45, 0x52, 0x4d, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x53, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x45, 0x52,
	0x4d, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x46, 0x46,
	0x53, 0x45, 0x54, 0x53, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x53, 0x10, 0x04, 0x2a,
	0x61, 0x0a, 0x09, 0x46, 0x61, 0x63, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x4f, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x54, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46,
	0x4c, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x49, 0x45, 0x52, 0x41, 0x52, 0x43,
	0x48, 0x59, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x4f, 0x43, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x53,
	0x10, 0x04, 0x2a, 0x30, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54,
	0x41, 0x4e, 0x44, 0x41, 0x4c, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52,
	0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x10, 0x02, 0x2a, 0x4d, 0x0a, 0x0a, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x47, 0x41, 0x55, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x4d, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x49, 0x53, 0x54, 0x4f,
	0x47, 0x52, 0x41, 0x4d, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x54, 0x59, 0x50, 0x45,
	0x44, 0x10, 0x04, 0x2a, 0x44, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x32, 0xb7, 0x14, 0x0a, 0x0c, 0x4c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0c, 0x6c,
	0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0x6f, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0x6b, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x62,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x6b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x01, 0x2a, 0x12,
	0x63, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x6d, 0x6d,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x28, 0x01, 0x12, 0x5e, 0x0a, 0x07, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x12, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x5a, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x56, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1a,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22,
	0x09, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x5a, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x06, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f,
	0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x79, 0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x27, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0x73, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x0d, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f,
	0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65,
	0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x3a, 0x01, 0x2a, 0x12,
	0x75, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74,
	0x12, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22,
	0x12, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x7b, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x7f, 0x0a, 0x0f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x24, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31,
	0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15,
	0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x5f, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5b, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x32, 0xd1, 0x05, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0b, 0x61, 0x64, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a,
	0x0d, 0x72, 0x65, 0x63, 0x76, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x70, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f,
	0x70, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x73, 0x65, 0x6e,
	0x64, 0x52, 0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x28, 0x01, 0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x76, 0x52, 0x61,
	0x77, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1a, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x77,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12, 0x46, 0x0a,
	0x09, 0x63, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x17, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x1a, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x4e, 0x52, 0x54, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x4e, 0x52, 0x54, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x1a,
	0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4e, 0x52, 0x54, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x19, 0x67, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3b, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x2e, 0x79,
	0x65, 0x6c, 0x70, 0x2e, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x42, 0x11, 0x4c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0xa2, 0x02,
	0x03, 0x48, 0x4c, 0x57, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yelp_nrtsearch_luceneserver_proto_rawDescOnce sync.Once
	file_yelp_nrtsearch_luceneserver_proto_rawDescData = file_yelp_nrtsearch_luceneserver_proto_rawDesc
)

func file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP() []byte {
	file_yelp_nrtsearch_luceneserver_proto_rawDescOnce.Do(func() {
		file_yelp_nrtsearch_luceneserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_yelp_nrtsearch_luceneserver_proto_rawDescData)
	})
	return file_yelp_nrtsearch_luceneserver_proto_rawDescData
}

var file_yelp_nrtsearch_luceneserver_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_yelp_nrtsearch_luceneserver_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_yelp_nrtsearch_luceneserver_proto_goTypes = []interface{}{
	(FieldType)(0),                              // 0: luceneserver.FieldType
	(IndexOptions)(0),                           // 1: luceneserver.IndexOptions
	(TermVectors)(0),                            // 2: luceneserver.TermVectors
	(FacetType)(0),                              // 3: luceneserver.FacetType
	(Mode)(0),                                   // 4: luceneserver.Mode
	(SampleType)(0),                             // 5: luceneserver.SampleType
	(TransferStatusCode)(0),                     // 6: luceneserver.TransferStatusCode
	(*CreateIndexRequest)(nil),                  // 7: luceneserver.CreateIndexRequest
	(*CreateIndexResponse)(nil),                 // 8: luceneserver.CreateIndexResponse
	(*LiveSettingsRequest)(nil),                 // 9: luceneserver.LiveSettingsRequest
	(*LiveSettingsResponse)(nil),                // 10: luceneserver.LiveSettingsResponse
	(*Field)(nil),                               // 11: luceneserver.Field
	(*FieldDefRequest)(nil),                     // 12: luceneserver.FieldDefRequest
	(*FieldDefResponse)(nil),                    // 13: luceneserver.FieldDefResponse
	(*SettingsRequest)(nil),                     // 14: luceneserver.SettingsRequest
	(*SettingsResponse)(nil),                    // 15: luceneserver.SettingsResponse
	(*StartIndexRequest)(nil),                   // 16: luceneserver.StartIndexRequest
	(*StartIndexResponse)(nil),                  // 17: luceneserver.StartIndexResponse
	(*AddDocumentRequest)(nil),                  // 18: luceneserver.AddDocumentRequest
	(*AddDocumentResponse)(nil),                 // 19: luceneserver.AddDocumentResponse
	(*RefreshRequest)(nil),                      // 20: luceneserver.RefreshRequest
	(*RefreshResponse)(nil),                     // 21: luceneserver.RefreshResponse
	(*CommitRequest)(nil),                       // 22: luceneserver.CommitRequest
	(*CommitResponse)(nil),                      // 23: luceneserver.CommitResponse
	(*StatsRequest)(nil),                        // 24: luceneserver.StatsRequest
	(*StatsResponse)(nil),                       // 25: luceneserver.StatsResponse
	(*Taxonomy)(nil),                            // 26: luceneserver.Taxonomy
	(*Searcher)(nil),                            // 27: luceneserver.Searcher
	(*DeleteAllDocumentsRequest)(nil),           // 28: luceneserver.DeleteAllDocumentsRequest
	(*DeleteAllDocumentsResponse)(nil),          // 29: luceneserver.DeleteAllDocumentsResponse
	(*DeleteIndexRequest)(nil),                  // 30: luceneserver.DeleteIndexRequest
	(*DeleteIndexResponse)(nil),                 // 31: luceneserver.DeleteIndexResponse
	(*DummyResponse)(nil),                       // 32: luceneserver.DummyResponse
	(*StopIndexRequest)(nil),                    // 33: luceneserver.StopIndexRequest
	(*BuildSuggestRequest)(nil),                 // 34: luceneserver.BuildSuggestRequest
	(*BuildSuggestResponse)(nil),                // 35: luceneserver.BuildSuggestResponse
	(*SuggestLookupRequest)(nil),                // 36: luceneserver.SuggestLookupRequest
	(*SuggestLookupResponse)(nil),               // 37: luceneserver.SuggestLookupResponse
	(*OneSuggestLookupResponse)(nil),            // 38: luceneserver.OneSuggestLookupResponse
	(*SuggestLookupHighlight)(nil),              // 39: luceneserver.SuggestLookupHighlight
	(*OneHighlight)(nil),                        // 40: luceneserver.OneHighlight
	(*SuggestLocalSource)(nil),                  // 41: luceneserver.SuggestLocalSource
	(*SuggestNonLocalSource)(nil),               // 42: luceneserver.SuggestNonLocalSource
	(*InfixSuggester)(nil),                      // 43: luceneserver.InfixSuggester
	(*AnalyzingSuggester)(nil),                  // 44: luceneserver.AnalyzingSuggester
	(*FuzzySuggester)(nil),                      // 45: luceneserver.FuzzySuggester
	(*CreateSnapshotRequest)(nil),               // 46: luceneserver.CreateSnapshotRequest
	(*CreateSnapshotResponse)(nil),              // 47: luceneserver.CreateSnapshotResponse
	(*SnapshotId)(nil),                          // 48: luceneserver.SnapshotId
	(*ReleaseSnapshotRequest)(nil),              // 49: luceneserver.ReleaseSnapshotRequest
	(*ReleaseSnapshotResponse)(nil),             // 50: luceneserver.ReleaseSnapshotResponse
	(*BackupIndexRequest)(nil),                  // 51: luceneserver.BackupIndexRequest
	(*BackupIndexResponse)(nil),                 // 52: luceneserver.BackupIndexResponse
	(*MetricsRequest)(nil),                      // 53: luceneserver.MetricsRequest
	(*MetricsResponse)(nil),                     // 54: luceneserver.MetricsResponse
	(*MetricFamilySamples)(nil),                 // 55: luceneserver.MetricFamilySamples
	(*Sample)(nil),                              // 56: luceneserver.Sample
	(*IndicesRequest)(nil),                      // 57: luceneserver.IndicesRequest
	(*IndicesResponse)(nil),                     // 58: luceneserver.IndicesResponse
	(*IndexStatsResponse)(nil),                  // 59: luceneserver.IndexStatsResponse
	(*RestoreIndex)(nil),                        // 60: luceneserver.RestoreIndex
	(*AddReplicaRequest)(nil),                   // 61: luceneserver.AddReplicaRequest
	(*AddReplicaResponse)(nil),                  // 62: luceneserver.AddReplicaResponse
	(*CopyState)(nil),                           // 63: luceneserver.CopyState
	(*FilesMetadata)(nil),                       // 64: luceneserver.FilesMetadata
	(*FileMetadata)(nil),                        // 65: luceneserver.FileMetadata
	(*CopyFiles)(nil),                           // 66: luceneserver.CopyFiles
	(*CopyStateRequest)(nil),                    // 67: luceneserver.CopyStateRequest
	(*FilesInfo)(nil),                           // 68: luceneserver.FilesInfo
	(*FileInfo)(nil),                            // 69: luceneserver.FileInfo
	(*RawFileChunk)(nil),                        // 70: luceneserver.RawFileChunk
	(*HealthCheckRequest)(nil),                  // 71: luceneserver.HealthCheckRequest
	(*HealthCheckResponse)(nil),                 // 72: luceneserver.HealthCheckResponse
	(*TransferStatus)(nil),                      // 73: luceneserver.TransferStatus
	(*NewNRTPoint)(nil),                         // 74: luceneserver.NewNRTPoint
	(*IndexName)(nil),                           // 75: luceneserver.IndexName
	(*SearcherVersion)(nil),                     // 76: luceneserver.SearcherVersion
	(*GetNodesRequest)(nil),                     // 77: luceneserver.GetNodesRequest
	(*GetNodesResponse)(nil),                    // 78: luceneserver.GetNodesResponse
	(*NodeInfo)(nil),                            // 79: luceneserver.NodeInfo
	(*AddDocumentRequest_MultiValuedField)(nil), // 80: luceneserver.AddDocumentRequest.MultiValuedField
	nil,                    // 81: luceneserver.AddDocumentRequest.FieldsEntry
	(*Analyzer)(nil),       // 82: luceneserver.Analyzer
	(*SortFields)(nil),     // 83: luceneserver.SortFields
	(*SearchRequest)(nil),  // 84: luceneserver.SearchRequest
	(*SearchResponse)(nil), // 85: luceneserver.SearchResponse
}
var file_yelp_nrtsearch_luceneserver_proto_depIdxs = []int32{
	0,  // 0: luceneserver.Field.type:type_name -> luceneserver.FieldType
	1,  // 1: luceneserver.Field.indexOptions:type_name -> luceneserver.IndexOptions
	82, // 2: luceneserver.Field.analyzer:type_name -> luceneserver.Analyzer
	82, // 3: luceneserver.Field.indexAnalyzer:type_name -> luceneserver.Analyzer
	82, // 4: luceneserver.Field.searchAnalyzer:type_name -> luceneserver.Analyzer
	2,  // 5: luceneserver.Field.termVectors:type_name -> luceneserver.TermVectors
	3,  // 6: luceneserver.Field.facet:type_name -> luceneserver.FacetType
	11, // 7: luceneserver.FieldDefRequest.field:type_name -> luceneserver.Field
	83, // 8: luceneserver.SettingsRequest.indexSort:type_name -> luceneserver.SortFields
	4,  // 9: luceneserver.StartIndexRequest.mode:type_name -> luceneserver.Mode
	60, // 10: luceneserver.StartIndexRequest.restore:type_name -> luceneserver.RestoreIndex
	81, // 11: luceneserver.AddDocumentRequest.fields:type_name -> luceneserver.AddDocumentRequest.FieldsEntry
	26, // 12: luceneserver.StatsResponse.taxonomy:type_name -> luceneserver.Taxonomy
	27, // 13: luceneserver.StatsResponse.searchers:type_name -> luceneserver.Searcher
	27, // 14: luceneserver.StatsResponse.currentSearcher:type_name -> luceneserver.Searcher
	43, // 15: luceneserver.BuildSuggestRequest.infixSuggester:type_name -> luceneserver.InfixSuggester
	44, // 16: luceneserver.BuildSuggestRequest.analyzingSuggester:type_name -> luceneserver.AnalyzingSuggester
	45, // 17: luceneserver.BuildSuggestRequest.fuzzySuggester:type_name -> luceneserver.FuzzySuggester
	41, // 18: luceneserver.BuildSuggestRequest.localSource:type_name -> luceneserver.SuggestLocalSource
	42, // 19: luceneserver.BuildSuggestRequest.nonLocalSource:type_name -> luceneserver.SuggestNonLocalSource
	38, // 20: luceneserver.SuggestLookupResponse.results:type_name -> luceneserver.OneSuggestLookupResponse
	39, // 21: luceneserver.OneSuggestLookupResponse.suggestLookupHighlight:type_name -> luceneserver.SuggestLookupHighlight
	40, // 22: luceneserver.SuggestLookupHighlight.oneHighlight:type_name -> luceneserver.OneHighlight
	48, // 23: luceneserver.CreateSnapshotResponse.snapshotId:type_name -> luceneserver.SnapshotId
	48, // 24: luceneserver.ReleaseSnapshotRequest.snapshotId:type_name -> luceneserver.SnapshotId
	55, // 25: luceneserver.MetricsResponse.metricFamilySample:type_name -> luceneserver.MetricFamilySamples
	5,  // 26: luceneserver.MetricFamilySamples.type:type_name -> luceneserver.SampleType
	56, // 27: luceneserver.MetricFamilySamples.samples:type_name -> luceneserver.Sample
	59, // 28: luceneserver.IndicesResponse.indicesResponse:type_name -> luceneserver.IndexStatsResponse
	25, // 29: luceneserver.IndexStatsResponse.statsResponse:type_name -> luceneserver.StatsResponse
	64, // 30: luceneserver.CopyState.filesMetadata:type_name -> luceneserver.FilesMetadata
	65, // 31: luceneserver.FilesMetadata.fileMetadata:type_name -> luceneserver.FileMetadata
	64, // 32: luceneserver.CopyFiles.filesMetadata:type_name -> luceneserver.FilesMetadata
	69, // 33: luceneserver.FilesInfo.fileInfo:type_name -> luceneserver.FileInfo
	6,  // 34: luceneserver.HealthCheckResponse.health:type_name -> luceneserver.TransferStatusCode
	6,  // 35: luceneserver.TransferStatus.Code:type_name -> luceneserver.TransferStatusCode
	79, // 36: luceneserver.GetNodesResponse.nodes:type_name -> luceneserver.NodeInfo
	80, // 37: luceneserver.AddDocumentRequest.FieldsEntry.value:type_name -> luceneserver.AddDocumentRequest.MultiValuedField
	7,  // 38: luceneserver.LuceneServer.createIndex:input_type -> luceneserver.CreateIndexRequest
	9,  // 39: luceneserver.LuceneServer.liveSettings:input_type -> luceneserver.LiveSettingsRequest
	12, // 40: luceneserver.LuceneServer.registerFields:input_type -> luceneserver.FieldDefRequest
	12, // 41: luceneserver.LuceneServer.updateFields:input_type -> luceneserver.FieldDefRequest
	14, // 42: luceneserver.LuceneServer.settings:input_type -> luceneserver.SettingsRequest
	16, // 43: luceneserver.LuceneServer.startIndex:input_type -> luceneserver.StartIndexRequest
	33, // 44: luceneserver.LuceneServer.stopIndex:input_type -> luceneserver.StopIndexRequest
	18, // 45: luceneserver.LuceneServer.addDocuments:input_type -> luceneserver.AddDocumentRequest
	20, // 46: luceneserver.LuceneServer.refresh:input_type -> luceneserver.RefreshRequest
	22, // 47: luceneserver.LuceneServer.commit:input_type -> luceneserver.CommitRequest
	24, // 48: luceneserver.LuceneServer.stats:input_type -> luceneserver.StatsRequest
	84, // 49: luceneserver.LuceneServer.search:input_type -> luceneserver.SearchRequest
	18, // 50: luceneserver.LuceneServer.delete:input_type -> luceneserver.AddDocumentRequest
	28, // 51: luceneserver.LuceneServer.deleteAll:input_type -> luceneserver.DeleteAllDocumentsRequest
	30, // 52: luceneserver.LuceneServer.deleteIndex:input_type -> luceneserver.DeleteIndexRequest
	71, // 53: luceneserver.LuceneServer.status:input_type -> luceneserver.HealthCheckRequest
	34, // 54: luceneserver.LuceneServer.buildSuggest:input_type -> luceneserver.BuildSuggestRequest
	36, // 55: luceneserver.LuceneServer.suggestLookup:input_type -> luceneserver.SuggestLookupRequest
	34, // 56: luceneserver.LuceneServer.updateSuggest:input_type -> luceneserver.BuildSuggestRequest
	46, // 57: luceneserver.LuceneServer.createSnapshot:input_type -> luceneserver.CreateSnapshotRequest
	49, // 58: luceneserver.LuceneServer.releaseSnapshot:input_type -> luceneserver.ReleaseSnapshotRequest
	51, // 59: luceneserver.LuceneServer.backupIndex:input_type -> luceneserver.BackupIndexRequest
	53, // 60: luceneserver.LuceneServer.metrics:input_type -> luceneserver.MetricsRequest
	57, // 61: luceneserver.LuceneServer.indices:input_type -> luceneserver.IndicesRequest
	61, // 62: luceneserver.ReplicationServer.addReplicas:input_type -> luceneserver.AddReplicaRequest
	67, // 63: luceneserver.ReplicationServer.recvCopyState:input_type -> luceneserver.CopyStateRequest
	70, // 64: luceneserver.ReplicationServer.sendRawFile:input_type -> luceneserver.RawFileChunk
	69, // 65: luceneserver.ReplicationServer.recvRawFile:input_type -> luceneserver.FileInfo
	66, // 66: luceneserver.ReplicationServer.copyFiles:input_type -> luceneserver.CopyFiles
	74, // 67: luceneserver.ReplicationServer.newNRTPoint:input_type -> luceneserver.NewNRTPoint
	75, // 68: luceneserver.ReplicationServer.writeNRTPoint:input_type -> luceneserver.IndexName
	75, // 69: luceneserver.ReplicationServer.getCurrentSearcherVersion:input_type -> luceneserver.IndexName
	77, // 70: luceneserver.ReplicationServer.getConnectedNodes:input_type -> luceneserver.GetNodesRequest
	8,  // 71: luceneserver.LuceneServer.createIndex:output_type -> luceneserver.CreateIndexResponse
	10, // 72: luceneserver.LuceneServer.liveSettings:output_type -> luceneserver.LiveSettingsResponse
	13, // 73: luceneserver.LuceneServer.registerFields:output_type -> luceneserver.FieldDefResponse
	13, // 74: luceneserver.LuceneServer.updateFields:output_type -> luceneserver.FieldDefResponse
	15, // 75: luceneserver.LuceneServer.settings:output_type -> luceneserver.SettingsResponse
	17, // 76: luceneserver.LuceneServer.startIndex:output_type -> luceneserver.StartIndexResponse
	32, // 77: luceneserver.LuceneServer.stopIndex:output_type -> luceneserver.DummyResponse
	19, // 78: luceneserver.LuceneServer.addDocuments:output_type -> luceneserver.AddDocumentResponse
	21, // 79: luceneserver.LuceneServer.refresh:output_type -> luceneserver.RefreshResponse
	23, // 80: luceneserver.LuceneServer.commit:output_type -> luceneserver.CommitResponse
	25, // 81: luceneserver.LuceneServer.stats:output_type -> luceneserver.StatsResponse
	85, // 82: luceneserver.LuceneServer.search:output_type -> luceneserver.SearchResponse
	19, // 83: luceneserver.LuceneServer.delete:output_type -> luceneserver.AddDocumentResponse
	29, // 84: luceneserver.LuceneServer.deleteAll:output_type -> luceneserver.DeleteAllDocumentsResponse
	31, // 85: luceneserver.LuceneServer.deleteIndex:output_type -> luceneserver.DeleteIndexResponse
	72, // 86: luceneserver.LuceneServer.status:output_type -> luceneserver.HealthCheckResponse
	35, // 87: luceneserver.LuceneServer.buildSuggest:output_type -> luceneserver.BuildSuggestResponse
	37, // 88: luceneserver.LuceneServer.suggestLookup:output_type -> luceneserver.SuggestLookupResponse
	35, // 89: luceneserver.LuceneServer.updateSuggest:output_type -> luceneserver.BuildSuggestResponse
	47, // 90: luceneserver.LuceneServer.createSnapshot:output_type -> luceneserver.CreateSnapshotResponse
	50, // 91: luceneserver.LuceneServer.releaseSnapshot:output_type -> luceneserver.ReleaseSnapshotResponse
	52, // 92: luceneserver.LuceneServer.backupIndex:output_type -> luceneserver.BackupIndexResponse
	54, // 93: luceneserver.LuceneServer.metrics:output_type -> luceneserver.MetricsResponse
	58, // 94: luceneserver.LuceneServer.indices:output_type -> luceneserver.IndicesResponse
	62, // 95: luceneserver.ReplicationServer.addReplicas:output_type -> luceneserver.AddReplicaResponse
	63, // 96: luceneserver.ReplicationServer.recvCopyState:output_type -> luceneserver.CopyState
	73, // 97: luceneserver.ReplicationServer.sendRawFile:output_type -> luceneserver.TransferStatus
	70, // 98: luceneserver.ReplicationServer.recvRawFile:output_type -> luceneserver.RawFileChunk
	73, // 99: luceneserver.ReplicationServer.copyFiles:output_type -> luceneserver.TransferStatus
	73, // 100: luceneserver.ReplicationServer.newNRTPoint:output_type -> luceneserver.TransferStatus
	76, // 101: luceneserver.ReplicationServer.writeNRTPoint:output_type -> luceneserver.SearcherVersion
	76, // 102: luceneserver.ReplicationServer.getCurrentSearcherVersion:output_type -> luceneserver.SearcherVersion
	78, // 103: luceneserver.ReplicationServer.getConnectedNodes:output_type -> luceneserver.GetNodesResponse
	71, // [71:104] is the sub-list for method output_type
	38, // [38:71] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_yelp_nrtsearch_luceneserver_proto_init() }
func file_yelp_nrtsearch_luceneserver_proto_init() {
	if File_yelp_nrtsearch_luceneserver_proto != nil {
		return
	}
	file_yelp_nrtsearch_search_proto_init()
	file_yelp_nrtsearch_analysis_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldDefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldDefResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Taxonomy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Searcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAllDocumentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAllDocumentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DummyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildSuggestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildSuggestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestLookupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestLookupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneSuggestLookupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestLookupHighlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneHighlight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestLocalSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuggestNonLocalSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfixSuggester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnalyzingSuggester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FuzzySuggester); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricFamilySamples); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReplicaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawFileChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewNRTPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearcherVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDocumentRequest_MultiValuedField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yelp_nrtsearch_luceneserver_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*BuildSuggestRequest_InfixSuggester)(nil),
		(*BuildSuggestRequest_AnalyzingSuggester)(nil),
		(*BuildSuggestRequest_FuzzySuggester)(nil),
		(*BuildSuggestRequest_LocalSource)(nil),
		(*BuildSuggestRequest_NonLocalSource)(nil),
	}
	file_yelp_nrtsearch_luceneserver_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*OneSuggestLookupResponse_SuggestLookupHighlight)(nil),
		(*OneSuggestLookupResponse_Key)(nil),
	}
	file_yelp_nrtsearch_luceneserver_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*SuggestNonLocalSource_IndexGen)(nil),
		(*SuggestNonLocalSource_Version)(nil),
		(*SuggestNonLocalSource_Snapshot)(nil),
		(*SuggestNonLocalSource_WeightField)(nil),
		(*SuggestNonLocalSource_WeightExpression)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yelp_nrtsearch_luceneserver_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_yelp_nrtsearch_luceneserver_proto_goTypes,
		DependencyIndexes: file_yelp_nrtsearch_luceneserver_proto_depIdxs,
		EnumInfos:         file_yelp_nrtsearch_luceneserver_proto_enumTypes,
		MessageInfos:      file_yelp_nrtsearch_luceneserver_proto_msgTypes,
	}.Build()
	File_yelp_nrtsearch_luceneserver_proto = out.File
	file_yelp_nrtsearch_luceneserver_proto_rawDesc = nil
	file_yelp_nrtsearch_luceneserver_proto_goTypes = nil
	file_yelp_nrtsearch_luceneserver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LuceneServerClient is the client API for LuceneServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LuceneServerClient interface {
	// Create an Index
	CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*CreateIndexResponse, error)
	// Change global offline or online settings for this index.
	LiveSettings(ctx context.Context, in *LiveSettingsRequest, opts ...grpc.CallOption) (*LiveSettingsResponse, error)
	// Registers one or more fields.  Fields must be registered before they can be added in a document (via @addDocument).
	//Pass a list of Fields and an indexName. Any number of fields may be registered in a single request,
	//and once a field is registered it cannot be changed (write-once).
	//This returns the full set of fields currently registered.
	RegisterFields(ctx context.Context, in *FieldDefRequest, opts ...grpc.CallOption) (*FieldDefResponse, error)
	// Adds one or more fields.  Fields must be registered before they can be added in a document (via @addDocument).
	//Pass a list of Fields and an indexName. Any number of fields may be registered in a single request,
	//and once a field is registered it cannot be changed (write-once).
	//This returns the full set of fields currently registered.
	UpdateFields(ctx context.Context, in *FieldDefRequest, opts ...grpc.CallOption) (*FieldDefResponse, error)
	// Change global offline settings for this index.
	//This returns the currently set settings; pass no settings changes to retrieve current settings.
	Settings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*SettingsResponse, error)
	// Starts an index
	StartIndex(ctx context.Context, in *StartIndexRequest, opts ...grpc.CallOption) (*StartIndexResponse, error)
	// Stops an index
	StopIndex(ctx context.Context, in *StopIndexRequest, opts ...grpc.CallOption) (*DummyResponse, error)
	// Adds a stream of Documents
	AddDocuments(ctx context.Context, opts ...grpc.CallOption) (LuceneServer_AddDocumentsClient, error)
	// Refresh the latest searcher for an index
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	// Commits all pending changes to durable storage
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	// Retrieve index statistics
	Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
	// Search
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Delete documents
	Delete(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error)
	// Delete all documents for index
	DeleteAll(ctx context.Context, in *DeleteAllDocumentsRequest, opts ...grpc.CallOption) (*DeleteAllDocumentsResponse, error)
	// Delete index
	DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*DeleteIndexResponse, error)
	// healthcheck
	Status(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Builds a new auto-suggester, loading suggestions via the provided local file path.
	BuildSuggest(ctx context.Context, in *BuildSuggestRequest, opts ...grpc.CallOption) (*BuildSuggestResponse, error)
	// Perform an auto-suggest lookup.
	SuggestLookup(ctx context.Context, in *SuggestLookupRequest, opts ...grpc.CallOption) (*SuggestLookupResponse, error)
	// Updates existing suggestions, if the suggester supports near-real-time changes.
	UpdateSuggest(ctx context.Context, in *BuildSuggestRequest, opts ...grpc.CallOption) (*BuildSuggestResponse, error)
	//
	//Creates a snapshot in the index, which is saved point-in-time view of the last commit
	//in the index such that no files referenced by that snapshot will be deleted by ongoing
	//indexing until the snapshot is released with @releaseSnapshot.  Note that this will
	//reference the last commit, so be sure to call commit first if you have pending changes
	//that you'd like to be included in the snapshot.
	//This can be used for backup purposes, i.e. after creating the snapshot you can copy
	//all referenced files to backup storage, and then release the snapshot once complete.
	//To restore the backup, just copy all the files back and restart the server.
	//It can also be used for transactional purposes, i.e. if you sometimes need to search a
	//specific snapshot instead of the current live index. Creating a snapshot is very fast
	//(does not require any file copying), but over time it will consume extra disk space as
	//old segments are merged in the index.  Be sure to release the snapshot once you're done.
	//Snapshots survive shutdown and restart of the server.  Returns all protected filenames
	//referenced by this snapshot: these files will not change and will not be deleted until
	//the snapshot is released.  This returns the directories and files referenced by the snapshot.
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error)
	// releases a snapshot previously created with @createSnapshot.
	ReleaseSnapshot(ctx context.Context, in *ReleaseSnapshotRequest, opts ...grpc.CallOption) (*ReleaseSnapshotResponse, error)
	// backs up a resource (index) and it associated metadata e.g. settings, schema to s3
	BackupIndex(ctx context.Context, in *BackupIndexRequest, opts ...grpc.CallOption) (*BackupIndexResponse, error)
	// metrics
	Metrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error)
	// indices
	Indices(ctx context.Context, in *IndicesRequest, opts ...grpc.CallOption) (*IndicesResponse, error)
}

type luceneServerClient struct {
	cc grpc.ClientConnInterface
}

func NewLuceneServerClient(cc grpc.ClientConnInterface) LuceneServerClient {
	return &luceneServerClient{cc}
}

func (c *luceneServerClient) CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*CreateIndexResponse, error) {
	out := new(CreateIndexResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/createIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) LiveSettings(ctx context.Context, in *LiveSettingsRequest, opts ...grpc.CallOption) (*LiveSettingsResponse, error) {
	out := new(LiveSettingsResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/liveSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) RegisterFields(ctx context.Context, in *FieldDefRequest, opts ...grpc.CallOption) (*FieldDefResponse, error) {
	out := new(FieldDefResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/registerFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) UpdateFields(ctx context.Context, in *FieldDefRequest, opts ...grpc.CallOption) (*FieldDefResponse, error) {
	out := new(FieldDefResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/updateFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Settings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*SettingsResponse, error) {
	out := new(SettingsResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/settings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) StartIndex(ctx context.Context, in *StartIndexRequest, opts ...grpc.CallOption) (*StartIndexResponse, error) {
	out := new(StartIndexResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/startIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) StopIndex(ctx context.Context, in *StopIndexRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/stopIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) AddDocuments(ctx context.Context, opts ...grpc.CallOption) (LuceneServer_AddDocumentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LuceneServer_serviceDesc.Streams[0], "/luceneserver.LuceneServer/addDocuments", opts...)
	if err != nil {
		return nil, err
	}
	x := &luceneServerAddDocumentsClient{stream}
	return x, nil
}

type LuceneServer_AddDocumentsClient interface {
	Send(*AddDocumentRequest) error
	CloseAndRecv() (*AddDocumentResponse, error)
	grpc.ClientStream
}

type luceneServerAddDocumentsClient struct {
	grpc.ClientStream
}

func (x *luceneServerAddDocumentsClient) Send(m *AddDocumentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *luceneServerAddDocumentsClient) CloseAndRecv() (*AddDocumentResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddDocumentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *luceneServerClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Delete(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error) {
	out := new(AddDocumentResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) DeleteAll(ctx context.Context, in *DeleteAllDocumentsRequest, opts ...grpc.CallOption) (*DeleteAllDocumentsResponse, error) {
	out := new(DeleteAllDocumentsResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/deleteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*DeleteIndexResponse, error) {
	out := new(DeleteIndexResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/deleteIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Status(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) BuildSuggest(ctx context.Context, in *BuildSuggestRequest, opts ...grpc.CallOption) (*BuildSuggestResponse, error) {
	out := new(BuildSuggestResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/buildSuggest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) SuggestLookup(ctx context.Context, in *SuggestLookupRequest, opts ...grpc.CallOption) (*SuggestLookupResponse, error) {
	out := new(SuggestLookupResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/suggestLookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) UpdateSuggest(ctx context.Context, in *BuildSuggestRequest, opts ...grpc.CallOption) (*BuildSuggestResponse, error) {
	out := new(BuildSuggestResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/updateSuggest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error) {
	out := new(CreateSnapshotResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/createSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) ReleaseSnapshot(ctx context.Context, in *ReleaseSnapshotRequest, opts ...grpc.CallOption) (*ReleaseSnapshotResponse, error) {
	out := new(ReleaseSnapshotResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/releaseSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) BackupIndex(ctx context.Context, in *BackupIndexRequest, opts ...grpc.CallOption) (*BackupIndexResponse, error) {
	out := new(BackupIndexResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/backupIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Metrics(ctx context.Context, in *MetricsRequest, opts ...grpc.CallOption) (*MetricsResponse, error) {
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/metrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Indices(ctx context.Context, in *IndicesRequest, opts ...grpc.CallOption) (*IndicesResponse, error) {
	out := new(IndicesResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/indices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LuceneServerServer is the server API for LuceneServer service.
type LuceneServerServer interface {
	// Create an Index
	CreateIndex(context.Context, *CreateIndexRequest) (*CreateIndexResponse, error)
	// Change global offline or online settings for this index.
	LiveSettings(context.Context, *LiveSettingsRequest) (*LiveSettingsResponse, error)
	// Registers one or more fields.  Fields must be registered before they can be added in a document (via @addDocument).
	//Pass a list of Fields and an indexName. Any number of fields may be registered in a single request,
	//and once a field is registered it cannot be changed (write-once).
	//This returns the full set of fields currently registered.
	RegisterFields(context.Context, *FieldDefRequest) (*FieldDefResponse, error)
	// Adds one or more fields.  Fields must be registered before they can be added in a document (via @addDocument).
	//Pass a list of Fields and an indexName. Any number of fields may be registered in a single request,
	//and once a field is registered it cannot be changed (write-once).
	//This returns the full set of fields currently registered.
	UpdateFields(context.Context, *FieldDefRequest) (*FieldDefResponse, error)
	// Change global offline settings for this index.
	//This returns the currently set settings; pass no settings changes to retrieve current settings.
	Settings(context.Context, *SettingsRequest) (*SettingsResponse, error)
	// Starts an index
	StartIndex(context.Context, *StartIndexRequest) (*StartIndexResponse, error)
	// Stops an index
	StopIndex(context.Context, *StopIndexRequest) (*DummyResponse, error)
	// Adds a stream of Documents
	AddDocuments(LuceneServer_AddDocumentsServer) error
	// Refresh the latest searcher for an index
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	// Commits all pending changes to durable storage
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	// Retrieve index statistics
	Stats(context.Context, *StatsRequest) (*StatsResponse, error)
	// Search
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// Delete documents
	Delete(context.Context, *AddDocumentRequest) (*AddDocumentResponse, error)
	// Delete all documents for index
	DeleteAll(context.Context, *DeleteAllDocumentsRequest) (*DeleteAllDocumentsResponse, error)
	// Delete index
	DeleteIndex(context.Context, *DeleteIndexRequest) (*DeleteIndexResponse, error)
	// healthcheck
	Status(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Builds a new auto-suggester, loading suggestions via the provided local file path.
	BuildSuggest(context.Context, *BuildSuggestRequest) (*BuildSuggestResponse, error)
	// Perform an auto-suggest lookup.
	SuggestLookup(context.Context, *SuggestLookupRequest) (*SuggestLookupResponse, error)
	// Updates existing suggestions, if the suggester supports near-real-time changes.
	UpdateSuggest(context.Context, *BuildSuggestRequest) (*BuildSuggestResponse, error)
	//
	//Creates a snapshot in the index, which is saved point-in-time view of the last commit
	//in the index such that no files referenced by that snapshot will be deleted by ongoing
	//indexing until the snapshot is released with @releaseSnapshot.  Note that this will
	//reference the last commit, so be sure to call commit first if you have pending changes
	//that you'd like to be included in the snapshot.
	//This can be used for backup purposes, i.e. after creating the snapshot you can copy
	//all referenced files to backup storage, and then release the snapshot once complete.
	//To restore the backup, just copy all the files back and restart the server.
	//It can also be used for transactional purposes, i.e. if you sometimes need to search a
	//specific snapshot instead of the current live index. Creating a snapshot is very fast
	//(does not require any file copying), but over time it will consume extra disk space as
	//old segments are merged in the index.  Be sure to release the snapshot once you're done.
	//Snapshots survive shutdown and restart of the server.  Returns all protected filenames
	//referenced by this snapshot: these files will not change and will not be deleted until
	//the snapshot is released.  This returns the directories and files referenced by the snapshot.
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error)
	// releases a snapshot previously created with @createSnapshot.
	ReleaseSnapshot(context.Context, *ReleaseSnapshotRequest) (*ReleaseSnapshotResponse, error)
	// backs up a resource (index) and it associated metadata e.g. settings, schema to s3
	BackupIndex(context.Context, *BackupIndexRequest) (*BackupIndexResponse, error)
	// metrics
	Metrics(context.Context, *MetricsRequest) (*MetricsResponse, error)
	// indices
	Indices(context.Context, *IndicesRequest) (*IndicesResponse, error)
}

// UnimplementedLuceneServerServer can be embedded to have forward compatible implementations.
type UnimplementedLuceneServerServer struct {
}

func (*UnimplementedLuceneServerServer) CreateIndex(context.Context, *CreateIndexRequest) (*CreateIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (*UnimplementedLuceneServerServer) LiveSettings(context.Context, *LiveSettingsRequest) (*LiveSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveSettings not implemented")
}
func (*UnimplementedLuceneServerServer) RegisterFields(context.Context, *FieldDefRequest) (*FieldDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFields not implemented")
}
func (*UnimplementedLuceneServerServer) UpdateFields(context.Context, *FieldDefRequest) (*FieldDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFields not implemented")
}
func (*UnimplementedLuceneServerServer) Settings(context.Context, *SettingsRequest) (*SettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Settings not implemented")
}
func (*UnimplementedLuceneServerServer) StartIndex(context.Context, *StartIndexRequest) (*StartIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartIndex not implemented")
}
func (*UnimplementedLuceneServerServer) StopIndex(context.Context, *StopIndexRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopIndex not implemented")
}
func (*UnimplementedLuceneServerServer) AddDocuments(LuceneServer_AddDocumentsServer) error {
	return status.Errorf(codes.Unimplemented, "method AddDocuments not implemented")
}
func (*UnimplementedLuceneServerServer) Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (*UnimplementedLuceneServerServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (*UnimplementedLuceneServerServer) Stats(context.Context, *StatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (*UnimplementedLuceneServerServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedLuceneServerServer) Delete(context.Context, *AddDocumentRequest) (*AddDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedLuceneServerServer) DeleteAll(context.Context, *DeleteAllDocumentsRequest) (*DeleteAllDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (*UnimplementedLuceneServerServer) DeleteIndex(context.Context, *DeleteIndexRequest) (*DeleteIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIndex not implemented")
}
func (*UnimplementedLuceneServerServer) Status(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedLuceneServerServer) BuildSuggest(context.Context, *BuildSuggestRequest) (*BuildSuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildSuggest not implemented")
}
func (*UnimplementedLuceneServerServer) SuggestLookup(context.Context, *SuggestLookupRequest) (*SuggestLookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestLookup not implemented")
}
func (*UnimplementedLuceneServerServer) UpdateSuggest(context.Context, *BuildSuggestRequest) (*BuildSuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSuggest not implemented")
}
func (*UnimplementedLuceneServerServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (*UnimplementedLuceneServerServer) ReleaseSnapshot(context.Context, *ReleaseSnapshotRequest) (*ReleaseSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSnapshot not implemented")
}
func (*UnimplementedLuceneServerServer) BackupIndex(context.Context, *BackupIndexRequest) (*BackupIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupIndex not implemented")
}
func (*UnimplementedLuceneServerServer) Metrics(context.Context, *MetricsRequest) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metrics not implemented")
}
func (*UnimplementedLuceneServerServer) Indices(context.Context, *IndicesRequest) (*IndicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Indices not implemented")
}

func RegisterLuceneServerServer(s *grpc.Server, srv LuceneServerServer) {
	s.RegisterService(&_LuceneServer_serviceDesc, srv)
}

func _LuceneServer_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/CreateIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).CreateIndex(ctx, req.(*CreateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_LiveSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).LiveSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/LiveSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).LiveSettings(ctx, req.(*LiveSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_RegisterFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).RegisterFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/RegisterFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).RegisterFields(ctx, req.(*FieldDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_UpdateFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).UpdateFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/UpdateFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).UpdateFields(ctx, req.(*FieldDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Settings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Settings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Settings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Settings(ctx, req.(*SettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_StartIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).StartIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/StartIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).StartIndex(ctx, req.(*StartIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_StopIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).StopIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/StopIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).StopIndex(ctx, req.(*StopIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_AddDocuments_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LuceneServerServer).AddDocuments(&luceneServerAddDocumentsServer{stream})
}

type LuceneServer_AddDocumentsServer interface {
	SendAndClose(*AddDocumentResponse) error
	Recv() (*AddDocumentRequest, error)
	grpc.ServerStream
}

type luceneServerAddDocumentsServer struct {
	grpc.ServerStream
}

func (x *luceneServerAddDocumentsServer) SendAndClose(m *AddDocumentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *luceneServerAddDocumentsServer) Recv() (*AddDocumentRequest, error) {
	m := new(AddDocumentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LuceneServer_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Stats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Delete(ctx, req.(*AddDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).DeleteAll(ctx, req.(*DeleteAllDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_DeleteIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).DeleteIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/DeleteIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).DeleteIndex(ctx, req.(*DeleteIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Status(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_BuildSuggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildSuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).BuildSuggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/BuildSuggest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).BuildSuggest(ctx, req.(*BuildSuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_SuggestLookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).SuggestLookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/SuggestLookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).SuggestLookup(ctx, req.(*SuggestLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_UpdateSuggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildSuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).UpdateSuggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/UpdateSuggest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).UpdateSuggest(ctx, req.(*BuildSuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/CreateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_ReleaseSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).ReleaseSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/ReleaseSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).ReleaseSnapshot(ctx, req.(*ReleaseSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_BackupIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).BackupIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/BackupIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).BackupIndex(ctx, req.(*BackupIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Metrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Metrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Metrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Metrics(ctx, req.(*MetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Indices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Indices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Indices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Indices(ctx, req.(*IndicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LuceneServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luceneserver.LuceneServer",
	HandlerType: (*LuceneServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createIndex",
			Handler:    _LuceneServer_CreateIndex_Handler,
		},
		{
			MethodName: "liveSettings",
			Handler:    _LuceneServer_LiveSettings_Handler,
		},
		{
			MethodName: "registerFields",
			Handler:    _LuceneServer_RegisterFields_Handler,
		},
		{
			MethodName: "updateFields",
			Handler:    _LuceneServer_UpdateFields_Handler,
		},
		{
			MethodName: "settings",
			Handler:    _LuceneServer_Settings_Handler,
		},
		{
			MethodName: "startIndex",
			Handler:    _LuceneServer_StartIndex_Handler,
		},
		{
			MethodName: "stopIndex",
			Handler:    _LuceneServer_StopIndex_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _LuceneServer_Refresh_Handler,
		},
		{
			MethodName: "commit",
			Handler:    _LuceneServer_Commit_Handler,
		},
		{
			MethodName: "stats",
			Handler:    _LuceneServer_Stats_Handler,
		},
		{
			MethodName: "search",
			Handler:    _LuceneServer_Search_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _LuceneServer_Delete_Handler,
		},
		{
			MethodName: "deleteAll",
			Handler:    _LuceneServer_DeleteAll_Handler,
		},
		{
			MethodName: "deleteIndex",
			Handler:    _LuceneServer_DeleteIndex_Handler,
		},
		{
			MethodName: "status",
			Handler:    _LuceneServer_Status_Handler,
		},
		{
			MethodName: "buildSuggest",
			Handler:    _LuceneServer_BuildSuggest_Handler,
		},
		{
			MethodName: "suggestLookup",
			Handler:    _LuceneServer_SuggestLookup_Handler,
		},
		{
			MethodName: "updateSuggest",
			Handler:    _LuceneServer_UpdateSuggest_Handler,
		},
		{
			MethodName: "createSnapshot",
			Handler:    _LuceneServer_CreateSnapshot_Handler,
		},
		{
			MethodName: "releaseSnapshot",
			Handler:    _LuceneServer_ReleaseSnapshot_Handler,
		},
		{
			MethodName: "backupIndex",
			Handler:    _LuceneServer_BackupIndex_Handler,
		},
		{
			MethodName: "metrics",
			Handler:    _LuceneServer_Metrics_Handler,
		},
		{
			MethodName: "indices",
			Handler:    _LuceneServer_Indices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "addDocuments",
			Handler:       _LuceneServer_AddDocuments_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "yelp/nrtsearch/luceneserver.proto",
}

// ReplicationServerClient is the client API for ReplicationServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReplicationServerClient interface {
	// Issued by replica on primary node when it comes up
	AddReplicas(ctx context.Context, in *AddReplicaRequest, opts ...grpc.CallOption) (*AddReplicaResponse, error)
	// Issued by replica to receive CopyState from primary
	RecvCopyState(ctx context.Context, in *CopyStateRequest, opts ...grpc.CallOption) (*CopyState, error)
	// Send a file as a stream in chunks
	SendRawFile(ctx context.Context, opts ...grpc.CallOption) (ReplicationServer_SendRawFileClient, error)
	// Receives a file as a stream in chunks. Typically issued by replica on primary
	RecvRawFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (ReplicationServer_RecvRawFileClient, error)
	// Issued by primary on replica to inform it to start copying files either pre-warming (new merged segments) or when replica comes up first time
	CopyFiles(ctx context.Context, in *CopyFiles, opts ...grpc.CallOption) (ReplicationServer_CopyFilesClient, error)
	// Invoked externally to replica, to notify it that a new NRT point was just created on the primary
	NewNRTPoint(ctx context.Context, in *NewNRTPoint, opts ...grpc.CallOption) (*TransferStatus, error)
	//* Invoked externally to primary, to make all recent index operations searchable on the primary and, once copying is done, on the replicas
	WriteNRTPoint(ctx context.Context, in *IndexName, opts ...grpc.CallOption) (*SearcherVersion, error)
	//* Invoked externally to replica, to get the current Searcher version on replica.
	GetCurrentSearcherVersion(ctx context.Context, in *IndexName, opts ...grpc.CallOption) (*SearcherVersion, error)
	//* Invoked externally on primary to find the list of replica nodes this node is connected to for binary replication per index
	GetConnectedNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
}

type replicationServerClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicationServerClient(cc grpc.ClientConnInterface) ReplicationServerClient {
	return &replicationServerClient{cc}
}

func (c *replicationServerClient) AddReplicas(ctx context.Context, in *AddReplicaRequest, opts ...grpc.CallOption) (*AddReplicaResponse, error) {
	out := new(AddReplicaResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/addReplicas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServerClient) RecvCopyState(ctx context.Context, in *CopyStateRequest, opts ...grpc.CallOption) (*CopyState, error) {
	out := new(CopyState)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/recvCopyState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServerClient) SendRawFile(ctx context.Context, opts ...grpc.CallOption) (ReplicationServer_SendRawFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReplicationServer_serviceDesc.Streams[0], "/luceneserver.ReplicationServer/sendRawFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationServerSendRawFileClient{stream}
	return x, nil
}

type ReplicationServer_SendRawFileClient interface {
	Send(*RawFileChunk) error
	CloseAndRecv() (*TransferStatus, error)
	grpc.ClientStream
}

type replicationServerSendRawFileClient struct {
	grpc.ClientStream
}

func (x *replicationServerSendRawFileClient) Send(m *RawFileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *replicationServerSendRawFileClient) CloseAndRecv() (*TransferStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TransferStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationServerClient) RecvRawFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (ReplicationServer_RecvRawFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReplicationServer_serviceDesc.Streams[1], "/luceneserver.ReplicationServer/recvRawFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationServerRecvRawFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplicationServer_RecvRawFileClient interface {
	Recv() (*RawFileChunk, error)
	grpc.ClientStream
}

type replicationServerRecvRawFileClient struct {
	grpc.ClientStream
}

func (x *replicationServerRecvRawFileClient) Recv() (*RawFileChunk, error) {
	m := new(RawFileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationServerClient) CopyFiles(ctx context.Context, in *CopyFiles, opts ...grpc.CallOption) (ReplicationServer_CopyFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReplicationServer_serviceDesc.Streams[2], "/luceneserver.ReplicationServer/copyFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationServerCopyFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplicationServer_CopyFilesClient interface {
	Recv() (*TransferStatus, error)
	grpc.ClientStream
}

type replicationServerCopyFilesClient struct {
	grpc.ClientStream
}

func (x *replicationServerCopyFilesClient) Recv() (*TransferStatus, error) {
	m := new(TransferStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationServerClient) NewNRTPoint(ctx context.Context, in *NewNRTPoint, opts ...grpc.CallOption) (*TransferStatus, error) {
	out := new(TransferStatus)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/newNRTPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServerClient) WriteNRTPoint(ctx context.Context, in *IndexName, opts ...grpc.CallOption) (*SearcherVersion, error) {
	out := new(SearcherVersion)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/writeNRTPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServerClient) GetCurrentSearcherVersion(ctx context.Context, in *IndexName, opts ...grpc.CallOption) (*SearcherVersion, error) {
	out := new(SearcherVersion)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/getCurrentSearcherVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServerClient) GetConnectedNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/getConnectedNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicationServerServer is the server API for ReplicationServer service.
type ReplicationServerServer interface {
	// Issued by replica on primary node when it comes up
	AddReplicas(context.Context, *AddReplicaRequest) (*AddReplicaResponse, error)
	// Issued by replica to receive CopyState from primary
	RecvCopyState(context.Context, *CopyStateRequest) (*CopyState, error)
	// Send a file as a stream in chunks
	SendRawFile(ReplicationServer_SendRawFileServer) error
	// Receives a file as a stream in chunks. Typically issued by replica on primary
	RecvRawFile(*FileInfo, ReplicationServer_RecvRawFileServer) error
	// Issued by primary on replica to inform it to start copying files either pre-warming (new merged segments) or when replica comes up first time
	CopyFiles(*CopyFiles, ReplicationServer_CopyFilesServer) error
	// Invoked externally to replica, to notify it that a new NRT point was just created on the primary
	NewNRTPoint(context.Context, *NewNRTPoint) (*TransferStatus, error)
	//* Invoked externally to primary, to make all recent index operations searchable on the primary and, once copying is done, on the replicas
	WriteNRTPoint(context.Context, *IndexName) (*SearcherVersion, error)
	//* Invoked externally to replica, to get the current Searcher version on replica.
	GetCurrentSearcherVersion(context.Context, *IndexName) (*SearcherVersion, error)
	//* Invoked externally on primary to find the list of replica nodes this node is connected to for binary replication per index
	GetConnectedNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
}

// UnimplementedReplicationServerServer can be embedded to have forward compatible implementations.
type UnimplementedReplicationServerServer struct {
}

func (*UnimplementedReplicationServerServer) AddReplicas(context.Context, *AddReplicaRequest) (*AddReplicaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReplicas not implemented")
}
func (*UnimplementedReplicationServerServer) RecvCopyState(context.Context, *CopyStateRequest) (*CopyState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvCopyState not implemented")
}
func (*UnimplementedReplicationServerServer) SendRawFile(ReplicationServer_SendRawFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendRawFile not implemented")
}
func (*UnimplementedReplicationServerServer) RecvRawFile(*FileInfo, ReplicationServer_RecvRawFileServer) error {
	return status.Errorf(codes.Unimplemented, "method RecvRawFile not implemented")
}
func (*UnimplementedReplicationServerServer) CopyFiles(*CopyFiles, ReplicationServer_CopyFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method CopyFiles not implemented")
}
func (*UnimplementedReplicationServerServer) NewNRTPoint(context.Context, *NewNRTPoint) (*TransferStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewNRTPoint not implemented")
}
func (*UnimplementedReplicationServerServer) WriteNRTPoint(context.Context, *IndexName) (*SearcherVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteNRTPoint not implemented")
}
func (*UnimplementedReplicationServerServer) GetCurrentSearcherVersion(context.Context, *IndexName) (*SearcherVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSearcherVersion not implemented")
}
func (*UnimplementedReplicationServerServer) GetConnectedNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectedNodes not implemented")
}

func RegisterReplicationServerServer(s *grpc.Server, srv ReplicationServerServer) {
	s.RegisterService(&_ReplicationServer_serviceDesc, srv)
}

func _ReplicationServer_AddReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).AddReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/AddReplicas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).AddReplicas(ctx, req.(*AddReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationServer_RecvCopyState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).RecvCopyState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/RecvCopyState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).RecvCopyState(ctx, req.(*CopyStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationServer_SendRawFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReplicationServerServer).SendRawFile(&replicationServerSendRawFileServer{stream})
}

type ReplicationServer_SendRawFileServer interface {
	SendAndClose(*TransferStatus) error
	Recv() (*RawFileChunk, error)
	grpc.ServerStream
}

type replicationServerSendRawFileServer struct {
	grpc.ServerStream
}

func (x *replicationServerSendRawFileServer) SendAndClose(m *TransferStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *replicationServerSendRawFileServer) Recv() (*RawFileChunk, error) {
	m := new(RawFileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ReplicationServer_RecvRawFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplicationServerServer).RecvRawFile(m, &replicationServerRecvRawFileServer{stream})
}

type ReplicationServer_RecvRawFileServer interface {
	Send(*RawFileChunk) error
	grpc.ServerStream
}

type replicationServerRecvRawFileServer struct {
	grpc.ServerStream
}

func (x *replicationServerRecvRawFileServer) Send(m *RawFileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplicationServer_CopyFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CopyFiles)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplicationServerServer).CopyFiles(m, &replicationServerCopyFilesServer{stream})
}

type ReplicationServer_CopyFilesServer interface {
	Send(*TransferStatus) error
	grpc.ServerStream
}

type replicationServerCopyFilesServer struct {
	grpc.ServerStream
}

func (x *replicationServerCopyFilesServer) Send(m *TransferStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplicationServer_NewNRTPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewNRTPoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).NewNRTPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/NewNRTPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).NewNRTPoint(ctx, req.(*NewNRTPoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationServer_WriteNRTPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).WriteNRTPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/WriteNRTPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).WriteNRTPoint(ctx, req.(*IndexName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationServer_GetCurrentSearcherVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).GetCurrentSearcherVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/GetCurrentSearcherVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).GetCurrentSearcherVersion(ctx, req.(*IndexName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationServer_GetConnectedNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).GetConnectedNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/GetConnectedNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).GetConnectedNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReplicationServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luceneserver.ReplicationServer",
	HandlerType: (*ReplicationServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addReplicas",
			Handler:    _ReplicationServer_AddReplicas_Handler,
		},
		{
			MethodName: "recvCopyState",
			Handler:    _ReplicationServer_RecvCopyState_Handler,
		},
		{
			MethodName: "newNRTPoint",
			Handler:    _ReplicationServer_NewNRTPoint_Handler,
		},
		{
			MethodName: "writeNRTPoint",
			Handler:    _ReplicationServer_WriteNRTPoint_Handler,
		},
		{
			MethodName: "getCurrentSearcherVersion",
			Handler:    _ReplicationServer_GetCurrentSearcherVersion_Handler,
		},
		{
			MethodName: "getConnectedNodes",
			Handler:    _ReplicationServer_GetConnectedNodes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sendRawFile",
			Handler:       _ReplicationServer_SendRawFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "recvRawFile",
			Handler:       _ReplicationServer_RecvRawFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "copyFiles",
			Handler:       _ReplicationServer_CopyFiles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "yelp/nrtsearch/luceneserver.proto",
}
