// Description of NRTSearch Service APIs and message types

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.4
// source: yelp/nrtsearch/luceneserver.proto

package nrtsearch

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of the field
type FieldType int32

const (
	FieldType_ATOM      FieldType = 0 // Text that's indexed as a single token, with DOCS_ONLY and omitting norms.
	FieldType_TEXT      FieldType = 1 // Text that's tokenized and indexed, with the index-time analyzer.
	FieldType_BOOLEAN   FieldType = 2 // Boolean value.
	FieldType_LONG      FieldType = 3 //Long value.
	FieldType_INT       FieldType = 4 // Int value.
	FieldType_DOUBLE    FieldType = 5 //Double value.
	FieldType_FLOAT     FieldType = 6 // Float value.
	FieldType_LAT_LON   FieldType = 7 // A latitude/longitude point.
	FieldType_DATE_TIME FieldType = 8 // Date and optional time.
	// TODO name this "dynamic" instead of "virtual"?
	FieldType_VIRTUAL FieldType = 9 // Virtual field defined with a JavaScript expression.
	// TODO need tests for internal:
	FieldType_INTERNAL FieldType = 10 //Internal field, currently only for holding indexed facets data.
	FieldType_CUSTOM   FieldType = 11 // Field type specified by name.
	FieldType__ID      FieldType = 12 // Field which will be used as document IDs
	FieldType_POLYGON  FieldType = 13 // Geojson string for polygon
	FieldType_OBJECT   FieldType = 14 // JSON
	// List of float values
	FieldType_VECTOR          FieldType = 15
	FieldType_CONTEXT_SUGGEST FieldType = 16 //Field used for contextual suggest fields
)

// Enum value maps for FieldType.
var (
	FieldType_name = map[int32]string{
		0:  "ATOM",
		1:  "TEXT",
		2:  "BOOLEAN",
		3:  "LONG",
		4:  "INT",
		5:  "DOUBLE",
		6:  "FLOAT",
		7:  "LAT_LON",
		8:  "DATE_TIME",
		9:  "VIRTUAL",
		10: "INTERNAL",
		11: "CUSTOM",
		12: "_ID",
		13: "POLYGON",
		14: "OBJECT",
		15: "VECTOR",
		16: "CONTEXT_SUGGEST",
	}
	FieldType_value = map[string]int32{
		"ATOM":            0,
		"TEXT":            1,
		"BOOLEAN":         2,
		"LONG":            3,
		"INT":             4,
		"DOUBLE":          5,
		"FLOAT":           6,
		"LAT_LON":         7,
		"DATE_TIME":       8,
		"VIRTUAL":         9,
		"INTERNAL":        10,
		"CUSTOM":          11,
		"_ID":             12,
		"POLYGON":         13,
		"OBJECT":          14,
		"VECTOR":          15,
		"CONTEXT_SUGGEST": 16,
	}
)

func (x FieldType) Enum() *FieldType {
	p := new(FieldType)
	*p = x
	return p
}

func (x FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[0].Descriptor()
}

func (FieldType) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[0]
}

func (x FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldType.Descriptor instead.
func (FieldType) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{0}
}

// How the tokens should be indexed.
type IndexOptions int32

const (
	IndexOptions_DOCS_FREQS_POSITIONS         IndexOptions = 0 // Index doc ids, term frequencies and positions.
	IndexOptions_DOCS                         IndexOptions = 1 // Index only doc ids (for binary search).
	IndexOptions_DOCS_FREQS                   IndexOptions = 2 // Index doc ids and term frequencies.
	IndexOptions_DOCS_FREQS_POSITIONS_OFFSETS IndexOptions = 3 // Index doc ids, term frequencies, positions and offsets.
)

// Enum value maps for IndexOptions.
var (
	IndexOptions_name = map[int32]string{
		0: "DOCS_FREQS_POSITIONS",
		1: "DOCS",
		2: "DOCS_FREQS",
		3: "DOCS_FREQS_POSITIONS_OFFSETS",
	}
	IndexOptions_value = map[string]int32{
		"DOCS_FREQS_POSITIONS":         0,
		"DOCS":                         1,
		"DOCS_FREQS":                   2,
		"DOCS_FREQS_POSITIONS_OFFSETS": 3,
	}
)

func (x IndexOptions) Enum() *IndexOptions {
	p := new(IndexOptions)
	*p = x
	return p
}

func (x IndexOptions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexOptions) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[1].Descriptor()
}

func (IndexOptions) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[1]
}

func (x IndexOptions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexOptions.Descriptor instead.
func (IndexOptions) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{1}
}

// Whether/how term vectors should be indexed.
type TermVectors int32

const (
	TermVectors_NO_TERMVECTORS                   TermVectors = 0 // no term vectors are indexed
	TermVectors_TERMS                            TermVectors = 1 // Index terms and freqs only.
	TermVectors_TERMS_POSITIONS                  TermVectors = 2 // Index terms, freqs and positions.
	TermVectors_TERMS_POSITIONS_OFFSETS          TermVectors = 3 // Index terms, freqs, positions and offsets.
	TermVectors_TERMS_POSITIONS_OFFSETS_PAYLOADS TermVectors = 4 // Index terms, freqs, positions, offsets and payloads
)

// Enum value maps for TermVectors.
var (
	TermVectors_name = map[int32]string{
		0: "NO_TERMVECTORS",
		1: "TERMS",
		2: "TERMS_POSITIONS",
		3: "TERMS_POSITIONS_OFFSETS",
		4: "TERMS_POSITIONS_OFFSETS_PAYLOADS",
	}
	TermVectors_value = map[string]int32{
		"NO_TERMVECTORS":                   0,
		"TERMS":                            1,
		"TERMS_POSITIONS":                  2,
		"TERMS_POSITIONS_OFFSETS":          3,
		"TERMS_POSITIONS_OFFSETS_PAYLOADS": 4,
	}
)

func (x TermVectors) Enum() *TermVectors {
	p := new(TermVectors)
	*p = x
	return p
}

func (x TermVectors) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TermVectors) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[2].Descriptor()
}

func (TermVectors) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[2]
}

func (x TermVectors) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TermVectors.Descriptor instead.
func (TermVectors) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{2}
}

// Whether/How this field should index facets, and how.
type FacetType int32

const (
	FacetType_NO_FACETS             FacetType = 0 //No facets are indexed.
	FacetType_FLAT                  FacetType = 1 //Facets are indexed with no hierarchy.
	FacetType_HIERARCHY             FacetType = 2 //Facets are indexed and are hierarchical.
	FacetType_NUMERIC_RANGE         FacetType = 3 //Compute facet counts for custom numeric ranges
	FacetType_SORTED_SET_DOC_VALUES FacetType = 4 //Uses SortedSetDocValuesFacetCounts, which must be flat but don't require a taxonomy index
)

// Enum value maps for FacetType.
var (
	FacetType_name = map[int32]string{
		0: "NO_FACETS",
		1: "FLAT",
		2: "HIERARCHY",
		3: "NUMERIC_RANGE",
		4: "SORTED_SET_DOC_VALUES",
	}
	FacetType_value = map[string]int32{
		"NO_FACETS":             0,
		"FLAT":                  1,
		"HIERARCHY":             2,
		"NUMERIC_RANGE":         3,
		"SORTED_SET_DOC_VALUES": 4,
	}
)

func (x FacetType) Enum() *FacetType {
	p := new(FacetType)
	*p = x
	return p
}

func (x FacetType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FacetType) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[3].Descriptor()
}

func (FacetType) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[3]
}

func (x FacetType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FacetType.Descriptor instead.
func (FacetType) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{3}
}

type Mode int32

const (
	Mode_STANDALONE Mode = 0
	Mode_PRIMARY    Mode = 1
	Mode_REPLICA    Mode = 2
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "STANDALONE",
		1: "PRIMARY",
		2: "REPLICA",
	}
	Mode_value = map[string]int32{
		"STANDALONE": 0,
		"PRIMARY":    1,
		"REPLICA":    2,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[4].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[4]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{4}
}

type TransferStatusCode int32

const (
	TransferStatusCode_Unknown TransferStatusCode = 0
	TransferStatusCode_Done    TransferStatusCode = 1
	TransferStatusCode_Failed  TransferStatusCode = 2
	TransferStatusCode_Ongoing TransferStatusCode = 3
)

// Enum value maps for TransferStatusCode.
var (
	TransferStatusCode_name = map[int32]string{
		0: "Unknown",
		1: "Done",
		2: "Failed",
		3: "Ongoing",
	}
	TransferStatusCode_value = map[string]int32{
		"Unknown": 0,
		"Done":    1,
		"Failed":  2,
		"Ongoing": 3,
	}
)

func (x TransferStatusCode) Enum() *TransferStatusCode {
	p := new(TransferStatusCode)
	*p = x
	return p
}

func (x TransferStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransferStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[5].Descriptor()
}

func (TransferStatusCode) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[5]
}

func (x TransferStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransferStatusCode.Descriptor instead.
func (TransferStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{5}
}

type ForceMergeResponse_Status int32

const (
	ForceMergeResponse_FORCE_MERGE_COMPLETED ForceMergeResponse_Status = 0
	ForceMergeResponse_FORCE_MERGE_SUBMITTED ForceMergeResponse_Status = 1
)

// Enum value maps for ForceMergeResponse_Status.
var (
	ForceMergeResponse_Status_name = map[int32]string{
		0: "FORCE_MERGE_COMPLETED",
		1: "FORCE_MERGE_SUBMITTED",
	}
	ForceMergeResponse_Status_value = map[string]int32{
		"FORCE_MERGE_COMPLETED": 0,
		"FORCE_MERGE_SUBMITTED": 1,
	}
)

func (x ForceMergeResponse_Status) Enum() *ForceMergeResponse_Status {
	p := new(ForceMergeResponse_Status)
	*p = x
	return p
}

func (x ForceMergeResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForceMergeResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[6].Descriptor()
}

func (ForceMergeResponse_Status) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[6]
}

func (x ForceMergeResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForceMergeResponse_Status.Descriptor instead.
func (ForceMergeResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{76, 0}
}

type ForceMergeDeletesResponse_Status int32

const (
	ForceMergeDeletesResponse_FORCE_MERGE_DELETES_COMPLETED ForceMergeDeletesResponse_Status = 0
	ForceMergeDeletesResponse_FORCE_MERGE_DELETES_SUBMITTED ForceMergeDeletesResponse_Status = 1
)

// Enum value maps for ForceMergeDeletesResponse_Status.
var (
	ForceMergeDeletesResponse_Status_name = map[int32]string{
		0: "FORCE_MERGE_DELETES_COMPLETED",
		1: "FORCE_MERGE_DELETES_SUBMITTED",
	}
	ForceMergeDeletesResponse_Status_value = map[string]int32{
		"FORCE_MERGE_DELETES_COMPLETED": 0,
		"FORCE_MERGE_DELETES_SUBMITTED": 1,
	}
)

func (x ForceMergeDeletesResponse_Status) Enum() *ForceMergeDeletesResponse_Status {
	p := new(ForceMergeDeletesResponse_Status)
	*p = x
	return p
}

func (x ForceMergeDeletesResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForceMergeDeletesResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_yelp_nrtsearch_luceneserver_proto_enumTypes[7].Descriptor()
}

func (ForceMergeDeletesResponse_Status) Type() protoreflect.EnumType {
	return &file_yelp_nrtsearch_luceneserver_proto_enumTypes[7]
}

func (x ForceMergeDeletesResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForceMergeDeletesResponse_Status.Descriptor instead.
func (ForceMergeDeletesResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{78, 0}
}

// Input to createIndex
type CreateIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` // name of the index to be created. [a-zA-Z0-9]*
	// Set if state/data already exists in the data backend. Provides the UUID to identify and load the index.
	ExistsWithId string `protobuf:"bytes,2,opt,name=existsWithId,proto3" json:"existsWithId,omitempty"`
	// Optional initial index settings
	Settings *IndexSettings `protobuf:"bytes,3,opt,name=settings,proto3" json:"settings,omitempty"`
	// Optional initial index live settings
	LiveSettings *IndexLiveSettings `protobuf:"bytes,4,opt,name=liveSettings,proto3" json:"liveSettings,omitempty"`
	// Optional initial index fields
	Fields []*Field `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
	// If this index should also be started, using IndexStartConfig configuration
	Start bool `protobuf:"varint,6,opt,name=start,proto3" json:"start,omitempty"`
}

func (x *CreateIndexRequest) Reset() {
	*x = CreateIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIndexRequest) ProtoMessage() {}

func (x *CreateIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIndexRequest.ProtoReflect.Descriptor instead.
func (*CreateIndexRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{0}
}

func (x *CreateIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *CreateIndexRequest) GetExistsWithId() string {
	if x != nil {
		return x.ExistsWithId
	}
	return ""
}

func (x *CreateIndexRequest) GetSettings() *IndexSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *CreateIndexRequest) GetLiveSettings() *IndexLiveSettings {
	if x != nil {
		return x.LiveSettings
	}
	return nil
}

func (x *CreateIndexRequest) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CreateIndexRequest) GetStart() bool {
	if x != nil {
		return x.Start
	}
	return false
}

// Response from Server to createIndex
type CreateIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *CreateIndexResponse) Reset() {
	*x = CreateIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIndexResponse) ProtoMessage() {}

func (x *CreateIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIndexResponse.ProtoReflect.Descriptor instead.
func (*CreateIndexResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{1}
}

func (x *CreateIndexResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Input to liveSettings
type LiveSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` // name of index whose liveSettings are to be updated.
	// Longest time to wait before reopening IndexSearcher (i.e., periodic background reopen).
	MaxRefreshSec float64 `protobuf:"fixed64,2,opt,name=maxRefreshSec,proto3" json:"maxRefreshSec,omitempty"`
	// Shortest time to wait before reopening IndexSearcher (i.e., when a search is waiting for a specific indexGen).
	MinRefreshSec float64 `protobuf:"fixed64,3,opt,name=minRefreshSec,proto3" json:"minRefreshSec,omitempty"`
	// Non-current searchers older than this are pruned.
	MaxSearcherAgeSec float64 `protobuf:"fixed64,4,opt,name=maxSearcherAgeSec,proto3" json:"maxSearcherAgeSec,omitempty"`
	// Size (in MB) of IndexWriter's RAM buffer.
	IndexRamBufferSizeMB float64 `protobuf:"fixed64,5,opt,name=indexRamBufferSizeMB,proto3" json:"indexRamBufferSizeMB,omitempty"`
	// Max number of documents to add at a time.
	AddDocumentsMaxBufferLen int32 `protobuf:"varint,6,opt,name=addDocumentsMaxBufferLen,proto3" json:"addDocumentsMaxBufferLen,omitempty"`
	// Maximum number of documents allowed in a parallel search slice.
	SliceMaxDocs int32 `protobuf:"varint,7,opt,name=sliceMaxDocs,proto3" json:"sliceMaxDocs,omitempty"`
	// Maximum number of segments allowed in a parallel search slice.
	SliceMaxSegments int32 `protobuf:"varint,8,opt,name=sliceMaxSegments,proto3" json:"sliceMaxSegments,omitempty"`
	// Number of virtual shards to use for this index.
	VirtualShards int32 `protobuf:"varint,9,opt,name=virtualShards,proto3" json:"virtualShards,omitempty"`
	// Maximum sized segment to produce during normal merging
	MaxMergedSegmentMB int32 `protobuf:"varint,10,opt,name=maxMergedSegmentMB,proto3" json:"maxMergedSegmentMB,omitempty"`
	// Number of segments per tier used by TieredMergePolicy
	SegmentsPerTier int32 `protobuf:"varint,11,opt,name=segmentsPerTier,proto3" json:"segmentsPerTier,omitempty"`
	// Timeout value to used when not specified in the search request.
	DefaultSearchTimeoutSec float64 `protobuf:"fixed64,12,opt,name=defaultSearchTimeoutSec,proto3" json:"defaultSearchTimeoutSec,omitempty"`
	// Timeout check every value to use when not specified in the search request.
	DefaultSearchTimeoutCheckEvery int32 `protobuf:"varint,13,opt,name=defaultSearchTimeoutCheckEvery,proto3" json:"defaultSearchTimeoutCheckEvery,omitempty"`
	// Terminate after value to use when not specified in the search request.
	DefaultTerminateAfter int32 `protobuf:"varint,14,opt,name=defaultTerminateAfter,proto3" json:"defaultTerminateAfter,omitempty"`
}

func (x *LiveSettingsRequest) Reset() {
	*x = LiveSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveSettingsRequest) ProtoMessage() {}

func (x *LiveSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveSettingsRequest.ProtoReflect.Descriptor instead.
func (*LiveSettingsRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{2}
}

func (x *LiveSettingsRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *LiveSettingsRequest) GetMaxRefreshSec() float64 {
	if x != nil {
		return x.MaxRefreshSec
	}
	return 0
}

func (x *LiveSettingsRequest) GetMinRefreshSec() float64 {
	if x != nil {
		return x.MinRefreshSec
	}
	return 0
}

func (x *LiveSettingsRequest) GetMaxSearcherAgeSec() float64 {
	if x != nil {
		return x.MaxSearcherAgeSec
	}
	return 0
}

func (x *LiveSettingsRequest) GetIndexRamBufferSizeMB() float64 {
	if x != nil {
		return x.IndexRamBufferSizeMB
	}
	return 0
}

func (x *LiveSettingsRequest) GetAddDocumentsMaxBufferLen() int32 {
	if x != nil {
		return x.AddDocumentsMaxBufferLen
	}
	return 0
}

func (x *LiveSettingsRequest) GetSliceMaxDocs() int32 {
	if x != nil {
		return x.SliceMaxDocs
	}
	return 0
}

func (x *LiveSettingsRequest) GetSliceMaxSegments() int32 {
	if x != nil {
		return x.SliceMaxSegments
	}
	return 0
}

func (x *LiveSettingsRequest) GetVirtualShards() int32 {
	if x != nil {
		return x.VirtualShards
	}
	return 0
}

func (x *LiveSettingsRequest) GetMaxMergedSegmentMB() int32 {
	if x != nil {
		return x.MaxMergedSegmentMB
	}
	return 0
}

func (x *LiveSettingsRequest) GetSegmentsPerTier() int32 {
	if x != nil {
		return x.SegmentsPerTier
	}
	return 0
}

func (x *LiveSettingsRequest) GetDefaultSearchTimeoutSec() float64 {
	if x != nil {
		return x.DefaultSearchTimeoutSec
	}
	return 0
}

func (x *LiveSettingsRequest) GetDefaultSearchTimeoutCheckEvery() int32 {
	if x != nil {
		return x.DefaultSearchTimeoutCheckEvery
	}
	return 0
}

func (x *LiveSettingsRequest) GetDefaultTerminateAfter() int32 {
	if x != nil {
		return x.DefaultTerminateAfter
	}
	return 0
}

// Response from Server to liveSettings
type LiveSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *LiveSettingsResponse) Reset() {
	*x = LiveSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveSettingsResponse) ProtoMessage() {}

func (x *LiveSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveSettingsResponse.ProtoReflect.Descriptor instead.
func (*LiveSettingsResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{3}
}

func (x *LiveSettingsResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type LiveSettingsV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// Live settings to merge into existing live settings, or unset to get current live settings
	LiveSettings *IndexLiveSettings `protobuf:"bytes,2,opt,name=liveSettings,proto3" json:"liveSettings,omitempty"`
	// When set to true, live settings changes are only applied to the local node. These changes are ephemeral, so will not persist through a restart. Also, the live settings returned in the response will contain the local overrides only when this flag is true.
	Local bool `protobuf:"varint,3,opt,name=local,proto3" json:"local,omitempty"`
}

func (x *LiveSettingsV2Request) Reset() {
	*x = LiveSettingsV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveSettingsV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveSettingsV2Request) ProtoMessage() {}

func (x *LiveSettingsV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveSettingsV2Request.ProtoReflect.Descriptor instead.
func (*LiveSettingsV2Request) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{4}
}

func (x *LiveSettingsV2Request) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *LiveSettingsV2Request) GetLiveSettings() *IndexLiveSettings {
	if x != nil {
		return x.LiveSettings
	}
	return nil
}

func (x *LiveSettingsV2Request) GetLocal() bool {
	if x != nil {
		return x.Local
	}
	return false
}

type LiveSettingsV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current live settings, including default values
	LiveSettings *IndexLiveSettings `protobuf:"bytes,1,opt,name=liveSettings,proto3" json:"liveSettings,omitempty"`
}

func (x *LiveSettingsV2Response) Reset() {
	*x = LiveSettingsV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveSettingsV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveSettingsV2Response) ProtoMessage() {}

func (x *LiveSettingsV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveSettingsV2Response.ProtoReflect.Descriptor instead.
func (*LiveSettingsV2Response) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{5}
}

func (x *LiveSettingsV2Response) GetLiveSettings() *IndexLiveSettings {
	if x != nil {
		return x.LiveSettings
	}
	return nil
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // name of the field
	Type           FieldType `protobuf:"varint,2,opt,name=type,proto3,enum=luceneserver.FieldType" json:"type,omitempty"`
	Search         bool      `protobuf:"varint,3,opt,name=search,proto3" json:"search,omitempty"`                 // True if the value should be available for searching (or numeric range searching, for a numeric field).
	Store          bool      `protobuf:"varint,4,opt,name=store,proto3" json:"store,omitempty"`                   // True if the value should be stored.
	StoreDocValues bool      `protobuf:"varint,5,opt,name=storeDocValues,proto3" json:"storeDocValues,omitempty"` // Whether to index the value into doc values.
	Sort           bool      `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`                     // True if the value should be indexed into doc values for sorting.
	Tokenize       bool      `protobuf:"varint,7,opt,name=tokenize,proto3" json:"tokenize,omitempty"`             // True if the value should be tokenized.
	Group          bool      `protobuf:"varint,8,opt,name=group,proto3" json:"group,omitempty"`                   // True if the value should be indexed into doc values for grouping.
	MultiValued    bool      `protobuf:"varint,9,opt,name=multiValued,proto3" json:"multiValued,omitempty"`       // True if this field may sometimes have more than one value.
	// Deprecated: Do not use.
	Highlight       bool         `protobuf:"varint,10,opt,name=highlight,proto3" json:"highlight,omitempty"`                                      // This parameter would be ignored
	OmitNorms       bool         `protobuf:"varint,11,opt,name=omitNorms,proto3" json:"omitNorms,omitempty"`                                      // True if norms are omitted.
	DateTimeFormat  string       `protobuf:"bytes,12,opt,name=dateTimeFormat,proto3" json:"dateTimeFormat,omitempty"`                             // Format string used to parse datetime fields, supported values are: 1) DateTimeFormatter format 2) "epoch_millis" (datetime value is epoch timestamp)
	PostingsFormat  string       `protobuf:"bytes,13,opt,name=postingsFormat,proto3" json:"postingsFormat,omitempty"`                             // Which PostingsFormat should be used to index this field.
	DocValuesFormat string       `protobuf:"bytes,14,opt,name=docValuesFormat,proto3" json:"docValuesFormat,omitempty"`                           // Which DocValuesFormat should be used to index this field.
	IndexOptions    IndexOptions `protobuf:"varint,15,opt,name=indexOptions,proto3,enum=luceneserver.IndexOptions" json:"indexOptions,omitempty"` //How the tokens should be indexed.
	Script          *Script      `protobuf:"bytes,16,opt,name=script,proto3" json:"script,omitempty"`                                             // The script definition defining a virtual field's value (only used with type=virtual).
	// TODO make analyzers message types i.e. StandardAnalyzer, EnglishAnalyzer, CustomAnalyzer etc
	Analyzer       *Analyzer   `protobuf:"bytes,17,opt,name=analyzer,proto3" json:"analyzer,omitempty"`                                      // Analyzer to use for this field during indexing and searching.
	IndexAnalyzer  *Analyzer   `protobuf:"bytes,18,opt,name=indexAnalyzer,proto3" json:"indexAnalyzer,omitempty"`                            // Analyzer to use for this field during indexing.
	SearchAnalyzer *Analyzer   `protobuf:"bytes,19,opt,name=searchAnalyzer,proto3" json:"searchAnalyzer,omitempty"`                          //Analyzer to use for this field during searching.
	TermVectors    TermVectors `protobuf:"varint,20,opt,name=termVectors,proto3,enum=luceneserver.TermVectors" json:"termVectors,omitempty"` // Whether/how term vectors should be indexed.
	// TODO make similarity message types i.d. DefaultSimilarity, CustomSimilarity, BM25Similarity;
	Similarity           string           `protobuf:"bytes,21,opt,name=similarity,proto3" json:"similarity,omitempty"`                     // Which Similarity implementation to use for this field.
	Facet                FacetType        `protobuf:"varint,22,opt,name=facet,proto3,enum=luceneserver.FacetType" json:"facet,omitempty"`  // Whether this field should index facets, and how.
	FacetIndexFieldName  string           `protobuf:"bytes,23,opt,name=facetIndexFieldName,proto3" json:"facetIndexFieldName,omitempty"`   // "Which underlying Lucene index field is used to hold any indexed taxonomy or sorted set doc values facets
	AdditionalProperties *structpb.Struct `protobuf:"bytes,24,opt,name=additionalProperties,proto3" json:"additionalProperties,omitempty"` // Additional info needed to configure field, used for CUSTOM types.
	SimilarityParams     *structpb.Struct `protobuf:"bytes,25,opt,name=similarityParams,proto3" json:"similarityParams,omitempty"`         // Parameters for similarity implementation.
	ChildFields          []*Field         `protobuf:"bytes,26,rep,name=childFields,proto3" json:"childFields,omitempty"`                   // Child fields accessible by dot notation, index same data as parent
	EagerGlobalOrdinals  bool             `protobuf:"varint,27,opt,name=eagerGlobalOrdinals,proto3" json:"eagerGlobalOrdinals,omitempty"`  // Compute facet global ordinals for this field up front, otherwise this is done lazily on first query. Currently only for SORTED_SET_DOC_VALUES facet type.
	NestedDoc            bool             `protobuf:"varint,28,opt,name=nestedDoc,proto3" json:"nestedDoc,omitempty"`                      // True if object data should be indexed as child documents
	VectorDimensions     int32            `protobuf:"varint,29,opt,name=vectorDimensions,proto3" json:"vectorDimensions,omitempty"`        // Dimensions for vector field type
	// If field based global ordinals should be built up front, otherwise this is done lazily on first access. Currently only for fields with text doc values (TEXT/ATOM).
	EagerFieldGlobalOrdinals bool `protobuf:"varint,30,opt,name=eagerFieldGlobalOrdinals,proto3" json:"eagerFieldGlobalOrdinals,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{6}
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetType() FieldType {
	if x != nil {
		return x.Type
	}
	return FieldType_ATOM
}

func (x *Field) GetSearch() bool {
	if x != nil {
		return x.Search
	}
	return false
}

func (x *Field) GetStore() bool {
	if x != nil {
		return x.Store
	}
	return false
}

func (x *Field) GetStoreDocValues() bool {
	if x != nil {
		return x.StoreDocValues
	}
	return false
}

func (x *Field) GetSort() bool {
	if x != nil {
		return x.Sort
	}
	return false
}

func (x *Field) GetTokenize() bool {
	if x != nil {
		return x.Tokenize
	}
	return false
}

func (x *Field) GetGroup() bool {
	if x != nil {
		return x.Group
	}
	return false
}

func (x *Field) GetMultiValued() bool {
	if x != nil {
		return x.MultiValued
	}
	return false
}

// Deprecated: Do not use.
func (x *Field) GetHighlight() bool {
	if x != nil {
		return x.Highlight
	}
	return false
}

func (x *Field) GetOmitNorms() bool {
	if x != nil {
		return x.OmitNorms
	}
	return false
}

func (x *Field) GetDateTimeFormat() string {
	if x != nil {
		return x.DateTimeFormat
	}
	return ""
}

func (x *Field) GetPostingsFormat() string {
	if x != nil {
		return x.PostingsFormat
	}
	return ""
}

func (x *Field) GetDocValuesFormat() string {
	if x != nil {
		return x.DocValuesFormat
	}
	return ""
}

func (x *Field) GetIndexOptions() IndexOptions {
	if x != nil {
		return x.IndexOptions
	}
	return IndexOptions_DOCS_FREQS_POSITIONS
}

func (x *Field) GetScript() *Script {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *Field) GetAnalyzer() *Analyzer {
	if x != nil {
		return x.Analyzer
	}
	return nil
}

func (x *Field) GetIndexAnalyzer() *Analyzer {
	if x != nil {
		return x.IndexAnalyzer
	}
	return nil
}

func (x *Field) GetSearchAnalyzer() *Analyzer {
	if x != nil {
		return x.SearchAnalyzer
	}
	return nil
}

func (x *Field) GetTermVectors() TermVectors {
	if x != nil {
		return x.TermVectors
	}
	return TermVectors_NO_TERMVECTORS
}

func (x *Field) GetSimilarity() string {
	if x != nil {
		return x.Similarity
	}
	return ""
}

func (x *Field) GetFacet() FacetType {
	if x != nil {
		return x.Facet
	}
	return FacetType_NO_FACETS
}

func (x *Field) GetFacetIndexFieldName() string {
	if x != nil {
		return x.FacetIndexFieldName
	}
	return ""
}

func (x *Field) GetAdditionalProperties() *structpb.Struct {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

func (x *Field) GetSimilarityParams() *structpb.Struct {
	if x != nil {
		return x.SimilarityParams
	}
	return nil
}

func (x *Field) GetChildFields() []*Field {
	if x != nil {
		return x.ChildFields
	}
	return nil
}

func (x *Field) GetEagerGlobalOrdinals() bool {
	if x != nil {
		return x.EagerGlobalOrdinals
	}
	return false
}

func (x *Field) GetNestedDoc() bool {
	if x != nil {
		return x.NestedDoc
	}
	return false
}

func (x *Field) GetVectorDimensions() int32 {
	if x != nil {
		return x.VectorDimensions
	}
	return 0
}

func (x *Field) GetEagerFieldGlobalOrdinals() bool {
	if x != nil {
		return x.EagerFieldGlobalOrdinals
	}
	return false
}

// Input to registerFields
type FieldDefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string   `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` // name of the index against which the field is to be created
	Field     []*Field `protobuf:"bytes,2,rep,name=field,proto3" json:"field,omitempty"`
}

func (x *FieldDefRequest) Reset() {
	*x = FieldDefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldDefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldDefRequest) ProtoMessage() {}

func (x *FieldDefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldDefRequest.ProtoReflect.Descriptor instead.
func (*FieldDefRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{7}
}

func (x *FieldDefRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *FieldDefRequest) GetField() []*Field {
	if x != nil {
		return x.Field
	}
	return nil
}

// Response from Server for registerFields
type FieldDefResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *FieldDefResponse) Reset() {
	*x = FieldDefResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldDefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldDefResponse) ProtoMessage() {}

func (x *FieldDefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldDefResponse.ProtoReflect.Descriptor instead.
func (*FieldDefResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{8}
}

func (x *FieldDefResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// Input to settings
type SettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName                              string      `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`                                                            // Index name
	MergeMaxMBPerSec                       float64     `protobuf:"fixed64,2,opt,name=mergeMaxMBPerSec,proto3" json:"mergeMaxMBPerSec,omitempty"`                                            // Rate limit merges to at most this many MB/sec
	NrtCachingDirectoryMaxMergeSizeMB      float64     `protobuf:"fixed64,3,opt,name=nrtCachingDirectoryMaxMergeSizeMB,proto3" json:"nrtCachingDirectoryMaxMergeSizeMB,omitempty"`          // Largest merged segment size to cache in RAMDirectory, default: 5.0MB
	NrtCachingDirectoryMaxSizeMB           float64     `protobuf:"fixed64,4,opt,name=nrtCachingDirectoryMaxSizeMB,proto3" json:"nrtCachingDirectoryMaxSizeMB,omitempty"`                    // Largest overall size for all files cached in NRTCachingDirectory; set to -1 to disable NRTCachingDirectory default: 60.0MB
	ConcurrentMergeSchedulerMaxThreadCount int32       `protobuf:"varint,5,opt,name=concurrentMergeSchedulerMaxThreadCount,proto3" json:"concurrentMergeSchedulerMaxThreadCount,omitempty"` // How many merge threads to allow at once
	ConcurrentMergeSchedulerMaxMergeCount  int32       `protobuf:"varint,6,opt,name=concurrentMergeSchedulerMaxMergeCount,proto3" json:"concurrentMergeSchedulerMaxMergeCount,omitempty"`   // Maximum backlog of pending merges before indexing threads are stalled
	IndexSort                              *SortFields `protobuf:"bytes,7,opt,name=indexSort,proto3" json:"indexSort,omitempty"`                                                            // Index time sorting; can only be written once", SearchHandler.SORT_TYPE
	// Deprecated: Do not use.
	IndexVerbose                    bool   `protobuf:"varint,8,opt,name=indexVerbose,proto3" json:"indexVerbose,omitempty"`                                       // Deprecated, moved to lucene config. Turn on IndexWriter's infoStream (to stdout)
	IndexMergeSchedulerAutoThrottle bool   `protobuf:"varint,9,opt,name=indexMergeSchedulerAutoThrottle,proto3" json:"indexMergeSchedulerAutoThrottle,omitempty"` // Turn on/off the merge scheduler's auto throttling
	NormsFormat                     string `protobuf:"bytes,10,opt,name=normsFormat,proto3" json:"normsFormat,omitempty"`                                         // Which NormsFormat should be used for all indexed fields. default: Lucene80NormsFormat
	// Base Directory implementation to use (NRTCachingDirectory will wrap this) either one of the core implementations (FSDirectory, MMapDirectory, NIOFSDirectory, SimpleFSDirectory, RAMDirectory (for temporary indices!) or a fully qualified path to a Directory implementation that has a public constructor taking a single File argument default: FSDirectory
	Directory string `protobuf:"bytes,11,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *SettingsRequest) Reset() {
	*x = SettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsRequest) ProtoMessage() {}

func (x *SettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsRequest.ProtoReflect.Descriptor instead.
func (*SettingsRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{9}
}

func (x *SettingsRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *SettingsRequest) GetMergeMaxMBPerSec() float64 {
	if x != nil {
		return x.MergeMaxMBPerSec
	}
	return 0
}

func (x *SettingsRequest) GetNrtCachingDirectoryMaxMergeSizeMB() float64 {
	if x != nil {
		return x.NrtCachingDirectoryMaxMergeSizeMB
	}
	return 0
}

func (x *SettingsRequest) GetNrtCachingDirectoryMaxSizeMB() float64 {
	if x != nil {
		return x.NrtCachingDirectoryMaxSizeMB
	}
	return 0
}

func (x *SettingsRequest) GetConcurrentMergeSchedulerMaxThreadCount() int32 {
	if x != nil {
		return x.ConcurrentMergeSchedulerMaxThreadCount
	}
	return 0
}

func (x *SettingsRequest) GetConcurrentMergeSchedulerMaxMergeCount() int32 {
	if x != nil {
		return x.ConcurrentMergeSchedulerMaxMergeCount
	}
	return 0
}

func (x *SettingsRequest) GetIndexSort() *SortFields {
	if x != nil {
		return x.IndexSort
	}
	return nil
}

// Deprecated: Do not use.
func (x *SettingsRequest) GetIndexVerbose() bool {
	if x != nil {
		return x.IndexVerbose
	}
	return false
}

func (x *SettingsRequest) GetIndexMergeSchedulerAutoThrottle() bool {
	if x != nil {
		return x.IndexMergeSchedulerAutoThrottle
	}
	return false
}

func (x *SettingsRequest) GetNormsFormat() string {
	if x != nil {
		return x.NormsFormat
	}
	return ""
}

func (x *SettingsRequest) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

// Settings Response returned from Server
type SettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *SettingsResponse) Reset() {
	*x = SettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsResponse) ProtoMessage() {}

func (x *SettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsResponse.ProtoReflect.Descriptor instead.
func (*SettingsResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{10}
}

func (x *SettingsResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type SettingsV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Index name
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// Settings to merge into existing settings, or unset to get current settings
	Settings *IndexSettings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *SettingsV2Request) Reset() {
	*x = SettingsV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsV2Request) ProtoMessage() {}

func (x *SettingsV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsV2Request.ProtoReflect.Descriptor instead.
func (*SettingsV2Request) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{11}
}

func (x *SettingsV2Request) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *SettingsV2Request) GetSettings() *IndexSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type SettingsV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current index settings, including default values
	Settings *IndexSettings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *SettingsV2Response) Reset() {
	*x = SettingsV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingsV2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingsV2Response) ProtoMessage() {}

func (x *SettingsV2Response) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingsV2Response.ProtoReflect.Descriptor instead.
func (*SettingsV2Response) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{12}
}

func (x *SettingsV2Response) GetSettings() *IndexSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// Start the index
type StartIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName      string        `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`               //index name
	Mode           Mode          `protobuf:"varint,2,opt,name=mode,proto3,enum=luceneserver.Mode" json:"mode,omitempty"` //Standalone, NRT primary or replica mode to start this index.
	PrimaryGen     int64         `protobuf:"varint,3,opt,name=primaryGen,proto3" json:"primaryGen,omitempty"`            //primary, the generation of this primary (should increment each time a new primary starts for this index)
	PrimaryAddress string        `protobuf:"bytes,4,opt,name=primaryAddress,proto3" json:"primaryAddress,omitempty"`     //replica, the IP address or host name of the remote primary
	Port           int32         `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`                        //replica, the TCP port of the remote primary
	Restore        *RestoreIndex `protobuf:"bytes,6,opt,name=restore,proto3" json:"restore,omitempty"`                   // restore index from backup
	// replica, location of discovery file containing primary host/port. Used if primaryAddress is empty. If port is specified in this request, it overrides the value in the file
	PrimaryDiscoveryFile string `protobuf:"bytes,7,opt,name=primaryDiscoveryFile,proto3" json:"primaryDiscoveryFile,omitempty"`
}

func (x *StartIndexRequest) Reset() {
	*x = StartIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartIndexRequest) ProtoMessage() {}

func (x *StartIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartIndexRequest.ProtoReflect.Descriptor instead.
func (*StartIndexRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{13}
}

func (x *StartIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *StartIndexRequest) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_STANDALONE
}

func (x *StartIndexRequest) GetPrimaryGen() int64 {
	if x != nil {
		return x.PrimaryGen
	}
	return 0
}

func (x *StartIndexRequest) GetPrimaryAddress() string {
	if x != nil {
		return x.PrimaryAddress
	}
	return ""
}

func (x *StartIndexRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *StartIndexRequest) GetRestore() *RestoreIndex {
	if x != nil {
		return x.Restore
	}
	return nil
}

func (x *StartIndexRequest) GetPrimaryDiscoveryFile() string {
	if x != nil {
		return x.PrimaryDiscoveryFile
	}
	return ""
}

// Start the index using IndexStartConfig configuration
type StartIndexV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// index name
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
}

func (x *StartIndexV2Request) Reset() {
	*x = StartIndexV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartIndexV2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartIndexV2Request) ProtoMessage() {}

func (x *StartIndexV2Request) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartIndexV2Request.ProtoReflect.Descriptor instead.
func (*StartIndexV2Request) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{14}
}

func (x *StartIndexV2Request) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type StartIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxDoc      int32   `protobuf:"varint,1,opt,name=maxDoc,proto3" json:"maxDoc,omitempty"`            //one greater than the largest possible document number
	NumDocs     int32   `protobuf:"varint,2,opt,name=numDocs,proto3" json:"numDocs,omitempty"`          //the number of documents in this index.
	Segments    string  `protobuf:"bytes,3,opt,name=segments,proto3" json:"segments,omitempty"`         //string representation of the IndexReader implementation
	StartTimeMS float64 `protobuf:"fixed64,4,opt,name=startTimeMS,proto3" json:"startTimeMS,omitempty"` //time taken to start the index
}

func (x *StartIndexResponse) Reset() {
	*x = StartIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartIndexResponse) ProtoMessage() {}

func (x *StartIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartIndexResponse.ProtoReflect.Descriptor instead.
func (*StartIndexResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{15}
}

func (x *StartIndexResponse) GetMaxDoc() int32 {
	if x != nil {
		return x.MaxDoc
	}
	return 0
}

func (x *StartIndexResponse) GetNumDocs() int32 {
	if x != nil {
		return x.NumDocs
	}
	return 0
}

func (x *StartIndexResponse) GetSegments() string {
	if x != nil {
		return x.Segments
	}
	return ""
}

func (x *StartIndexResponse) GetStartTimeMS() float64 {
	if x != nil {
		return x.StartTimeMS
	}
	return 0
}

type AddDocumentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string                                          `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`                                                                                   //name of the index
	Fields    map[string]*AddDocumentRequest_MultiValuedField `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //map of field name to a list of string values.
}

func (x *AddDocumentRequest) Reset() {
	*x = AddDocumentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDocumentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDocumentRequest) ProtoMessage() {}

func (x *AddDocumentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDocumentRequest.ProtoReflect.Descriptor instead.
func (*AddDocumentRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{16}
}

func (x *AddDocumentRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *AddDocumentRequest) GetFields() map[string]*AddDocumentRequest_MultiValuedField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type FacetHierarchyPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *FacetHierarchyPath) Reset() {
	*x = FacetHierarchyPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FacetHierarchyPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FacetHierarchyPath) ProtoMessage() {}

func (x *FacetHierarchyPath) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FacetHierarchyPath.ProtoReflect.Descriptor instead.
func (*FacetHierarchyPath) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{17}
}

func (x *FacetHierarchyPath) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

type AddDocumentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenId string `protobuf:"bytes,1,opt,name=genId,proto3" json:"genId,omitempty"`
	// Unique identifier for the primary instance that processed the request
	PrimaryId string `protobuf:"bytes,2,opt,name=primaryId,proto3" json:"primaryId,omitempty"`
}

func (x *AddDocumentResponse) Reset() {
	*x = AddDocumentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDocumentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDocumentResponse) ProtoMessage() {}

func (x *AddDocumentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDocumentResponse.ProtoReflect.Descriptor instead.
func (*AddDocumentResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{18}
}

func (x *AddDocumentResponse) GetGenId() string {
	if x != nil {
		return x.GenId
	}
	return ""
}

func (x *AddDocumentResponse) GetPrimaryId() string {
	if x != nil {
		return x.PrimaryId
	}
	return ""
}

type RefreshRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //index name to be refreshed
}

func (x *RefreshRequest) Reset() {
	*x = RefreshRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshRequest) ProtoMessage() {}

func (x *RefreshRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshRequest.ProtoReflect.Descriptor instead.
func (*RefreshRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{19}
}

func (x *RefreshRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type RefreshResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefreshTimeMS float64 `protobuf:"fixed64,1,opt,name=refreshTimeMS,proto3" json:"refreshTimeMS,omitempty"` //time taken in milliseconds to refresh the index
}

func (x *RefreshResponse) Reset() {
	*x = RefreshResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshResponse) ProtoMessage() {}

func (x *RefreshResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshResponse.ProtoReflect.Descriptor instead.
func (*RefreshResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{20}
}

func (x *RefreshResponse) GetRefreshTimeMS() float64 {
	if x != nil {
		return x.RefreshTimeMS
	}
	return 0
}

type CommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //index to commit
}

func (x *CommitRequest) Reset() {
	*x = CommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest) ProtoMessage() {}

func (x *CommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRequest.ProtoReflect.Descriptor instead.
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{21}
}

func (x *CommitRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type CommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//	sequence number of the last operation in the commit.  All sequence numbers less than this value
	//
	// will be reflected in the commit, and all others will not.
	Gen int64 `protobuf:"varint,1,opt,name=gen,proto3" json:"gen,omitempty"`
	// Unique identifier for the primary instance that processed the request
	PrimaryId string `protobuf:"bytes,2,opt,name=primaryId,proto3" json:"primaryId,omitempty"`
}

func (x *CommitResponse) Reset() {
	*x = CommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitResponse) ProtoMessage() {}

func (x *CommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitResponse.ProtoReflect.Descriptor instead.
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{22}
}

func (x *CommitResponse) GetGen() int64 {
	if x != nil {
		return x.Gen
	}
	return 0
}

func (x *CommitResponse) GetPrimaryId() string {
	if x != nil {
		return x.PrimaryId
	}
	return ""
}

type StatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //retrieve stats of the index
}

func (x *StatsRequest) Reset() {
	*x = StatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsRequest) ProtoMessage() {}

func (x *StatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsRequest.ProtoReflect.Descriptor instead.
func (*StatsRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{23}
}

func (x *StatsRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type StatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ord int32 `protobuf:"varint,1,opt,name=ord,proto3" json:"ord,omitempty"` //shard ordinal
	// The total number of docs in this index, including docs not yet flushed (still in the RAM buffer),
	// not counting deletions.
	MaxDoc int32 `protobuf:"varint,2,opt,name=maxDoc,proto3" json:"maxDoc,omitempty"`
	// *
	// The total number of docs in this index, including
	// docs not yet flushed (still in the RAM buffer), and
	// including deletions. NOTE: buffered deletions
	// are not counted.  If you really need these to be
	// counted you should call {@link IndexWriter#commit()} first.
	NumDocs         int32       `protobuf:"varint,3,opt,name=numDocs,proto3" json:"numDocs,omitempty"`
	DirSize         int64       `protobuf:"varint,4,opt,name=dirSize,proto3" json:"dirSize,omitempty"`                //size of the this indexDir
	State           string      `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`                     //state of the index
	Taxonomy        *Taxonomy   `protobuf:"bytes,6,opt,name=taxonomy,proto3" json:"taxonomy,omitempty"`               //Taxonomy(facets) stats
	Searchers       []*Searcher `protobuf:"bytes,7,rep,name=searchers,proto3" json:"searchers,omitempty"`             //Searcher stats
	CurrentSearcher *Searcher   `protobuf:"bytes,8,opt,name=currentSearcher,proto3" json:"currentSearcher,omitempty"` //Current Searcher stats
}

func (x *StatsResponse) Reset() {
	*x = StatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatsResponse) ProtoMessage() {}

func (x *StatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatsResponse.ProtoReflect.Descriptor instead.
func (*StatsResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{24}
}

func (x *StatsResponse) GetOrd() int32 {
	if x != nil {
		return x.Ord
	}
	return 0
}

func (x *StatsResponse) GetMaxDoc() int32 {
	if x != nil {
		return x.MaxDoc
	}
	return 0
}

func (x *StatsResponse) GetNumDocs() int32 {
	if x != nil {
		return x.NumDocs
	}
	return 0
}

func (x *StatsResponse) GetDirSize() int64 {
	if x != nil {
		return x.DirSize
	}
	return 0
}

func (x *StatsResponse) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *StatsResponse) GetTaxonomy() *Taxonomy {
	if x != nil {
		return x.Taxonomy
	}
	return nil
}

func (x *StatsResponse) GetSearchers() []*Searcher {
	if x != nil {
		return x.Searchers
	}
	return nil
}

func (x *StatsResponse) GetCurrentSearcher() *Searcher {
	if x != nil {
		return x.CurrentSearcher
	}
	return nil
}

type Taxonomy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumOrds  int32  `protobuf:"varint,1,opt,name=numOrds,proto3" json:"numOrds,omitempty"`  //number of docs in this taxonomy reader
	Segments string `protobuf:"bytes,2,opt,name=segments,proto3" json:"segments,omitempty"` //string representation of segments
}

func (x *Taxonomy) Reset() {
	*x = Taxonomy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Taxonomy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Taxonomy) ProtoMessage() {}

func (x *Taxonomy) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Taxonomy.ProtoReflect.Descriptor instead.
func (*Taxonomy) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{25}
}

func (x *Taxonomy) GetNumOrds() int32 {
	if x != nil {
		return x.NumOrds
	}
	return 0
}

func (x *Taxonomy) GetSegments() string {
	if x != nil {
		return x.Segments
	}
	return ""
}

type Searcher struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the version recorded in the commit that the reader opened.
	// This version is advanced every time a change is made with IndexWriter.
	Version         int64   `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	NumDocs         int32   `protobuf:"varint,2,opt,name=numDocs,proto3" json:"numDocs,omitempty"`                  //total number of docs in this index
	Segments        string  `protobuf:"bytes,3,opt,name=segments,proto3" json:"segments,omitempty"`                 //string representation of segments
	StaleAgeSeconds float64 `protobuf:"fixed64,4,opt,name=staleAgeSeconds,proto3" json:"staleAgeSeconds,omitempty"` //how much time has passed since this searcher was the current (live) searcher
	NumSegments     int32   `protobuf:"varint,5,opt,name=numSegments,proto3" json:"numSegments,omitempty"`          // number of segments, filled only if Searcher has StandardDirectoryReader
}

func (x *Searcher) Reset() {
	*x = Searcher{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Searcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Searcher) ProtoMessage() {}

func (x *Searcher) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Searcher.ProtoReflect.Descriptor instead.
func (*Searcher) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{26}
}

func (x *Searcher) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Searcher) GetNumDocs() int32 {
	if x != nil {
		return x.NumDocs
	}
	return 0
}

func (x *Searcher) GetSegments() string {
	if x != nil {
		return x.Segments
	}
	return ""
}

func (x *Searcher) GetStaleAgeSeconds() float64 {
	if x != nil {
		return x.StaleAgeSeconds
	}
	return 0
}

func (x *Searcher) GetNumSegments() int32 {
	if x != nil {
		return x.NumSegments
	}
	return 0
}

type DeleteAllDocumentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //index to delete all documents  from
}

func (x *DeleteAllDocumentsRequest) Reset() {
	*x = DeleteAllDocumentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllDocumentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllDocumentsRequest) ProtoMessage() {}

func (x *DeleteAllDocumentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllDocumentsRequest.ProtoReflect.Descriptor instead.
func (*DeleteAllDocumentsRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteAllDocumentsRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type DeleteAllDocumentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenId string `protobuf:"bytes,1,opt,name=genId,proto3" json:"genId,omitempty"` //Returns the index generation (indexGen) that reflects the deletion.
}

func (x *DeleteAllDocumentsResponse) Reset() {
	*x = DeleteAllDocumentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllDocumentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllDocumentsResponse) ProtoMessage() {}

func (x *DeleteAllDocumentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllDocumentsResponse.ProtoReflect.Descriptor instead.
func (*DeleteAllDocumentsResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteAllDocumentsResponse) GetGenId() string {
	if x != nil {
		return x.GenId
	}
	return ""
}

type DeleteIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //index to delete
}

func (x *DeleteIndexRequest) Reset() {
	*x = DeleteIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIndexRequest) ProtoMessage() {}

func (x *DeleteIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIndexRequest.ProtoReflect.Descriptor instead.
func (*DeleteIndexRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type DeleteIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok string `protobuf:"bytes,1,opt,name=ok,proto3" json:"ok,omitempty"` //Returns "ok" string on  success
}

func (x *DeleteIndexResponse) Reset() {
	*x = DeleteIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIndexResponse) ProtoMessage() {}

func (x *DeleteIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIndexResponse.ProtoReflect.Descriptor instead.
func (*DeleteIndexResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteIndexResponse) GetOk() string {
	if x != nil {
		return x.Ok
	}
	return ""
}

type DummyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok string `protobuf:"bytes,1,opt,name=ok,proto3" json:"ok,omitempty"` // returns "ok" string on success
}

func (x *DummyResponse) Reset() {
	*x = DummyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DummyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DummyResponse) ProtoMessage() {}

func (x *DummyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DummyResponse.ProtoReflect.Descriptor instead.
func (*DummyResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{31}
}

func (x *DummyResponse) GetOk() string {
	if x != nil {
		return x.Ok
	}
	return ""
}

type StopIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //index name to stop
}

func (x *StopIndexRequest) Reset() {
	*x = StopIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopIndexRequest) ProtoMessage() {}

func (x *StopIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopIndexRequest.ProtoReflect.Descriptor instead.
func (*StopIndexRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{32}
}

func (x *StopIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type ReloadStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReloadStateRequest) Reset() {
	*x = ReloadStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadStateRequest) ProtoMessage() {}

func (x *ReloadStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadStateRequest.ProtoReflect.Descriptor instead.
func (*ReloadStateRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{33}
}

type ReloadStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReloadStateResponse) Reset() {
	*x = ReloadStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReloadStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReloadStateResponse) ProtoMessage() {}

func (x *ReloadStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReloadStateResponse.ProtoReflect.Descriptor instead.
func (*ReloadStateResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{34}
}

// Creates a snapshot in the index, which is saved point-in-time view of the last commit in the
// index such that no files referenced by that snapshot will be deleted by ongoing indexing until
// the snapshot is released with @releaseSnapshot.  Note that this will reference the last commit,
// so be sure to call commit first if you have pending changes that you'd like to be included in
// the snapshot.<p>This can be used for backup purposes, i.e. after creating the snapshot you can
// copy all referenced files to backup storage, and then release the snapshot once complete.
// To restore the backup, just copy all the files back and restart the server.  It can also
// be used for transactional purposes, i.e. if you sometimes need to search a specific snapshot
// instead of the current live index.<p>Creating a snapshot is very fast (does not require any
// file copying), but over time it will consume extra disk space as old segments are merged in
// the index.  Be sure to release the snapshot once you're done.  Snapshots survive shutdown
// and restart of the server.  Returns all protected filenames referenced by this snapshot:
// these files will not change and will not be deleted until the snapshot is released.
// This returns the directories and files referenced by the snapshot.
type CreateSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName    string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`        //name of the index to snapshot;
	OpenSearcher bool   `protobuf:"varint,2,opt,name=openSearcher,proto3" json:"openSearcher,omitempty"` //Pass true if you intend to do searches against this snapshot, by passing searcher: {snapshot: X} to @search
}

func (x *CreateSnapshotRequest) Reset() {
	*x = CreateSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshotRequest) ProtoMessage() {}

func (x *CreateSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshotRequest.ProtoReflect.Descriptor instead.
func (*CreateSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{35}
}

func (x *CreateSnapshotRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *CreateSnapshotRequest) GetOpenSearcher() bool {
	if x != nil {
		return x.OpenSearcher
	}
	return false
}

type CreateSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexFiles    []string    `protobuf:"bytes,1,rep,name=indexFiles,proto3" json:"indexFiles,omitempty"`
	TaxonomyFiles []string    `protobuf:"bytes,2,rep,name=taxonomyFiles,proto3" json:"taxonomyFiles,omitempty"`
	StateFiles    []string    `protobuf:"bytes,3,rep,name=stateFiles,proto3" json:"stateFiles,omitempty"`
	SnapshotId    *SnapshotId `protobuf:"bytes,4,opt,name=snapshotId,proto3" json:"snapshotId,omitempty"`
}

func (x *CreateSnapshotResponse) Reset() {
	*x = CreateSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSnapshotResponse) ProtoMessage() {}

func (x *CreateSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSnapshotResponse.ProtoReflect.Descriptor instead.
func (*CreateSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{36}
}

func (x *CreateSnapshotResponse) GetIndexFiles() []string {
	if x != nil {
		return x.IndexFiles
	}
	return nil
}

func (x *CreateSnapshotResponse) GetTaxonomyFiles() []string {
	if x != nil {
		return x.TaxonomyFiles
	}
	return nil
}

func (x *CreateSnapshotResponse) GetStateFiles() []string {
	if x != nil {
		return x.StateFiles
	}
	return nil
}

func (x *CreateSnapshotResponse) GetSnapshotId() *SnapshotId {
	if x != nil {
		return x.SnapshotId
	}
	return nil
}

type SnapshotId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexGen    int64 `protobuf:"varint,1,opt,name=indexGen,proto3" json:"indexGen,omitempty"`
	TaxonomyGen int64 `protobuf:"varint,2,opt,name=taxonomyGen,proto3" json:"taxonomyGen,omitempty"`
	StateGen    int64 `protobuf:"varint,3,opt,name=stateGen,proto3" json:"stateGen,omitempty"`
}

func (x *SnapshotId) Reset() {
	*x = SnapshotId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SnapshotId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotId) ProtoMessage() {}

func (x *SnapshotId) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotId.ProtoReflect.Descriptor instead.
func (*SnapshotId) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{37}
}

func (x *SnapshotId) GetIndexGen() int64 {
	if x != nil {
		return x.IndexGen
	}
	return 0
}

func (x *SnapshotId) GetTaxonomyGen() int64 {
	if x != nil {
		return x.TaxonomyGen
	}
	return 0
}

func (x *SnapshotId) GetStateGen() int64 {
	if x != nil {
		return x.StateGen
	}
	return 0
}

type ReleaseSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName  string      `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`   // name of snapshotted index to be released
	SnapshotId *SnapshotId `protobuf:"bytes,2,opt,name=snapshotId,proto3" json:"snapshotId,omitempty"` //The id for this snapshot; this must have been previously created via @createSnapshot.
}

func (x *ReleaseSnapshotRequest) Reset() {
	*x = ReleaseSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSnapshotRequest) ProtoMessage() {}

func (x *ReleaseSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSnapshotRequest.ProtoReflect.Descriptor instead.
func (*ReleaseSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{38}
}

func (x *ReleaseSnapshotRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *ReleaseSnapshotRequest) GetSnapshotId() *SnapshotId {
	if x != nil {
		return x.SnapshotId
	}
	return nil
}

type ReleaseSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"` //true if successful
}

func (x *ReleaseSnapshotResponse) Reset() {
	*x = ReleaseSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseSnapshotResponse) ProtoMessage() {}

func (x *ReleaseSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseSnapshotResponse.ProtoReflect.Descriptor instead.
func (*ReleaseSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{39}
}

func (x *ReleaseSnapshotResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetAllSnapshotGenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` // name of index whose snapshotted index gens are needed
}

func (x *GetAllSnapshotGenRequest) Reset() {
	*x = GetAllSnapshotGenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSnapshotGenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSnapshotGenRequest) ProtoMessage() {}

func (x *GetAllSnapshotGenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSnapshotGenRequest.ProtoReflect.Descriptor instead.
func (*GetAllSnapshotGenRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{40}
}

func (x *GetAllSnapshotGenRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type GetAllSnapshotGenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexGens []int64 `protobuf:"varint,1,rep,packed,name=indexGens,proto3" json:"indexGens,omitempty"` // list of snapshotted index gens
}

func (x *GetAllSnapshotGenResponse) Reset() {
	*x = GetAllSnapshotGenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllSnapshotGenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSnapshotGenResponse) ProtoMessage() {}

func (x *GetAllSnapshotGenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSnapshotGenResponse.ProtoReflect.Descriptor instead.
func (*GetAllSnapshotGenResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{41}
}

func (x *GetAllSnapshotGenResponse) GetIndexGens() []int64 {
	if x != nil {
		return x.IndexGens
	}
	return nil
}

type BackupIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName         string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`                  //name of the index to backup
	ServiceName       string `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`              // remote storage namespace qualifier for service
	ResourceName      string `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"`            //remote storage namespace qualifier for resource e.g. indexName
	CompleteDirectory bool   `protobuf:"varint,4,opt,name=completeDirectory,proto3" json:"completeDirectory,omitempty"` // backup complete directory including all current snapshots if true (may backup corrupt segments if backup is created while indexing is happening), otherwise only backup the required segments and segment files
	Stream            bool   `protobuf:"varint,5,opt,name=stream,proto3" json:"stream,omitempty"`                       // if the built tar should be directly streamed to s3, instead of being written to a file first (experimental)
}

func (x *BackupIndexRequest) Reset() {
	*x = BackupIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupIndexRequest) ProtoMessage() {}

func (x *BackupIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupIndexRequest.ProtoReflect.Descriptor instead.
func (*BackupIndexRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{42}
}

func (x *BackupIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *BackupIndexRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *BackupIndexRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *BackupIndexRequest) GetCompleteDirectory() bool {
	if x != nil {
		return x.CompleteDirectory
	}
	return false
}

func (x *BackupIndexRequest) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

type BackupIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataVersionHash     string `protobuf:"bytes,1,opt,name=dataVersionHash,proto3" json:"dataVersionHash,omitempty"`         //version identifier for data on s3
	MetadataVersionHash string `protobuf:"bytes,2,opt,name=metadataVersionHash,proto3" json:"metadataVersionHash,omitempty"` //version identifier for metadata on s3
}

func (x *BackupIndexResponse) Reset() {
	*x = BackupIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupIndexResponse) ProtoMessage() {}

func (x *BackupIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupIndexResponse.ProtoReflect.Descriptor instead.
func (*BackupIndexResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{43}
}

func (x *BackupIndexResponse) GetDataVersionHash() string {
	if x != nil {
		return x.DataVersionHash
	}
	return ""
}

func (x *BackupIndexResponse) GetMetadataVersionHash() string {
	if x != nil {
		return x.MetadataVersionHash
	}
	return ""
}

type BackupWarmingQueriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index                  string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`                                    // Index whose warming queries to backup
	ServiceName            string `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`                        // remote storage namespace qualifier for service
	NumQueriesThreshold    int32  `protobuf:"varint,3,opt,name=numQueriesThreshold,proto3" json:"numQueriesThreshold,omitempty"`       // optional; minimum # of queries required to backup warming queries
	UptimeMinutesThreshold int32  `protobuf:"varint,4,opt,name=uptimeMinutesThreshold,proto3" json:"uptimeMinutesThreshold,omitempty"` // optional; minimum # of minutes uptime to backup warming queries
}

func (x *BackupWarmingQueriesRequest) Reset() {
	*x = BackupWarmingQueriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupWarmingQueriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupWarmingQueriesRequest) ProtoMessage() {}

func (x *BackupWarmingQueriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupWarmingQueriesRequest.ProtoReflect.Descriptor instead.
func (*BackupWarmingQueriesRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{44}
}

func (x *BackupWarmingQueriesRequest) GetIndex() string {
	if x != nil {
		return x.Index
	}
	return ""
}

func (x *BackupWarmingQueriesRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *BackupWarmingQueriesRequest) GetNumQueriesThreshold() int32 {
	if x != nil {
		return x.NumQueriesThreshold
	}
	return 0
}

func (x *BackupWarmingQueriesRequest) GetUptimeMinutesThreshold() int32 {
	if x != nil {
		return x.UptimeMinutesThreshold
	}
	return 0
}

type BackupWarmingQueriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BackupWarmingQueriesResponse) Reset() {
	*x = BackupWarmingQueriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupWarmingQueriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupWarmingQueriesResponse) ProtoMessage() {}

func (x *BackupWarmingQueriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupWarmingQueriesResponse.ProtoReflect.Descriptor instead.
func (*BackupWarmingQueriesResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{45}
}

type DeleteIndexBackupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName    string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`       //name of the index to backup
	ServiceName  string `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`   // remote storage namespace qualifier for service
	ResourceName string `protobuf:"bytes,3,opt,name=resourceName,proto3" json:"resourceName,omitempty"` //remote storage namespace qualifier for resource e.g. indexName
	NDays        int32  `protobuf:"varint,4,opt,name=nDays,proto3" json:"nDays,omitempty"`              //backups older than nDays will be deleted from s3
}

func (x *DeleteIndexBackupRequest) Reset() {
	*x = DeleteIndexBackupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIndexBackupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIndexBackupRequest) ProtoMessage() {}

func (x *DeleteIndexBackupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIndexBackupRequest.ProtoReflect.Descriptor instead.
func (*DeleteIndexBackupRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{46}
}

func (x *DeleteIndexBackupRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *DeleteIndexBackupRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *DeleteIndexBackupRequest) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *DeleteIndexBackupRequest) GetNDays() int32 {
	if x != nil {
		return x.NDays
	}
	return 0
}

type DeleteIndexBackupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeletedResourceDataHashes     []string `protobuf:"bytes,1,rep,name=deletedResourceDataHashes,proto3" json:"deletedResourceDataHashes,omitempty"`         // version hashes of deleted backups from {resource}_data folder
	DeletedResourceMetadataHashes []string `protobuf:"bytes,2,rep,name=deletedResourceMetadataHashes,proto3" json:"deletedResourceMetadataHashes,omitempty"` // version hashes of deleted metadata of backups from {resource}_metadata folder
	DeletedDataVersions           []string `protobuf:"bytes,3,rep,name=deletedDataVersions,proto3" json:"deletedDataVersions,omitempty"`                     // versions of deleted backup data from _version/{resource}_data folder
	DeletedMetadataVersions       []string `protobuf:"bytes,4,rep,name=deletedMetadataVersions,proto3" json:"deletedMetadataVersions,omitempty"`             // versions of deleted backup data from _version/{resource}_metadata folder
}

func (x *DeleteIndexBackupResponse) Reset() {
	*x = DeleteIndexBackupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteIndexBackupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteIndexBackupResponse) ProtoMessage() {}

func (x *DeleteIndexBackupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteIndexBackupResponse.ProtoReflect.Descriptor instead.
func (*DeleteIndexBackupResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{47}
}

func (x *DeleteIndexBackupResponse) GetDeletedResourceDataHashes() []string {
	if x != nil {
		return x.DeletedResourceDataHashes
	}
	return nil
}

func (x *DeleteIndexBackupResponse) GetDeletedResourceMetadataHashes() []string {
	if x != nil {
		return x.DeletedResourceMetadataHashes
	}
	return nil
}

func (x *DeleteIndexBackupResponse) GetDeletedDataVersions() []string {
	if x != nil {
		return x.DeletedDataVersions
	}
	return nil
}

func (x *DeleteIndexBackupResponse) GetDeletedMetadataVersions() []string {
	if x != nil {
		return x.DeletedMetadataVersions
	}
	return nil
}

type IndicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IndicesRequest) Reset() {
	*x = IndicesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicesRequest) ProtoMessage() {}

func (x *IndicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicesRequest.ProtoReflect.Descriptor instead.
func (*IndicesRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{48}
}

type IndicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndicesResponse []*IndexStatsResponse `protobuf:"bytes,1,rep,name=indicesResponse,proto3" json:"indicesResponse,omitempty"` //list of IndexStatsResponse
}

func (x *IndicesResponse) Reset() {
	*x = IndicesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndicesResponse) ProtoMessage() {}

func (x *IndicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndicesResponse.ProtoReflect.Descriptor instead.
func (*IndicesResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{49}
}

func (x *IndicesResponse) GetIndicesResponse() []*IndexStatsResponse {
	if x != nil {
		return x.IndicesResponse
	}
	return nil
}

type IndexStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName     string         `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`         //index name
	StatsResponse *StatsResponse `protobuf:"bytes,2,opt,name=statsResponse,proto3" json:"statsResponse,omitempty"` //stats for an index
}

func (x *IndexStatsResponse) Reset() {
	*x = IndexStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexStatsResponse) ProtoMessage() {}

func (x *IndexStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexStatsResponse.ProtoReflect.Descriptor instead.
func (*IndexStatsResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{50}
}

func (x *IndexStatsResponse) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *IndexStatsResponse) GetStatsResponse() *StatsResponse {
	if x != nil {
		return x.StatsResponse
	}
	return nil
}

type RestoreIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName        string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`                // remote storage namespace qualifier for service
	ResourceName       string `protobuf:"bytes,2,opt,name=resourceName,proto3" json:"resourceName,omitempty"`              //remote storage namespace qualifier for resource e.g. indexName
	DeleteExistingData bool   `protobuf:"varint,3,opt,name=deleteExistingData,proto3" json:"deleteExistingData,omitempty"` // delete any existing data for the index
}

func (x *RestoreIndex) Reset() {
	*x = RestoreIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreIndex) ProtoMessage() {}

func (x *RestoreIndex) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreIndex.ProtoReflect.Descriptor instead.
func (*RestoreIndex) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{51}
}

func (x *RestoreIndex) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RestoreIndex) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *RestoreIndex) GetDeleteExistingData() bool {
	if x != nil {
		return x.DeleteExistingData
	}
	return false
}

type StateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //index name
}

func (x *StateRequest) Reset() {
	*x = StateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateRequest) ProtoMessage() {}

func (x *StateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateRequest.ProtoReflect.Descriptor instead.
func (*StateRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{52}
}

func (x *StateRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type StateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"` //json string of the current index state
}

func (x *StateResponse) Reset() {
	*x = StateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateResponse) ProtoMessage() {}

func (x *StateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateResponse.ProtoReflect.Descriptor instead.
func (*StateResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{53}
}

func (x *StateResponse) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

type AddReplicaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicNumber int32  `protobuf:"varint,1,opt,name=magicNumber,proto3" json:"magicNumber,omitempty"` //magic number send on all requests since these are meant for internal communication only
	IndexName   string `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`      //index name
	ReplicaId   int32  `protobuf:"varint,3,opt,name=replicaId,proto3" json:"replicaId,omitempty"`     //replica Id
	HostName    string `protobuf:"bytes,4,opt,name=hostName,proto3" json:"hostName,omitempty"`        // replica host name
	Port        int32  `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`               // replica port number
}

func (x *AddReplicaRequest) Reset() {
	*x = AddReplicaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReplicaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReplicaRequest) ProtoMessage() {}

func (x *AddReplicaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReplicaRequest.ProtoReflect.Descriptor instead.
func (*AddReplicaRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{54}
}

func (x *AddReplicaRequest) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *AddReplicaRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *AddReplicaRequest) GetReplicaId() int32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *AddReplicaRequest) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *AddReplicaRequest) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type AddReplicaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok string `protobuf:"bytes,1,opt,name=ok,proto3" json:"ok,omitempty"` //Returns "ok" string on  success
}

func (x *AddReplicaResponse) Reset() {
	*x = AddReplicaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddReplicaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReplicaResponse) ProtoMessage() {}

func (x *AddReplicaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReplicaResponse.ProtoReflect.Descriptor instead.
func (*AddReplicaResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{55}
}

func (x *AddReplicaResponse) GetOk() string {
	if x != nil {
		return x.Ok
	}
	return ""
}

// Holds incRef'd file level details for one point-in-time segment infos on the primary node.
type CopyState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InfoBytesLength         int32          `protobuf:"varint,1,opt,name=infoBytesLength,proto3" json:"infoBytesLength,omitempty"`                 // infoBytes len
	InfoBytes               []byte         `protobuf:"bytes,2,opt,name=infoBytes,proto3" json:"infoBytes,omitempty"`                              //infoBytes
	Gen                     int64          `protobuf:"varint,3,opt,name=gen,proto3" json:"gen,omitempty"`                                         //gen
	Version                 int64          `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`                                 //versiom
	FilesMetadata           *FilesMetadata `protobuf:"bytes,5,opt,name=filesMetadata,proto3" json:"filesMetadata,omitempty"`                      //fileMetadata
	CompletedMergeFilesSize int32          `protobuf:"varint,6,opt,name=completedMergeFilesSize,proto3" json:"completedMergeFilesSize,omitempty"` //completed merged files
	CompletedMergeFiles     []string       `protobuf:"bytes,7,rep,name=completedMergeFiles,proto3" json:"completedMergeFiles,omitempty"`          //names of files that finished merge
	PrimaryGen              int64          `protobuf:"varint,8,opt,name=primaryGen,proto3" json:"primaryGen,omitempty"`                           //primary Gen
}

func (x *CopyState) Reset() {
	*x = CopyState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyState) ProtoMessage() {}

func (x *CopyState) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyState.ProtoReflect.Descriptor instead.
func (*CopyState) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{56}
}

func (x *CopyState) GetInfoBytesLength() int32 {
	if x != nil {
		return x.InfoBytesLength
	}
	return 0
}

func (x *CopyState) GetInfoBytes() []byte {
	if x != nil {
		return x.InfoBytes
	}
	return nil
}

func (x *CopyState) GetGen() int64 {
	if x != nil {
		return x.Gen
	}
	return 0
}

func (x *CopyState) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CopyState) GetFilesMetadata() *FilesMetadata {
	if x != nil {
		return x.FilesMetadata
	}
	return nil
}

func (x *CopyState) GetCompletedMergeFilesSize() int32 {
	if x != nil {
		return x.CompletedMergeFilesSize
	}
	return 0
}

func (x *CopyState) GetCompletedMergeFiles() []string {
	if x != nil {
		return x.CompletedMergeFiles
	}
	return nil
}

func (x *CopyState) GetPrimaryGen() int64 {
	if x != nil {
		return x.PrimaryGen
	}
	return 0
}

type FilesMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumFiles     int32           `protobuf:"varint,1,opt,name=numFiles,proto3" json:"numFiles,omitempty"`        //number of files int this set
	FileMetadata []*FileMetadata `protobuf:"bytes,2,rep,name=fileMetadata,proto3" json:"fileMetadata,omitempty"` //list of metadata for each file
}

func (x *FilesMetadata) Reset() {
	*x = FilesMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesMetadata) ProtoMessage() {}

func (x *FilesMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesMetadata.ProtoReflect.Descriptor instead.
func (*FilesMetadata) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{57}
}

func (x *FilesMetadata) GetNumFiles() int32 {
	if x != nil {
		return x.NumFiles
	}
	return 0
}

func (x *FilesMetadata) GetFileMetadata() []*FileMetadata {
	if x != nil {
		return x.FileMetadata
	}
	return nil
}

type FileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName     string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`          //file Name
	Len          int64  `protobuf:"varint,2,opt,name=len,proto3" json:"len,omitempty"`                   //file checksum
	Checksum     int64  `protobuf:"varint,3,opt,name=checksum,proto3" json:"checksum,omitempty"`         //file checksum
	HeaderLength int32  `protobuf:"varint,4,opt,name=headerLength,proto3" json:"headerLength,omitempty"` //file header length;
	Header       []byte `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`              //file header;
	FooterLength int32  `protobuf:"varint,6,opt,name=footerLength,proto3" json:"footerLength,omitempty"` //file header length;
	Footer       []byte `protobuf:"bytes,7,opt,name=footer,proto3" json:"footer,omitempty"`              //file header;
}

func (x *FileMetadata) Reset() {
	*x = FileMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadata) ProtoMessage() {}

func (x *FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadata.ProtoReflect.Descriptor instead.
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{58}
}

func (x *FileMetadata) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileMetadata) GetLen() int64 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *FileMetadata) GetChecksum() int64 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *FileMetadata) GetHeaderLength() int32 {
	if x != nil {
		return x.HeaderLength
	}
	return 0
}

func (x *FileMetadata) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *FileMetadata) GetFooterLength() int32 {
	if x != nil {
		return x.FooterLength
	}
	return 0
}

func (x *FileMetadata) GetFooter() []byte {
	if x != nil {
		return x.Footer
	}
	return nil
}

// * Primary invokes this on a replica to ask it to copy files
type CopyFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicNumber   int32          `protobuf:"varint,1,opt,name=magicNumber,proto3" json:"magicNumber,omitempty"`    //magic number send on all requests since these are meant for internal communication only
	IndexName     string         `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`         //index name
	PrimaryGen    int64          `protobuf:"varint,3,opt,name=primaryGen,proto3" json:"primaryGen,omitempty"`      //primary, the generation of this primary (should increment each time a new primary starts for this index)
	FilesMetadata *FilesMetadata `protobuf:"bytes,4,opt,name=filesMetadata,proto3" json:"filesMetadata,omitempty"` //file metadata to copy
}

func (x *CopyFiles) Reset() {
	*x = CopyFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyFiles) ProtoMessage() {}

func (x *CopyFiles) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyFiles.ProtoReflect.Descriptor instead.
func (*CopyFiles) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{59}
}

func (x *CopyFiles) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *CopyFiles) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *CopyFiles) GetPrimaryGen() int64 {
	if x != nil {
		return x.PrimaryGen
	}
	return 0
}

func (x *CopyFiles) GetFilesMetadata() *FilesMetadata {
	if x != nil {
		return x.FilesMetadata
	}
	return nil
}

// * Replica invokes this on a primary to let primary know it needs the CopyState
type CopyStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicNumber int32  `protobuf:"varint,1,opt,name=magicNumber,proto3" json:"magicNumber,omitempty"` //magic number send on all requests since these are meant for internal communication only
	IndexName   string `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`      //index name
	ReplicaId   int32  `protobuf:"varint,3,opt,name=replicaId,proto3" json:"replicaId,omitempty"`     //replica Id
}

func (x *CopyStateRequest) Reset() {
	*x = CopyStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyStateRequest) ProtoMessage() {}

func (x *CopyStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyStateRequest.ProtoReflect.Descriptor instead.
func (*CopyStateRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{60}
}

func (x *CopyStateRequest) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *CopyStateRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *CopyStateRequest) GetReplicaId() int32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

type FilesInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicNumber int32       `protobuf:"varint,1,opt,name=magicNumber,proto3" json:"magicNumber,omitempty"` //magic number send on all requests since these are meant for internal communication only
	IndexName   string      `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`      //index name
	ReplicaId   int32       `protobuf:"varint,3,opt,name=replicaId,proto3" json:"replicaId,omitempty"`     //replica Id
	FileInfo    []*FileInfo `protobuf:"bytes,4,rep,name=fileInfo,proto3" json:"fileInfo,omitempty"`        //list of file name and offsets from where primary should start sending bytes to replica
}

func (x *FilesInfo) Reset() {
	*x = FilesInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesInfo) ProtoMessage() {}

func (x *FilesInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesInfo.ProtoReflect.Descriptor instead.
func (*FilesInfo) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{61}
}

func (x *FilesInfo) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *FilesInfo) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *FilesInfo) GetReplicaId() int32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *FilesInfo) GetFileInfo() []*FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName  string `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`   // Name of the file the replica wants primary to send
	FpStart   int64  `protobuf:"varint,2,opt,name=fpStart,proto3" json:"fpStart,omitempty"`    // Starting offset in the file primary should start sending bytes from:
	IndexName string `protobuf:"bytes,3,opt,name=indexName,proto3" json:"indexName,omitempty"` //index name these files belong to
	// sequence number to ack, only used for acked file copy
	AckSeqNum int32 `protobuf:"varint,4,opt,name=ackSeqNum,proto3" json:"ackSeqNum,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{62}
}

func (x *FileInfo) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FileInfo) GetFpStart() int64 {
	if x != nil {
		return x.FpStart
	}
	return 0
}

func (x *FileInfo) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *FileInfo) GetAckSeqNum() int32 {
	if x != nil {
		return x.AckSeqNum
	}
	return 0
}

type RawFileChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"` //raw contents of file
	// sequence number for this chunk, only used for acked file copy
	SeqNum int32 `protobuf:"varint,2,opt,name=seqNum,proto3" json:"seqNum,omitempty"`
	// if this chunk should be acked, only used for acked file copy
	Ack bool `protobuf:"varint,3,opt,name=ack,proto3" json:"ack,omitempty"`
}

func (x *RawFileChunk) Reset() {
	*x = RawFileChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RawFileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RawFileChunk) ProtoMessage() {}

func (x *RawFileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RawFileChunk.ProtoReflect.Descriptor instead.
func (*RawFileChunk) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{63}
}

func (x *RawFileChunk) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *RawFileChunk) GetSeqNum() int32 {
	if x != nil {
		return x.SeqNum
	}
	return 0
}

func (x *RawFileChunk) GetAck() bool {
	if x != nil {
		return x.Ack
	}
	return false
}

type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Check bool `protobuf:"varint,1,opt,name=check,proto3" json:"check,omitempty"` //healthcheck request
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{64}
}

func (x *HealthCheckRequest) GetCheck() bool {
	if x != nil {
		return x.Check
	}
	return false
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Health TransferStatusCode `protobuf:"varint,1,opt,name=health,proto3,enum=luceneserver.TransferStatusCode" json:"health,omitempty"` //enum response of healthcheck;
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{65}
}

func (x *HealthCheckResponse) GetHealth() TransferStatusCode {
	if x != nil {
		return x.Health
	}
	return TransferStatusCode_Unknown
}

type ReadyCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexNames string `protobuf:"bytes,1,opt,name=indexNames,proto3" json:"indexNames,omitempty"`
}

func (x *ReadyCheckRequest) Reset() {
	*x = ReadyCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadyCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadyCheckRequest) ProtoMessage() {}

func (x *ReadyCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadyCheckRequest.ProtoReflect.Descriptor instead.
func (*ReadyCheckRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{66}
}

func (x *ReadyCheckRequest) GetIndexNames() string {
	if x != nil {
		return x.IndexNames
	}
	return ""
}

type TransferStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string             `protobuf:"bytes,1,opt,name=Message,proto3" json:"Message,omitempty"`
	Code    TransferStatusCode `protobuf:"varint,2,opt,name=Code,proto3,enum=luceneserver.TransferStatusCode" json:"Code,omitempty"`
}

func (x *TransferStatus) Reset() {
	*x = TransferStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferStatus) ProtoMessage() {}

func (x *TransferStatus) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferStatus.ProtoReflect.Descriptor instead.
func (*TransferStatus) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{67}
}

func (x *TransferStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TransferStatus) GetCode() TransferStatusCode {
	if x != nil {
		return x.Code
	}
	return TransferStatusCode_Unknown
}

type NewNRTPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicNumber int32  `protobuf:"varint,1,opt,name=magicNumber,proto3" json:"magicNumber,omitempty"` //magic number send on all requests since these are meant for internal communication only
	IndexName   string `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`      //index name
	PrimaryGen  int64  `protobuf:"varint,3,opt,name=primaryGen,proto3" json:"primaryGen,omitempty"`   //primary, the generation of this primary (should increment each time a new primary starts for this index)
	Version     int64  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`         //version number when this SegmentInfos was generated
}

func (x *NewNRTPoint) Reset() {
	*x = NewNRTPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewNRTPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewNRTPoint) ProtoMessage() {}

func (x *NewNRTPoint) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewNRTPoint.ProtoReflect.Descriptor instead.
func (*NewNRTPoint) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{68}
}

func (x *NewNRTPoint) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *NewNRTPoint) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *NewNRTPoint) GetPrimaryGen() int64 {
	if x != nil {
		return x.PrimaryGen
	}
	return 0
}

func (x *NewNRTPoint) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

type IndexName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MagicNumber int32  `protobuf:"varint,1,opt,name=magicNumber,proto3" json:"magicNumber,omitempty"` //magic number send on all requests since these are meant for internal communication only
	IndexName   string `protobuf:"bytes,2,opt,name=indexName,proto3" json:"indexName,omitempty"`      //index name
}

func (x *IndexName) Reset() {
	*x = IndexName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexName) ProtoMessage() {}

func (x *IndexName) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexName.ProtoReflect.Descriptor instead.
func (*IndexName) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{69}
}

func (x *IndexName) GetMagicNumber() int32 {
	if x != nil {
		return x.MagicNumber
	}
	return 0
}

func (x *IndexName) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type SearcherVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`       //returns the version recorded in the commit that the reader opened.  This version is advanced every time a change is made with IndexWriter
	DidRefresh bool  `protobuf:"varint,2,opt,name=didRefresh,proto3" json:"didRefresh,omitempty"` //true if refresh happened
}

func (x *SearcherVersion) Reset() {
	*x = SearcherVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearcherVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearcherVersion) ProtoMessage() {}

func (x *SearcherVersion) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearcherVersion.ProtoReflect.Descriptor instead.
func (*SearcherVersion) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{70}
}

func (x *SearcherVersion) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *SearcherVersion) GetDidRefresh() bool {
	if x != nil {
		return x.DidRefresh
	}
	return false
}

type GetNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` //name of the started index whose binary connections we wish to see
}

func (x *GetNodesRequest) Reset() {
	*x = GetNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesRequest) ProtoMessage() {}

func (x *GetNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesRequest.ProtoReflect.Descriptor instead.
func (*GetNodesRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{71}
}

func (x *GetNodesRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type GetNodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*NodeInfo `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"` //list of NodeInfo
}

func (x *GetNodesResponse) Reset() {
	*x = GetNodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodesResponse) ProtoMessage() {}

func (x *GetNodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodesResponse.ProtoReflect.Descriptor instead.
func (*GetNodesResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{72}
}

func (x *GetNodesResponse) GetNodes() []*NodeInfo {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"` //name or ip address of the remote host that this node is connected to for binary replication
	Port     int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`        //port number of the remote host that this node is connected to for binary replication
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{73}
}

func (x *NodeInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *NodeInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type DeleteByQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string   `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` // Index to delete documents from
	Query     []*Query `protobuf:"bytes,2,rep,name=query,proto3" json:"query,omitempty"`         // Queries to match documents to be deleted
}

func (x *DeleteByQueryRequest) Reset() {
	*x = DeleteByQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteByQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteByQueryRequest) ProtoMessage() {}

func (x *DeleteByQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteByQueryRequest.ProtoReflect.Descriptor instead.
func (*DeleteByQueryRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{74}
}

func (x *DeleteByQueryRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *DeleteByQueryRequest) GetQuery() []*Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type ForceMergeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName      string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`            // Index whose segments must be force merged
	MaxNumSegments int32  `protobuf:"varint,2,opt,name=maxNumSegments,proto3" json:"maxNumSegments,omitempty"` // Maximum number of segments after force merge
	DoWait         bool   `protobuf:"varint,3,opt,name=doWait,proto3" json:"doWait,omitempty"`                 // If true, waits until the force merge is completed before returning a response. Otherwise starts force merging in async and returns a response.
}

func (x *ForceMergeRequest) Reset() {
	*x = ForceMergeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceMergeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceMergeRequest) ProtoMessage() {}

func (x *ForceMergeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceMergeRequest.ProtoReflect.Descriptor instead.
func (*ForceMergeRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{75}
}

func (x *ForceMergeRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *ForceMergeRequest) GetMaxNumSegments() int32 {
	if x != nil {
		return x.MaxNumSegments
	}
	return 0
}

func (x *ForceMergeRequest) GetDoWait() bool {
	if x != nil {
		return x.DoWait
	}
	return false
}

type ForceMergeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ForceMergeResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=luceneserver.ForceMergeResponse_Status" json:"status,omitempty"`
}

func (x *ForceMergeResponse) Reset() {
	*x = ForceMergeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceMergeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceMergeResponse) ProtoMessage() {}

func (x *ForceMergeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceMergeResponse.ProtoReflect.Descriptor instead.
func (*ForceMergeResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{76}
}

func (x *ForceMergeResponse) GetStatus() ForceMergeResponse_Status {
	if x != nil {
		return x.Status
	}
	return ForceMergeResponse_FORCE_MERGE_COMPLETED
}

type ForceMergeDeletesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"` // Index whose segments having deletes must be force merged
	DoWait    bool   `protobuf:"varint,2,opt,name=doWait,proto3" json:"doWait,omitempty"`      // If true, waits until the force merge is completed before returning a response. Otherwise starts force merging in async and returns a response.
}

func (x *ForceMergeDeletesRequest) Reset() {
	*x = ForceMergeDeletesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceMergeDeletesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceMergeDeletesRequest) ProtoMessage() {}

func (x *ForceMergeDeletesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceMergeDeletesRequest.ProtoReflect.Descriptor instead.
func (*ForceMergeDeletesRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{77}
}

func (x *ForceMergeDeletesRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *ForceMergeDeletesRequest) GetDoWait() bool {
	if x != nil {
		return x.DoWait
	}
	return false
}

type ForceMergeDeletesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ForceMergeDeletesResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=luceneserver.ForceMergeDeletesResponse_Status" json:"status,omitempty"`
}

func (x *ForceMergeDeletesResponse) Reset() {
	*x = ForceMergeDeletesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceMergeDeletesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceMergeDeletesResponse) ProtoMessage() {}

func (x *ForceMergeDeletesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceMergeDeletesResponse.ProtoReflect.Descriptor instead.
func (*ForceMergeDeletesResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{78}
}

func (x *ForceMergeDeletesResponse) GetStatus() ForceMergeDeletesResponse_Status {
	if x != nil {
		return x.Status
	}
	return ForceMergeDeletesResponse_FORCE_MERGE_DELETES_COMPLETED
}

type IndexSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Largest merged segment size to cache in RAMDirectory, default: 5.0MB
	NrtCachingDirectoryMaxMergeSizeMB *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=nrtCachingDirectoryMaxMergeSizeMB,proto3" json:"nrtCachingDirectoryMaxMergeSizeMB,omitempty"`
	// Largest overall size for all files cached in NRTCachingDirectory, default: 60.0MB
	NrtCachingDirectoryMaxSizeMB *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=nrtCachingDirectoryMaxSizeMB,proto3" json:"nrtCachingDirectoryMaxSizeMB,omitempty"`
	// How many merge threads to allow at once
	ConcurrentMergeSchedulerMaxThreadCount *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=concurrentMergeSchedulerMaxThreadCount,proto3" json:"concurrentMergeSchedulerMaxThreadCount,omitempty"`
	// Maximum backlog of pending merges before indexing threads are stalled
	ConcurrentMergeSchedulerMaxMergeCount *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=concurrentMergeSchedulerMaxMergeCount,proto3" json:"concurrentMergeSchedulerMaxMergeCount,omitempty"`
	// Index time sorting; can only be written once", SearchHandler.SORT_TYPE
	IndexSort *SortFields `protobuf:"bytes,5,opt,name=indexSort,proto3" json:"indexSort,omitempty"`
	// Turn on/off the merge scheduler's auto throttling, default: off
	IndexMergeSchedulerAutoThrottle *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=indexMergeSchedulerAutoThrottle,proto3" json:"indexMergeSchedulerAutoThrottle,omitempty"`
	// Base Directory implementation to use (NRTCachingDirectory will wrap this) either one of the core implementations (FSDirectory, MMapDirectory, NIOFSDirectory, SimpleFSDirectory, RAMDirectory (for temporary indices!) or a fully qualified path to a Directory implementation that has a public constructor taking a single File argument default: FSDirectory
	Directory *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *IndexSettings) Reset() {
	*x = IndexSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexSettings) ProtoMessage() {}

func (x *IndexSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexSettings.ProtoReflect.Descriptor instead.
func (*IndexSettings) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{79}
}

func (x *IndexSettings) GetNrtCachingDirectoryMaxMergeSizeMB() *wrapperspb.DoubleValue {
	if x != nil {
		return x.NrtCachingDirectoryMaxMergeSizeMB
	}
	return nil
}

func (x *IndexSettings) GetNrtCachingDirectoryMaxSizeMB() *wrapperspb.DoubleValue {
	if x != nil {
		return x.NrtCachingDirectoryMaxSizeMB
	}
	return nil
}

func (x *IndexSettings) GetConcurrentMergeSchedulerMaxThreadCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.ConcurrentMergeSchedulerMaxThreadCount
	}
	return nil
}

func (x *IndexSettings) GetConcurrentMergeSchedulerMaxMergeCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.ConcurrentMergeSchedulerMaxMergeCount
	}
	return nil
}

func (x *IndexSettings) GetIndexSort() *SortFields {
	if x != nil {
		return x.IndexSort
	}
	return nil
}

func (x *IndexSettings) GetIndexMergeSchedulerAutoThrottle() *wrapperspb.BoolValue {
	if x != nil {
		return x.IndexMergeSchedulerAutoThrottle
	}
	return nil
}

func (x *IndexSettings) GetDirectory() *wrapperspb.StringValue {
	if x != nil {
		return x.Directory
	}
	return nil
}

type IndexLiveSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Longest time to wait before reopening IndexSearcher (i.e., periodic background reopen), default: 1.0
	MaxRefreshSec *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=maxRefreshSec,proto3" json:"maxRefreshSec,omitempty"`
	// Shortest time to wait before reopening IndexSearcher (i.e., when a search is waiting for a specific indexGen), default: 0.05
	MinRefreshSec *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=minRefreshSec,proto3" json:"minRefreshSec,omitempty"`
	// Non-current searchers older than this are pruned, default: 60.0
	MaxSearcherAgeSec *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=maxSearcherAgeSec,proto3" json:"maxSearcherAgeSec,omitempty"`
	// Size (in MB) of IndexWriter's RAM buffer, default: 16.0
	IndexRamBufferSizeMB *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=indexRamBufferSizeMB,proto3" json:"indexRamBufferSizeMB,omitempty"`
	// Max number of documents to add at a time, default: 100
	AddDocumentsMaxBufferLen *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=addDocumentsMaxBufferLen,proto3" json:"addDocumentsMaxBufferLen,omitempty"`
	// Maximum number of documents allowed in a parallel search slice, default: 250,000
	SliceMaxDocs *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=sliceMaxDocs,proto3" json:"sliceMaxDocs,omitempty"`
	// Maximum number of segments allowed in a parallel search slice, default: 5
	SliceMaxSegments *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=sliceMaxSegments,proto3" json:"sliceMaxSegments,omitempty"`
	// Number of virtual shards to use for this index, default: 1
	VirtualShards *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=virtualShards,proto3" json:"virtualShards,omitempty"`
	// Maximum sized segment to produce during normal merging, default: 5GB
	MaxMergedSegmentMB *wrapperspb.Int32Value `protobuf:"bytes,9,opt,name=maxMergedSegmentMB,proto3" json:"maxMergedSegmentMB,omitempty"`
	// Number of segments per tier used by TieredMergePolicy, default: 10
	SegmentsPerTier *wrapperspb.Int32Value `protobuf:"bytes,10,opt,name=segmentsPerTier,proto3" json:"segmentsPerTier,omitempty"`
	// Timeout value to used when not specified in the search request, or 0 for no timeout, default: 0
	DefaultSearchTimeoutSec *wrapperspb.DoubleValue `protobuf:"bytes,11,opt,name=defaultSearchTimeoutSec,proto3" json:"defaultSearchTimeoutSec,omitempty"`
	// Timeout check every value to use when not specified in the search request, or 0 for none, default: 0
	DefaultSearchTimeoutCheckEvery *wrapperspb.Int32Value `protobuf:"bytes,12,opt,name=defaultSearchTimeoutCheckEvery,proto3" json:"defaultSearchTimeoutCheckEvery,omitempty"`
	// Terminate after value to use when not specified in the search request, or 0 for none, default: 0
	DefaultTerminateAfter *wrapperspb.Int32Value `protobuf:"bytes,13,opt,name=defaultTerminateAfter,proto3" json:"defaultTerminateAfter,omitempty"`
	// Merge precopy would be stopped after this time, or 0 for no checks, default: 0
	MaxMergePreCopyDurationSec *wrapperspb.UInt64Value `protobuf:"bytes,14,opt,name=maxMergePreCopyDurationSec,proto3" json:"maxMergePreCopyDurationSec,omitempty"`
	// Collect and publish additional index metrics, which may be more expensive in terms of volume, memory and/or compute, default: false
	VerboseMetrics *wrapperspb.BoolValue `protobuf:"bytes,15,opt,name=verboseMetrics,proto3" json:"verboseMetrics,omitempty"`
}

func (x *IndexLiveSettings) Reset() {
	*x = IndexLiveSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexLiveSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexLiveSettings) ProtoMessage() {}

func (x *IndexLiveSettings) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexLiveSettings.ProtoReflect.Descriptor instead.
func (*IndexLiveSettings) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{80}
}

func (x *IndexLiveSettings) GetMaxRefreshSec() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxRefreshSec
	}
	return nil
}

func (x *IndexLiveSettings) GetMinRefreshSec() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MinRefreshSec
	}
	return nil
}

func (x *IndexLiveSettings) GetMaxSearcherAgeSec() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxSearcherAgeSec
	}
	return nil
}

func (x *IndexLiveSettings) GetIndexRamBufferSizeMB() *wrapperspb.DoubleValue {
	if x != nil {
		return x.IndexRamBufferSizeMB
	}
	return nil
}

func (x *IndexLiveSettings) GetAddDocumentsMaxBufferLen() *wrapperspb.Int32Value {
	if x != nil {
		return x.AddDocumentsMaxBufferLen
	}
	return nil
}

func (x *IndexLiveSettings) GetSliceMaxDocs() *wrapperspb.Int32Value {
	if x != nil {
		return x.SliceMaxDocs
	}
	return nil
}

func (x *IndexLiveSettings) GetSliceMaxSegments() *wrapperspb.Int32Value {
	if x != nil {
		return x.SliceMaxSegments
	}
	return nil
}

func (x *IndexLiveSettings) GetVirtualShards() *wrapperspb.Int32Value {
	if x != nil {
		return x.VirtualShards
	}
	return nil
}

func (x *IndexLiveSettings) GetMaxMergedSegmentMB() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxMergedSegmentMB
	}
	return nil
}

func (x *IndexLiveSettings) GetSegmentsPerTier() *wrapperspb.Int32Value {
	if x != nil {
		return x.SegmentsPerTier
	}
	return nil
}

func (x *IndexLiveSettings) GetDefaultSearchTimeoutSec() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DefaultSearchTimeoutSec
	}
	return nil
}

func (x *IndexLiveSettings) GetDefaultSearchTimeoutCheckEvery() *wrapperspb.Int32Value {
	if x != nil {
		return x.DefaultSearchTimeoutCheckEvery
	}
	return nil
}

func (x *IndexLiveSettings) GetDefaultTerminateAfter() *wrapperspb.Int32Value {
	if x != nil {
		return x.DefaultTerminateAfter
	}
	return nil
}

func (x *IndexLiveSettings) GetMaxMergePreCopyDurationSec() *wrapperspb.UInt64Value {
	if x != nil {
		return x.MaxMergePreCopyDurationSec
	}
	return nil
}

func (x *IndexLiveSettings) GetVerboseMetrics() *wrapperspb.BoolValue {
	if x != nil {
		return x.VerboseMetrics
	}
	return nil
}

type IndexStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the index
	IndexName string `protobuf:"bytes,1,opt,name=indexName,proto3" json:"indexName,omitempty"`
	// State version generation
	Gen int64 `protobuf:"varint,2,opt,name=gen,proto3" json:"gen,omitempty"`
	// If this index has ever been committed
	Committed bool `protobuf:"varint,3,opt,name=committed,proto3" json:"committed,omitempty"`
	// Index settings
	Settings *IndexSettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
	// Index live settings
	LiveSettings *IndexLiveSettings `protobuf:"bytes,5,opt,name=liveSettings,proto3" json:"liveSettings,omitempty"`
	// Registered fields
	Fields map[string]*Field `protobuf:"bytes,6,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IndexStateInfo) Reset() {
	*x = IndexStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexStateInfo) ProtoMessage() {}

func (x *IndexStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexStateInfo.ProtoReflect.Descriptor instead.
func (*IndexStateInfo) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{81}
}

func (x *IndexStateInfo) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *IndexStateInfo) GetGen() int64 {
	if x != nil {
		return x.Gen
	}
	return 0
}

func (x *IndexStateInfo) GetCommitted() bool {
	if x != nil {
		return x.Committed
	}
	return false
}

func (x *IndexStateInfo) GetSettings() *IndexSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *IndexStateInfo) GetLiveSettings() *IndexLiveSettings {
	if x != nil {
		return x.LiveSettings
	}
	return nil
}

func (x *IndexStateInfo) GetFields() map[string]*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type IndexGlobalState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for index (UUID)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// If index should be started
	Started bool `protobuf:"varint,2,opt,name=started,proto3" json:"started,omitempty"`
}

func (x *IndexGlobalState) Reset() {
	*x = IndexGlobalState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexGlobalState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexGlobalState) ProtoMessage() {}

func (x *IndexGlobalState) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexGlobalState.ProtoReflect.Descriptor instead.
func (*IndexGlobalState) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{82}
}

func (x *IndexGlobalState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IndexGlobalState) GetStarted() bool {
	if x != nil {
		return x.Started
	}
	return false
}

type GlobalStateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State version generation
	Gen int64 `protobuf:"varint,1,opt,name=gen,proto3" json:"gen,omitempty"`
	// Global state for indices
	Indices map[string]*IndexGlobalState `protobuf:"bytes,2,rep,name=indices,proto3" json:"indices,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GlobalStateInfo) Reset() {
	*x = GlobalStateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalStateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalStateInfo) ProtoMessage() {}

func (x *GlobalStateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalStateInfo.ProtoReflect.Descriptor instead.
func (*GlobalStateInfo) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{83}
}

func (x *GlobalStateInfo) GetGen() int64 {
	if x != nil {
		return x.Gen
	}
	return 0
}

func (x *GlobalStateInfo) GetIndices() map[string]*IndexGlobalState {
	if x != nil {
		return x.Indices
	}
	return nil
}

type CustomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                                 // ID defined for custom requests in a plugin
	Path   string            `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`                                                                                             // Custom path that is defined in a plugin that maps to a route
	Params map[string]string `protobuf:"bytes,3,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Parameters that can be processed by the plugin at the specified path
}

func (x *CustomRequest) Reset() {
	*x = CustomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomRequest) ProtoMessage() {}

func (x *CustomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomRequest.ProtoReflect.Descriptor instead.
func (*CustomRequest) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{84}
}

func (x *CustomRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CustomRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CustomRequest) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

type CustomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response map[string]string `protobuf:"bytes,1,rep,name=response,proto3" json:"response,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Custom response sent by the plugin
}

func (x *CustomResponse) Reset() {
	*x = CustomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomResponse) ProtoMessage() {}

func (x *CustomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomResponse.ProtoReflect.Descriptor instead.
func (*CustomResponse) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{85}
}

func (x *CustomResponse) GetResponse() map[string]string {
	if x != nil {
		return x.Response
	}
	return nil
}

// we use this wrapper object to represent each field as a multivalued field.
type AddDocumentRequest_MultiValuedField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"` //list of values for this field
	// Facet paths/hierarchy to bucket these values by, if indexed field is of type Facet.HIERARCHY
	FaceHierarchyPaths []*FacetHierarchyPath `protobuf:"bytes,2,rep,name=faceHierarchyPaths,proto3" json:"faceHierarchyPaths,omitempty"`
}

func (x *AddDocumentRequest_MultiValuedField) Reset() {
	*x = AddDocumentRequest_MultiValuedField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDocumentRequest_MultiValuedField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDocumentRequest_MultiValuedField) ProtoMessage() {}

func (x *AddDocumentRequest_MultiValuedField) ProtoReflect() protoreflect.Message {
	mi := &file_yelp_nrtsearch_luceneserver_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDocumentRequest_MultiValuedField.ProtoReflect.Descriptor instead.
func (*AddDocumentRequest_MultiValuedField) Descriptor() ([]byte, []int) {
	return file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP(), []int{16, 0}
}

func (x *AddDocumentRequest_MultiValuedField) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AddDocumentRequest_MultiValuedField) GetFaceHierarchyPaths() []*FacetHierarchyPath {
	if x != nil {
		return x.FaceHierarchyPaths
	}
	return nil
}

var File_yelp_nrtsearch_luceneserver_proto protoreflect.FileDescriptor

var file_yelp_nrtsearch_luceneserver_proto_rawDesc = []byte{
	0x0a, 0x21, 0x79, 0x65, 0x6c, 0x70, 0x2f, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x2f, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x1a, 0x1b, 0x79, 0x65, 0x6c, 0x70, 0x2f, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x79, 0x65, 0x6c, 0x70, 0x2f, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79,
	0x65, 0x6c, 0x70, 0x2f, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x2f, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x02, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x0c,
	0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x22, 0x31, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa5, 0x05, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x53, 0x65, 0x63, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x53, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x63, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x61, 0x78,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65,
	0x72, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x61, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x61, 0x6d, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x12, 0x3a, 0x0a, 0x18, 0x61,
	0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x61, 0x78, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x61,
	0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x61, 0x78, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65,
	0x4d, 0x61, 0x78, 0x44, 0x6f, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x73,
	0x6c, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x53,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2e, 0x0a,
	0x12, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x42, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x42, 0x12, 0x28, 0x0a,
	0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x50, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x63, 0x12, 0x46, 0x0a, 0x1e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x76,
	0x65, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22,
	0x32, 0x0a, 0x14, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0c, 0x6c,
	0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x22, 0x5d, 0x0a, 0x16, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x76, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x9f, 0x0a, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x6f, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x44, 0x6f, 0x63,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6f, 0x6d, 0x69, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x64, 0x6f, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x6f, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x52, 0x06,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x32, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72,
	0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0d, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x0d, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x52, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x65, 0x72, 0x6d,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x65, 0x72,
	0x6d, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x0b, 0x74, 0x65, 0x72, 0x6d, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x6d, 0x69, 0x6c,
	0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x66, 0x61, 0x63, 0x65, 0x74, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x66,
	0x61, 0x63, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x61, 0x63, 0x65, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x66, 0x61, 0x63, 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x14, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x10, 0x73, 0x69, 0x6d, 0x69, 0x6c, 0x61, 0x72, 0x69,
	0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x0b, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x65, 0x61, 0x67, 0x65, 0x72, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x61,
	0x67, 0x65, 0x72, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x12,
	0x2a, 0x0a, 0x10, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x76, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x65,
	0x61, 0x67, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65,
	0x61, 0x67, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x73, 0x22, 0x5a, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x22, 0x2e, 0x0a, 0x10, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x85, 0x05, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x61,
	0x78, 0x4d, 0x42, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x10, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x4d, 0x42, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x12, 0x4c, 0x0a, 0x21, 0x6e, 0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x21, 0x6e, 0x72,
	0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x12,
	0x42, 0x0a, 0x1c, 0x6e, 0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x6e, 0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a,
	0x65, 0x4d, 0x42, 0x12, 0x56, 0x0a, 0x26, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d,
	0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x26, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x78,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x54, 0x0a, 0x25, 0x63,
	0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x25, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x73,
	0x65, 0x12, 0x48, 0x0a, 0x1f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x68, 0x72, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x41,
	0x75, 0x74, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x6f, 0x72, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x2e, 0x0a, 0x10, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0x0a, 0x11, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x4d, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x9f, 0x02, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x47,
	0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x34,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x07, 0x72, 0x65, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x33, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x84, 0x01,
	0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x44, 0x6f, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e,
	0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x53, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x53, 0x22, 0xe2, 0x02, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a,
	0x7a, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x50, 0x0a, 0x12, 0x66, 0x61, 0x63,
	0x65, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x50, 0x61, 0x74, 0x68, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x63, 0x65, 0x74, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72,
	0x63, 0x68, 0x79, 0x50, 0x61, 0x74, 0x68, 0x52, 0x12, 0x66, 0x61, 0x63, 0x65, 0x48, 0x69, 0x65,
	0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x50, 0x61, 0x74, 0x68, 0x73, 0x1a, 0x6c, 0x0a, 0x0b, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2a, 0x0a, 0x12, 0x46, 0x61, 0x63,
	0x65, 0x74, 0x48, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x67, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64,
	0x22, 0x2e, 0x0a, 0x0e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x37, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69,
	0x6d, 0x65, 0x4d, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x53, 0x22, 0x2d, 0x0a, 0x0d, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x67, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x0c, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xaf, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x61, 0x78, 0x44, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61,
	0x78, 0x44, 0x6f, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x69, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x64, 0x69, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x0a, 0x08, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x52, 0x08, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f,
	0x6d, 0x79, 0x12, 0x34, 0x0a, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x52, 0x09, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x22, 0x40, 0x0a, 0x08, 0x54, 0x61,
	0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x4f, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xa6, 0x01, 0x0a,
	0x08, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x44, 0x6f, 0x63, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x6c, 0x65, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x39, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x32, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x65, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67,
	0x65, 0x6e, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x6b, 0x22,
	0x1f, 0x0a, 0x0d, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x6b,
	0x22, 0x30, 0x0a, 0x10, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x14, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x59, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x70,
	0x65, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61,
	0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x66, 0x0a, 0x0a, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x65, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x47, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x79, 0x47, 0x65,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x22, 0x70, 0x0a,
	0x16, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x49, 0x64, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22,
	0x33, 0x0a, 0x17, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x38, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x39,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x47, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x47, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x65, 0x6e, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x12, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x71, 0x0a, 0x13, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a, 0x13, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x22, 0xbf, 0x01,
	0x0a, 0x1b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x57, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x70, 0x74, 0x69, 0x6d,
	0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22,
	0x1e, 0x0a, 0x1c, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x57, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67,
	0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x94, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x22, 0x8b, 0x02, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1d, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5d, 0x0a, 0x0f, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x69, 0x6e, 0x64,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a, 0x12, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x0a,
	0x0c, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa1,
	0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x24, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0xce, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x70,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x67, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x67, 0x65, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a,
	0x17, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x22, 0x6b, 0x0a, 0x0d, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75,
	0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75,
	0x6d, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd0, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75,
	0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x66, 0x6f, 0x6f, 0x74, 0x65, 0x72, 0x22, 0xae, 0x01, 0x0a, 0x09, 0x43, 0x6f,
	0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x47, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x10, 0x43, 0x6f,
	0x70, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a,
	0x09, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61,
	0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7c, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x66, 0x70, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x6b, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x22, 0x52, 0x0a, 0x0c, 0x52, 0x61,
	0x77, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x65, 0x71, 0x4e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x22, 0x2a,
	0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x22, 0x4f, 0x0a, 0x13, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x33, 0x0a, 0x11, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x60, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x4e, 0x52, 0x54, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x47, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x47,
	0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x09,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x67,
	0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x6d, 0x61, 0x67, 0x69, 0x63, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x64, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x64, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x22, 0x2f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x40, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x08, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x5f, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x71, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x78,
	0x4e, 0x75, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x64, 0x6f, 0x57, 0x61, 0x69, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x12, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x3e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x22, 0x50, 0x0a, 0x18, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x6f, 0x57, 0x61, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x6f, 0x57,
	0x61, 0x69, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x19, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4e, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x52,
	0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x45, 0x54, 0x45, 0x44, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f,
	0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x53, 0x55,
	0x42, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x44, 0x10, 0x01, 0x22, 0x9f, 0x05, 0x0a, 0x0d, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6a, 0x0a, 0x21, 0x6e,
	0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x21, 0x6e, 0x72, 0x74, 0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x12, 0x60, 0x0a, 0x1c, 0x6e, 0x72, 0x74, 0x43, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x61,
	0x78, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1c, 0x6e, 0x72, 0x74,
	0x43, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x12, 0x73, 0x0a, 0x26, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x26, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x4d, 0x61, 0x78, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x71,
	0x0a, 0x25, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x25, 0x63, 0x6f, 0x6e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x36, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6f, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x6f, 0x72, 0x74, 0x12, 0x64, 0x0a, 0x1f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x41, 0x75, 0x74, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x68, 0x72, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x12,
	0x3a, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xa5, 0x09, 0x0a, 0x11,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53,
	0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x53, 0x65, 0x63, 0x12, 0x42, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x53, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x63, 0x12, 0x4a, 0x0a, 0x11, 0x6d, 0x61, 0x78,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x41,
	0x67, 0x65, 0x53, 0x65, 0x63, 0x12, 0x50, 0x0a, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x61,
	0x6d, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x61, 0x6d, 0x42, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x4d, 0x42, 0x12, 0x57, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4d, 0x61, 0x78, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x4c, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x61, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x4d, 0x61, 0x78, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x4c, 0x65, 0x6e,
	0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x44, 0x6f, 0x63, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x44, 0x6f, 0x63,
	0x73, 0x12, 0x47, 0x0a, 0x10, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x78, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x76, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x72, 0x64, 0x73, 0x12, 0x4b, 0x0a,
	0x12, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x42, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x64, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x42, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x54, 0x69, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x65, 0x72, 0x54, 0x69, 0x65,
	0x72, 0x12, 0x56, 0x0a, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x17, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x12, 0x63, 0x0a, 0x1e, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x76, 0x65, 0x72, 0x79, 0x12, 0x51,
	0x0a, 0x15, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x12, 0x5c, 0x0a, 0x1a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x65,
	0x43, 0x6f, 0x70, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x65,
	0x43, 0x6f, 0x70, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x12,
	0x42, 0x0a, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x22, 0xee, 0x02, 0x0a, 0x0e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x67, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a,
	0x0c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x0c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x1a, 0x4e, 0x0a, 0x0b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x3c, 0x0a, 0x10, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x0f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x67, 0x65, 0x6e, 0x12, 0x44, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x5a,
	0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf, 0x01, 0x0a, 0x0d, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x3f, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x01, 0x0a,
	0x0e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x2a, 0xdc, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x54, 0x4f, 0x4d, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41,
	0x4e, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x07, 0x0a,
	0x03, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45,
	0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x4c, 0x41, 0x54, 0x5f, 0x4c, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x49, 0x52,
	0x54, 0x55, 0x41, 0x4c, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x0b,
	0x12, 0x07, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x4f, 0x4c,
	0x59, 0x47, 0x4f, 0x4e, 0x10, 0x0d, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54,
	0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x0f, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x55, 0x47, 0x47, 0x45, 0x53,
	0x54, 0x10, 0x10, 0x2a, 0x64, 0x0a, 0x0c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x43, 0x53, 0x5f, 0x46, 0x52, 0x45, 0x51,
	0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x4f, 0x43, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x4f, 0x43, 0x53, 0x5f,
	0x46, 0x52, 0x45, 0x51, 0x53, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x4f, 0x43, 0x53, 0x5f,
	0x46, 0x52, 0x45, 0x51, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x53, 0x10, 0x03, 0x2a, 0x84, 0x01, 0x0a, 0x0b, 0x54, 0x65,
	0x72, 0x6d, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x5f,
	0x54, 0x45, 0x52, 0x4d, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x54, 0x45, 0x52, 0x4d, 0x53, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x52, 0x4d,
	0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x1b, 0x0a,
	0x17, 0x54, 0x45, 0x52, 0x4d, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x5f, 0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x53, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x45,
	0x52, 0x4d, 0x53, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x4f, 0x46,
	0x46, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x53, 0x10, 0x04,
	0x2a, 0x61, 0x0a, 0x09, 0x46, 0x61, 0x63, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x4e, 0x4f, 0x5f, 0x46, 0x41, 0x43, 0x45, 0x54, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x46, 0x4c, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x49, 0x45, 0x52, 0x41, 0x52,
	0x43, 0x48, 0x59, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43,
	0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x4f, 0x43, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x53, 0x10, 0x04, 0x2a, 0x30, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x54, 0x41, 0x4e, 0x44, 0x41, 0x4c, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50,
	0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x50, 0x4c,
	0x49, 0x43, 0x41, 0x10, 0x02, 0x2a, 0x44, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f, 0x6e, 0x65,
	0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x4f, 0x6e, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x10, 0x03, 0x32, 0x9f, 0x22, 0x0a, 0x0c,
	0x4c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x6f, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a,
	0x0c, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x21, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x76,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76,
	0x31, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x9a, 0x01, 0x0a, 0x0e, 0x6c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x56, 0x32, 0x12, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x11, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1f,
	0x12, 0x1d, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0x6f, 0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x12, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0x6b, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11,
	0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0x84, 0x01, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x32,
	0x12, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x0c, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1a, 0x12, 0x18,
	0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x6b, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x56, 0x32, 0x12, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x56,
	0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x63, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0b, 0x72,
	0x65, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0c,
	0x61, 0x64, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64,
	0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x64, 0x64, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x28,
	0x01, 0x12, 0x5e, 0x0a, 0x07, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x1c, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x3a, 0x01,
	0x2a, 0x12, 0x5a, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x5a,
	0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x54, 0x0a, 0x08, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x56, 0x32, 0x12, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x32, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a,
	0x12, 0x64, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x22, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x76, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x79, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x62, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x79,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x27, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0b, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x73, 0x0a, 0x0c, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x3a, 0x01, 0x2a, 0x12,
	0x77, 0x0a, 0x0d, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
	0x12, 0x22, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x6c,
	0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x75, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75,
	0x67, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12,
	0x7b, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x23, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x7f, 0x0a, 0x0f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x24, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x9d, 0x01,
	0x0a, 0x16, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x47, 0x65, 0x6e, 0x12, 0x26, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x47, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x67, 0x65,
	0x6e, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0x6f, 0x0a,
	0x0b, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x3a, 0x01, 0x2a, 0x12, 0x88,
	0x01, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x12, 0x26, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0x94, 0x01, 0x0a, 0x14, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x57, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x12, 0x29, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x57, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x51,
	0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x57, 0x61, 0x72, 0x6d, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x77, 0x61,
	0x72, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x12, 0x6f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65,
	0x7d, 0x12, 0x61, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x78, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1f, 0x2e,
	0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x61, 0x64, 0x79, 0x5a, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x7d, 0x12, 0x50,
	0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12,
	0x0f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x5b, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d,
	0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x12, 0x6b, 0x0a,
	0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73,
	0x12, 0x26, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12,
	0x1b, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x70, 0x61, 0x74, 0x68, 0x7d, 0x3a, 0x01, 0x2a, 0x32, 0x9c, 0x06,
	0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0b, 0x61, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x12, 0x1f, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x76, 0x43,
	0x6f, 0x70, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x77, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x52, 0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x1a, 0x1c,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x28, 0x01,
	0x12, 0x45, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x76, 0x52, 0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x22, 0x00, 0x30, 0x01, 0x12, 0x49, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x76, 0x52,
	0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x12, 0x16, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x1a, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x52, 0x61, 0x77, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12,
	0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x6f, 0x70, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x1a, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0b, 0x6e, 0x65,
	0x77, 0x4e, 0x52, 0x54, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x19, 0x2e, 0x6c, 0x75, 0x63, 0x65,
	0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x77, 0x4e, 0x52, 0x54, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x1c, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4e, 0x52, 0x54,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x17, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1d,
	0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12,
	0x55, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x2e, 0x6c,
	0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1d, 0x2e, 0x6c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x65, 0x72, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x6c, 0x75,
	0x63, 0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6c, 0x75, 0x63,
	0x65, 0x6e, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x56, 0x0a, 0x1e,
	0x63, 0x6f, 0x6d, 0x2e, 0x79, 0x65, 0x6c, 0x70, 0x2e, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x42, 0x11,
	0x4c, 0x75, 0x63, 0x65, 0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x50, 0x01, 0x5a, 0x19, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x59, 0x65, 0x6c, 0x70, 0x2f, 0x6e, 0x72, 0x74, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0xa2, 0x02,
	0x03, 0x48, 0x4c, 0x57, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_yelp_nrtsearch_luceneserver_proto_rawDescOnce sync.Once
	file_yelp_nrtsearch_luceneserver_proto_rawDescData = file_yelp_nrtsearch_luceneserver_proto_rawDesc
)

func file_yelp_nrtsearch_luceneserver_proto_rawDescGZIP() []byte {
	file_yelp_nrtsearch_luceneserver_proto_rawDescOnce.Do(func() {
		file_yelp_nrtsearch_luceneserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_yelp_nrtsearch_luceneserver_proto_rawDescData)
	})
	return file_yelp_nrtsearch_luceneserver_proto_rawDescData
}

var file_yelp_nrtsearch_luceneserver_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_yelp_nrtsearch_luceneserver_proto_msgTypes = make([]protoimpl.MessageInfo, 92)
var file_yelp_nrtsearch_luceneserver_proto_goTypes = []interface{}{
	(FieldType)(0),                              // 0: luceneserver.FieldType
	(IndexOptions)(0),                           // 1: luceneserver.IndexOptions
	(TermVectors)(0),                            // 2: luceneserver.TermVectors
	(FacetType)(0),                              // 3: luceneserver.FacetType
	(Mode)(0),                                   // 4: luceneserver.Mode
	(TransferStatusCode)(0),                     // 5: luceneserver.TransferStatusCode
	(ForceMergeResponse_Status)(0),              // 6: luceneserver.ForceMergeResponse.Status
	(ForceMergeDeletesResponse_Status)(0),       // 7: luceneserver.ForceMergeDeletesResponse.Status
	(*CreateIndexRequest)(nil),                  // 8: luceneserver.CreateIndexRequest
	(*CreateIndexResponse)(nil),                 // 9: luceneserver.CreateIndexResponse
	(*LiveSettingsRequest)(nil),                 // 10: luceneserver.LiveSettingsRequest
	(*LiveSettingsResponse)(nil),                // 11: luceneserver.LiveSettingsResponse
	(*LiveSettingsV2Request)(nil),               // 12: luceneserver.LiveSettingsV2Request
	(*LiveSettingsV2Response)(nil),              // 13: luceneserver.LiveSettingsV2Response
	(*Field)(nil),                               // 14: luceneserver.Field
	(*FieldDefRequest)(nil),                     // 15: luceneserver.FieldDefRequest
	(*FieldDefResponse)(nil),                    // 16: luceneserver.FieldDefResponse
	(*SettingsRequest)(nil),                     // 17: luceneserver.SettingsRequest
	(*SettingsResponse)(nil),                    // 18: luceneserver.SettingsResponse
	(*SettingsV2Request)(nil),                   // 19: luceneserver.SettingsV2Request
	(*SettingsV2Response)(nil),                  // 20: luceneserver.SettingsV2Response
	(*StartIndexRequest)(nil),                   // 21: luceneserver.StartIndexRequest
	(*StartIndexV2Request)(nil),                 // 22: luceneserver.StartIndexV2Request
	(*StartIndexResponse)(nil),                  // 23: luceneserver.StartIndexResponse
	(*AddDocumentRequest)(nil),                  // 24: luceneserver.AddDocumentRequest
	(*FacetHierarchyPath)(nil),                  // 25: luceneserver.FacetHierarchyPath
	(*AddDocumentResponse)(nil),                 // 26: luceneserver.AddDocumentResponse
	(*RefreshRequest)(nil),                      // 27: luceneserver.RefreshRequest
	(*RefreshResponse)(nil),                     // 28: luceneserver.RefreshResponse
	(*CommitRequest)(nil),                       // 29: luceneserver.CommitRequest
	(*CommitResponse)(nil),                      // 30: luceneserver.CommitResponse
	(*StatsRequest)(nil),                        // 31: luceneserver.StatsRequest
	(*StatsResponse)(nil),                       // 32: luceneserver.StatsResponse
	(*Taxonomy)(nil),                            // 33: luceneserver.Taxonomy
	(*Searcher)(nil),                            // 34: luceneserver.Searcher
	(*DeleteAllDocumentsRequest)(nil),           // 35: luceneserver.DeleteAllDocumentsRequest
	(*DeleteAllDocumentsResponse)(nil),          // 36: luceneserver.DeleteAllDocumentsResponse
	(*DeleteIndexRequest)(nil),                  // 37: luceneserver.DeleteIndexRequest
	(*DeleteIndexResponse)(nil),                 // 38: luceneserver.DeleteIndexResponse
	(*DummyResponse)(nil),                       // 39: luceneserver.DummyResponse
	(*StopIndexRequest)(nil),                    // 40: luceneserver.StopIndexRequest
	(*ReloadStateRequest)(nil),                  // 41: luceneserver.ReloadStateRequest
	(*ReloadStateResponse)(nil),                 // 42: luceneserver.ReloadStateResponse
	(*CreateSnapshotRequest)(nil),               // 43: luceneserver.CreateSnapshotRequest
	(*CreateSnapshotResponse)(nil),              // 44: luceneserver.CreateSnapshotResponse
	(*SnapshotId)(nil),                          // 45: luceneserver.SnapshotId
	(*ReleaseSnapshotRequest)(nil),              // 46: luceneserver.ReleaseSnapshotRequest
	(*ReleaseSnapshotResponse)(nil),             // 47: luceneserver.ReleaseSnapshotResponse
	(*GetAllSnapshotGenRequest)(nil),            // 48: luceneserver.GetAllSnapshotGenRequest
	(*GetAllSnapshotGenResponse)(nil),           // 49: luceneserver.GetAllSnapshotGenResponse
	(*BackupIndexRequest)(nil),                  // 50: luceneserver.BackupIndexRequest
	(*BackupIndexResponse)(nil),                 // 51: luceneserver.BackupIndexResponse
	(*BackupWarmingQueriesRequest)(nil),         // 52: luceneserver.BackupWarmingQueriesRequest
	(*BackupWarmingQueriesResponse)(nil),        // 53: luceneserver.BackupWarmingQueriesResponse
	(*DeleteIndexBackupRequest)(nil),            // 54: luceneserver.DeleteIndexBackupRequest
	(*DeleteIndexBackupResponse)(nil),           // 55: luceneserver.DeleteIndexBackupResponse
	(*IndicesRequest)(nil),                      // 56: luceneserver.IndicesRequest
	(*IndicesResponse)(nil),                     // 57: luceneserver.IndicesResponse
	(*IndexStatsResponse)(nil),                  // 58: luceneserver.IndexStatsResponse
	(*RestoreIndex)(nil),                        // 59: luceneserver.RestoreIndex
	(*StateRequest)(nil),                        // 60: luceneserver.StateRequest
	(*StateResponse)(nil),                       // 61: luceneserver.StateResponse
	(*AddReplicaRequest)(nil),                   // 62: luceneserver.AddReplicaRequest
	(*AddReplicaResponse)(nil),                  // 63: luceneserver.AddReplicaResponse
	(*CopyState)(nil),                           // 64: luceneserver.CopyState
	(*FilesMetadata)(nil),                       // 65: luceneserver.FilesMetadata
	(*FileMetadata)(nil),                        // 66: luceneserver.FileMetadata
	(*CopyFiles)(nil),                           // 67: luceneserver.CopyFiles
	(*CopyStateRequest)(nil),                    // 68: luceneserver.CopyStateRequest
	(*FilesInfo)(nil),                           // 69: luceneserver.FilesInfo
	(*FileInfo)(nil),                            // 70: luceneserver.FileInfo
	(*RawFileChunk)(nil),                        // 71: luceneserver.RawFileChunk
	(*HealthCheckRequest)(nil),                  // 72: luceneserver.HealthCheckRequest
	(*HealthCheckResponse)(nil),                 // 73: luceneserver.HealthCheckResponse
	(*ReadyCheckRequest)(nil),                   // 74: luceneserver.ReadyCheckRequest
	(*TransferStatus)(nil),                      // 75: luceneserver.TransferStatus
	(*NewNRTPoint)(nil),                         // 76: luceneserver.NewNRTPoint
	(*IndexName)(nil),                           // 77: luceneserver.IndexName
	(*SearcherVersion)(nil),                     // 78: luceneserver.SearcherVersion
	(*GetNodesRequest)(nil),                     // 79: luceneserver.GetNodesRequest
	(*GetNodesResponse)(nil),                    // 80: luceneserver.GetNodesResponse
	(*NodeInfo)(nil),                            // 81: luceneserver.NodeInfo
	(*DeleteByQueryRequest)(nil),                // 82: luceneserver.DeleteByQueryRequest
	(*ForceMergeRequest)(nil),                   // 83: luceneserver.ForceMergeRequest
	(*ForceMergeResponse)(nil),                  // 84: luceneserver.ForceMergeResponse
	(*ForceMergeDeletesRequest)(nil),            // 85: luceneserver.ForceMergeDeletesRequest
	(*ForceMergeDeletesResponse)(nil),           // 86: luceneserver.ForceMergeDeletesResponse
	(*IndexSettings)(nil),                       // 87: luceneserver.IndexSettings
	(*IndexLiveSettings)(nil),                   // 88: luceneserver.IndexLiveSettings
	(*IndexStateInfo)(nil),                      // 89: luceneserver.IndexStateInfo
	(*IndexGlobalState)(nil),                    // 90: luceneserver.IndexGlobalState
	(*GlobalStateInfo)(nil),                     // 91: luceneserver.GlobalStateInfo
	(*CustomRequest)(nil),                       // 92: luceneserver.CustomRequest
	(*CustomResponse)(nil),                      // 93: luceneserver.CustomResponse
	(*AddDocumentRequest_MultiValuedField)(nil), // 94: luceneserver.AddDocumentRequest.MultiValuedField
	nil,                            // 95: luceneserver.AddDocumentRequest.FieldsEntry
	nil,                            // 96: luceneserver.IndexStateInfo.FieldsEntry
	nil,                            // 97: luceneserver.GlobalStateInfo.IndicesEntry
	nil,                            // 98: luceneserver.CustomRequest.ParamsEntry
	nil,                            // 99: luceneserver.CustomResponse.ResponseEntry
	(*Script)(nil),                 // 100: luceneserver.Script
	(*Analyzer)(nil),               // 101: luceneserver.Analyzer
	(*structpb.Struct)(nil),        // 102: google.protobuf.Struct
	(*SortFields)(nil),             // 103: luceneserver.SortFields
	(*Query)(nil),                  // 104: luceneserver.Query
	(*wrapperspb.DoubleValue)(nil), // 105: google.protobuf.DoubleValue
	(*wrapperspb.Int32Value)(nil),  // 106: google.protobuf.Int32Value
	(*wrapperspb.BoolValue)(nil),   // 107: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil), // 108: google.protobuf.StringValue
	(*wrapperspb.UInt64Value)(nil), // 109: google.protobuf.UInt64Value
	(*SearchRequest)(nil),          // 110: luceneserver.SearchRequest
	(*BuildSuggestRequest)(nil),    // 111: luceneserver.BuildSuggestRequest
	(*SuggestLookupRequest)(nil),   // 112: luceneserver.SuggestLookupRequest
	(*emptypb.Empty)(nil),          // 113: google.protobuf.Empty
	(*SearchResponse)(nil),         // 114: luceneserver.SearchResponse
	(*anypb.Any)(nil),              // 115: google.protobuf.Any
	(*BuildSuggestResponse)(nil),   // 116: luceneserver.BuildSuggestResponse
	(*SuggestLookupResponse)(nil),  // 117: luceneserver.SuggestLookupResponse
	(*httpbody.HttpBody)(nil),      // 118: google.api.HttpBody
}
var file_yelp_nrtsearch_luceneserver_proto_depIdxs = []int32{
	87,  // 0: luceneserver.CreateIndexRequest.settings:type_name -> luceneserver.IndexSettings
	88,  // 1: luceneserver.CreateIndexRequest.liveSettings:type_name -> luceneserver.IndexLiveSettings
	14,  // 2: luceneserver.CreateIndexRequest.fields:type_name -> luceneserver.Field
	88,  // 3: luceneserver.LiveSettingsV2Request.liveSettings:type_name -> luceneserver.IndexLiveSettings
	88,  // 4: luceneserver.LiveSettingsV2Response.liveSettings:type_name -> luceneserver.IndexLiveSettings
	0,   // 5: luceneserver.Field.type:type_name -> luceneserver.FieldType
	1,   // 6: luceneserver.Field.indexOptions:type_name -> luceneserver.IndexOptions
	100, // 7: luceneserver.Field.script:type_name -> luceneserver.Script
	101, // 8: luceneserver.Field.analyzer:type_name -> luceneserver.Analyzer
	101, // 9: luceneserver.Field.indexAnalyzer:type_name -> luceneserver.Analyzer
	101, // 10: luceneserver.Field.searchAnalyzer:type_name -> luceneserver.Analyzer
	2,   // 11: luceneserver.Field.termVectors:type_name -> luceneserver.TermVectors
	3,   // 12: luceneserver.Field.facet:type_name -> luceneserver.FacetType
	102, // 13: luceneserver.Field.additionalProperties:type_name -> google.protobuf.Struct
	102, // 14: luceneserver.Field.similarityParams:type_name -> google.protobuf.Struct
	14,  // 15: luceneserver.Field.childFields:type_name -> luceneserver.Field
	14,  // 16: luceneserver.FieldDefRequest.field:type_name -> luceneserver.Field
	103, // 17: luceneserver.SettingsRequest.indexSort:type_name -> luceneserver.SortFields
	87,  // 18: luceneserver.SettingsV2Request.settings:type_name -> luceneserver.IndexSettings
	87,  // 19: luceneserver.SettingsV2Response.settings:type_name -> luceneserver.IndexSettings
	4,   // 20: luceneserver.StartIndexRequest.mode:type_name -> luceneserver.Mode
	59,  // 21: luceneserver.StartIndexRequest.restore:type_name -> luceneserver.RestoreIndex
	95,  // 22: luceneserver.AddDocumentRequest.fields:type_name -> luceneserver.AddDocumentRequest.FieldsEntry
	33,  // 23: luceneserver.StatsResponse.taxonomy:type_name -> luceneserver.Taxonomy
	34,  // 24: luceneserver.StatsResponse.searchers:type_name -> luceneserver.Searcher
	34,  // 25: luceneserver.StatsResponse.currentSearcher:type_name -> luceneserver.Searcher
	45,  // 26: luceneserver.CreateSnapshotResponse.snapshotId:type_name -> luceneserver.SnapshotId
	45,  // 27: luceneserver.ReleaseSnapshotRequest.snapshotId:type_name -> luceneserver.SnapshotId
	58,  // 28: luceneserver.IndicesResponse.indicesResponse:type_name -> luceneserver.IndexStatsResponse
	32,  // 29: luceneserver.IndexStatsResponse.statsResponse:type_name -> luceneserver.StatsResponse
	65,  // 30: luceneserver.CopyState.filesMetadata:type_name -> luceneserver.FilesMetadata
	66,  // 31: luceneserver.FilesMetadata.fileMetadata:type_name -> luceneserver.FileMetadata
	65,  // 32: luceneserver.CopyFiles.filesMetadata:type_name -> luceneserver.FilesMetadata
	70,  // 33: luceneserver.FilesInfo.fileInfo:type_name -> luceneserver.FileInfo
	5,   // 34: luceneserver.HealthCheckResponse.health:type_name -> luceneserver.TransferStatusCode
	5,   // 35: luceneserver.TransferStatus.Code:type_name -> luceneserver.TransferStatusCode
	81,  // 36: luceneserver.GetNodesResponse.nodes:type_name -> luceneserver.NodeInfo
	104, // 37: luceneserver.DeleteByQueryRequest.query:type_name -> luceneserver.Query
	6,   // 38: luceneserver.ForceMergeResponse.status:type_name -> luceneserver.ForceMergeResponse.Status
	7,   // 39: luceneserver.ForceMergeDeletesResponse.status:type_name -> luceneserver.ForceMergeDeletesResponse.Status
	105, // 40: luceneserver.IndexSettings.nrtCachingDirectoryMaxMergeSizeMB:type_name -> google.protobuf.DoubleValue
	105, // 41: luceneserver.IndexSettings.nrtCachingDirectoryMaxSizeMB:type_name -> google.protobuf.DoubleValue
	106, // 42: luceneserver.IndexSettings.concurrentMergeSchedulerMaxThreadCount:type_name -> google.protobuf.Int32Value
	106, // 43: luceneserver.IndexSettings.concurrentMergeSchedulerMaxMergeCount:type_name -> google.protobuf.Int32Value
	103, // 44: luceneserver.IndexSettings.indexSort:type_name -> luceneserver.SortFields
	107, // 45: luceneserver.IndexSettings.indexMergeSchedulerAutoThrottle:type_name -> google.protobuf.BoolValue
	108, // 46: luceneserver.IndexSettings.directory:type_name -> google.protobuf.StringValue
	105, // 47: luceneserver.IndexLiveSettings.maxRefreshSec:type_name -> google.protobuf.DoubleValue
	105, // 48: luceneserver.IndexLiveSettings.minRefreshSec:type_name -> google.protobuf.DoubleValue
	105, // 49: luceneserver.IndexLiveSettings.maxSearcherAgeSec:type_name -> google.protobuf.DoubleValue
	105, // 50: luceneserver.IndexLiveSettings.indexRamBufferSizeMB:type_name -> google.protobuf.DoubleValue
	106, // 51: luceneserver.IndexLiveSettings.addDocumentsMaxBufferLen:type_name -> google.protobuf.Int32Value
	106, // 52: luceneserver.IndexLiveSettings.sliceMaxDocs:type_name -> google.protobuf.Int32Value
	106, // 53: luceneserver.IndexLiveSettings.sliceMaxSegments:type_name -> google.protobuf.Int32Value
	106, // 54: luceneserver.IndexLiveSettings.virtualShards:type_name -> google.protobuf.Int32Value
	106, // 55: luceneserver.IndexLiveSettings.maxMergedSegmentMB:type_name -> google.protobuf.Int32Value
	106, // 56: luceneserver.IndexLiveSettings.segmentsPerTier:type_name -> google.protobuf.Int32Value
	105, // 57: luceneserver.IndexLiveSettings.defaultSearchTimeoutSec:type_name -> google.protobuf.DoubleValue
	106, // 58: luceneserver.IndexLiveSettings.defaultSearchTimeoutCheckEvery:type_name -> google.protobuf.Int32Value
	106, // 59: luceneserver.IndexLiveSettings.defaultTerminateAfter:type_name -> google.protobuf.Int32Value
	109, // 60: luceneserver.IndexLiveSettings.maxMergePreCopyDurationSec:type_name -> google.protobuf.UInt64Value
	107, // 61: luceneserver.IndexLiveSettings.verboseMetrics:type_name -> google.protobuf.BoolValue
	87,  // 62: luceneserver.IndexStateInfo.settings:type_name -> luceneserver.IndexSettings
	88,  // 63: luceneserver.IndexStateInfo.liveSettings:type_name -> luceneserver.IndexLiveSettings
	96,  // 64: luceneserver.IndexStateInfo.fields:type_name -> luceneserver.IndexStateInfo.FieldsEntry
	97,  // 65: luceneserver.GlobalStateInfo.indices:type_name -> luceneserver.GlobalStateInfo.IndicesEntry
	98,  // 66: luceneserver.CustomRequest.params:type_name -> luceneserver.CustomRequest.ParamsEntry
	99,  // 67: luceneserver.CustomResponse.response:type_name -> luceneserver.CustomResponse.ResponseEntry
	25,  // 68: luceneserver.AddDocumentRequest.MultiValuedField.faceHierarchyPaths:type_name -> luceneserver.FacetHierarchyPath
	94,  // 69: luceneserver.AddDocumentRequest.FieldsEntry.value:type_name -> luceneserver.AddDocumentRequest.MultiValuedField
	14,  // 70: luceneserver.IndexStateInfo.FieldsEntry.value:type_name -> luceneserver.Field
	90,  // 71: luceneserver.GlobalStateInfo.IndicesEntry.value:type_name -> luceneserver.IndexGlobalState
	8,   // 72: luceneserver.LuceneServer.createIndex:input_type -> luceneserver.CreateIndexRequest
	10,  // 73: luceneserver.LuceneServer.liveSettings:input_type -> luceneserver.LiveSettingsRequest
	12,  // 74: luceneserver.LuceneServer.liveSettingsV2:input_type -> luceneserver.LiveSettingsV2Request
	15,  // 75: luceneserver.LuceneServer.registerFields:input_type -> luceneserver.FieldDefRequest
	15,  // 76: luceneserver.LuceneServer.updateFields:input_type -> luceneserver.FieldDefRequest
	17,  // 77: luceneserver.LuceneServer.settings:input_type -> luceneserver.SettingsRequest
	19,  // 78: luceneserver.LuceneServer.settingsV2:input_type -> luceneserver.SettingsV2Request
	21,  // 79: luceneserver.LuceneServer.startIndex:input_type -> luceneserver.StartIndexRequest
	22,  // 80: luceneserver.LuceneServer.startIndexV2:input_type -> luceneserver.StartIndexV2Request
	40,  // 81: luceneserver.LuceneServer.stopIndex:input_type -> luceneserver.StopIndexRequest
	41,  // 82: luceneserver.LuceneServer.reloadState:input_type -> luceneserver.ReloadStateRequest
	24,  // 83: luceneserver.LuceneServer.addDocuments:input_type -> luceneserver.AddDocumentRequest
	27,  // 84: luceneserver.LuceneServer.refresh:input_type -> luceneserver.RefreshRequest
	29,  // 85: luceneserver.LuceneServer.commit:input_type -> luceneserver.CommitRequest
	31,  // 86: luceneserver.LuceneServer.stats:input_type -> luceneserver.StatsRequest
	110, // 87: luceneserver.LuceneServer.search:input_type -> luceneserver.SearchRequest
	110, // 88: luceneserver.LuceneServer.searchV2:input_type -> luceneserver.SearchRequest
	24,  // 89: luceneserver.LuceneServer.delete:input_type -> luceneserver.AddDocumentRequest
	82,  // 90: luceneserver.LuceneServer.deleteByQuery:input_type -> luceneserver.DeleteByQueryRequest
	35,  // 91: luceneserver.LuceneServer.deleteAll:input_type -> luceneserver.DeleteAllDocumentsRequest
	37,  // 92: luceneserver.LuceneServer.deleteIndex:input_type -> luceneserver.DeleteIndexRequest
	111, // 93: luceneserver.LuceneServer.buildSuggest:input_type -> luceneserver.BuildSuggestRequest
	112, // 94: luceneserver.LuceneServer.suggestLookup:input_type -> luceneserver.SuggestLookupRequest
	111, // 95: luceneserver.LuceneServer.updateSuggest:input_type -> luceneserver.BuildSuggestRequest
	43,  // 96: luceneserver.LuceneServer.createSnapshot:input_type -> luceneserver.CreateSnapshotRequest
	46,  // 97: luceneserver.LuceneServer.releaseSnapshot:input_type -> luceneserver.ReleaseSnapshotRequest
	48,  // 98: luceneserver.LuceneServer.getAllSnapshotIndexGen:input_type -> luceneserver.GetAllSnapshotGenRequest
	50,  // 99: luceneserver.LuceneServer.backupIndex:input_type -> luceneserver.BackupIndexRequest
	54,  // 100: luceneserver.LuceneServer.deleteIndexBackup:input_type -> luceneserver.DeleteIndexBackupRequest
	52,  // 101: luceneserver.LuceneServer.backupWarmingQueries:input_type -> luceneserver.BackupWarmingQueriesRequest
	60,  // 102: luceneserver.LuceneServer.state:input_type -> luceneserver.StateRequest
	72,  // 103: luceneserver.LuceneServer.status:input_type -> luceneserver.HealthCheckRequest
	74,  // 104: luceneserver.LuceneServer.ready:input_type -> luceneserver.ReadyCheckRequest
	113, // 105: luceneserver.LuceneServer.metrics:input_type -> google.protobuf.Empty
	56,  // 106: luceneserver.LuceneServer.indices:input_type -> luceneserver.IndicesRequest
	83,  // 107: luceneserver.LuceneServer.forceMerge:input_type -> luceneserver.ForceMergeRequest
	85,  // 108: luceneserver.LuceneServer.forceMergeDeletes:input_type -> luceneserver.ForceMergeDeletesRequest
	92,  // 109: luceneserver.LuceneServer.custom:input_type -> luceneserver.CustomRequest
	62,  // 110: luceneserver.ReplicationServer.addReplicas:input_type -> luceneserver.AddReplicaRequest
	68,  // 111: luceneserver.ReplicationServer.recvCopyState:input_type -> luceneserver.CopyStateRequest
	71,  // 112: luceneserver.ReplicationServer.sendRawFile:input_type -> luceneserver.RawFileChunk
	70,  // 113: luceneserver.ReplicationServer.recvRawFile:input_type -> luceneserver.FileInfo
	70,  // 114: luceneserver.ReplicationServer.recvRawFileV2:input_type -> luceneserver.FileInfo
	67,  // 115: luceneserver.ReplicationServer.copyFiles:input_type -> luceneserver.CopyFiles
	76,  // 116: luceneserver.ReplicationServer.newNRTPoint:input_type -> luceneserver.NewNRTPoint
	77,  // 117: luceneserver.ReplicationServer.writeNRTPoint:input_type -> luceneserver.IndexName
	77,  // 118: luceneserver.ReplicationServer.getCurrentSearcherVersion:input_type -> luceneserver.IndexName
	79,  // 119: luceneserver.ReplicationServer.getConnectedNodes:input_type -> luceneserver.GetNodesRequest
	9,   // 120: luceneserver.LuceneServer.createIndex:output_type -> luceneserver.CreateIndexResponse
	11,  // 121: luceneserver.LuceneServer.liveSettings:output_type -> luceneserver.LiveSettingsResponse
	13,  // 122: luceneserver.LuceneServer.liveSettingsV2:output_type -> luceneserver.LiveSettingsV2Response
	16,  // 123: luceneserver.LuceneServer.registerFields:output_type -> luceneserver.FieldDefResponse
	16,  // 124: luceneserver.LuceneServer.updateFields:output_type -> luceneserver.FieldDefResponse
	18,  // 125: luceneserver.LuceneServer.settings:output_type -> luceneserver.SettingsResponse
	20,  // 126: luceneserver.LuceneServer.settingsV2:output_type -> luceneserver.SettingsV2Response
	23,  // 127: luceneserver.LuceneServer.startIndex:output_type -> luceneserver.StartIndexResponse
	23,  // 128: luceneserver.LuceneServer.startIndexV2:output_type -> luceneserver.StartIndexResponse
	39,  // 129: luceneserver.LuceneServer.stopIndex:output_type -> luceneserver.DummyResponse
	42,  // 130: luceneserver.LuceneServer.reloadState:output_type -> luceneserver.ReloadStateResponse
	26,  // 131: luceneserver.LuceneServer.addDocuments:output_type -> luceneserver.AddDocumentResponse
	28,  // 132: luceneserver.LuceneServer.refresh:output_type -> luceneserver.RefreshResponse
	30,  // 133: luceneserver.LuceneServer.commit:output_type -> luceneserver.CommitResponse
	32,  // 134: luceneserver.LuceneServer.stats:output_type -> luceneserver.StatsResponse
	114, // 135: luceneserver.LuceneServer.search:output_type -> luceneserver.SearchResponse
	115, // 136: luceneserver.LuceneServer.searchV2:output_type -> google.protobuf.Any
	26,  // 137: luceneserver.LuceneServer.delete:output_type -> luceneserver.AddDocumentResponse
	26,  // 138: luceneserver.LuceneServer.deleteByQuery:output_type -> luceneserver.AddDocumentResponse
	36,  // 139: luceneserver.LuceneServer.deleteAll:output_type -> luceneserver.DeleteAllDocumentsResponse
	38,  // 140: luceneserver.LuceneServer.deleteIndex:output_type -> luceneserver.DeleteIndexResponse
	116, // 141: luceneserver.LuceneServer.buildSuggest:output_type -> luceneserver.BuildSuggestResponse
	117, // 142: luceneserver.LuceneServer.suggestLookup:output_type -> luceneserver.SuggestLookupResponse
	116, // 143: luceneserver.LuceneServer.updateSuggest:output_type -> luceneserver.BuildSuggestResponse
	44,  // 144: luceneserver.LuceneServer.createSnapshot:output_type -> luceneserver.CreateSnapshotResponse
	47,  // 145: luceneserver.LuceneServer.releaseSnapshot:output_type -> luceneserver.ReleaseSnapshotResponse
	49,  // 146: luceneserver.LuceneServer.getAllSnapshotIndexGen:output_type -> luceneserver.GetAllSnapshotGenResponse
	51,  // 147: luceneserver.LuceneServer.backupIndex:output_type -> luceneserver.BackupIndexResponse
	55,  // 148: luceneserver.LuceneServer.deleteIndexBackup:output_type -> luceneserver.DeleteIndexBackupResponse
	53,  // 149: luceneserver.LuceneServer.backupWarmingQueries:output_type -> luceneserver.BackupWarmingQueriesResponse
	61,  // 150: luceneserver.LuceneServer.state:output_type -> luceneserver.StateResponse
	73,  // 151: luceneserver.LuceneServer.status:output_type -> luceneserver.HealthCheckResponse
	73,  // 152: luceneserver.LuceneServer.ready:output_type -> luceneserver.HealthCheckResponse
	118, // 153: luceneserver.LuceneServer.metrics:output_type -> google.api.HttpBody
	57,  // 154: luceneserver.LuceneServer.indices:output_type -> luceneserver.IndicesResponse
	84,  // 155: luceneserver.LuceneServer.forceMerge:output_type -> luceneserver.ForceMergeResponse
	86,  // 156: luceneserver.LuceneServer.forceMergeDeletes:output_type -> luceneserver.ForceMergeDeletesResponse
	93,  // 157: luceneserver.LuceneServer.custom:output_type -> luceneserver.CustomResponse
	63,  // 158: luceneserver.ReplicationServer.addReplicas:output_type -> luceneserver.AddReplicaResponse
	64,  // 159: luceneserver.ReplicationServer.recvCopyState:output_type -> luceneserver.CopyState
	75,  // 160: luceneserver.ReplicationServer.sendRawFile:output_type -> luceneserver.TransferStatus
	71,  // 161: luceneserver.ReplicationServer.recvRawFile:output_type -> luceneserver.RawFileChunk
	71,  // 162: luceneserver.ReplicationServer.recvRawFileV2:output_type -> luceneserver.RawFileChunk
	75,  // 163: luceneserver.ReplicationServer.copyFiles:output_type -> luceneserver.TransferStatus
	75,  // 164: luceneserver.ReplicationServer.newNRTPoint:output_type -> luceneserver.TransferStatus
	78,  // 165: luceneserver.ReplicationServer.writeNRTPoint:output_type -> luceneserver.SearcherVersion
	78,  // 166: luceneserver.ReplicationServer.getCurrentSearcherVersion:output_type -> luceneserver.SearcherVersion
	80,  // 167: luceneserver.ReplicationServer.getConnectedNodes:output_type -> luceneserver.GetNodesResponse
	120, // [120:168] is the sub-list for method output_type
	72,  // [72:120] is the sub-list for method input_type
	72,  // [72:72] is the sub-list for extension type_name
	72,  // [72:72] is the sub-list for extension extendee
	0,   // [0:72] is the sub-list for field type_name
}

func init() { file_yelp_nrtsearch_luceneserver_proto_init() }
func file_yelp_nrtsearch_luceneserver_proto_init() {
	if File_yelp_nrtsearch_luceneserver_proto != nil {
		return
	}
	file_yelp_nrtsearch_search_proto_init()
	file_yelp_nrtsearch_analysis_proto_init()
	file_yelp_nrtsearch_suggest_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveSettingsV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveSettingsV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldDefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldDefResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingsV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartIndexV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDocumentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FacetHierarchyPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDocumentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Taxonomy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Searcher); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAllDocumentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAllDocumentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DummyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReloadStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SnapshotId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSnapshotGenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllSnapshotGenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupWarmingQueriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupWarmingQueriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIndexBackupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteIndexBackupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndicesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReplicaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddReplicaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RawFileChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadyCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewNRTPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearcherVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteByQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceMergeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceMergeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceMergeDeletesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceMergeDeletesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexLiveSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexGlobalState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalStateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yelp_nrtsearch_luceneserver_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDocumentRequest_MultiValuedField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yelp_nrtsearch_luceneserver_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   92,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_yelp_nrtsearch_luceneserver_proto_goTypes,
		DependencyIndexes: file_yelp_nrtsearch_luceneserver_proto_depIdxs,
		EnumInfos:         file_yelp_nrtsearch_luceneserver_proto_enumTypes,
		MessageInfos:      file_yelp_nrtsearch_luceneserver_proto_msgTypes,
	}.Build()
	File_yelp_nrtsearch_luceneserver_proto = out.File
	file_yelp_nrtsearch_luceneserver_proto_rawDesc = nil
	file_yelp_nrtsearch_luceneserver_proto_goTypes = nil
	file_yelp_nrtsearch_luceneserver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LuceneServerClient is the client API for LuceneServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LuceneServerClient interface {
	// Create an Index
	CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*CreateIndexResponse, error)
	// Change global offline or online settings for this index.
	LiveSettings(ctx context.Context, in *LiveSettingsRequest, opts ...grpc.CallOption) (*LiveSettingsResponse, error)
	// Change global offline or online settings for this index.
	LiveSettingsV2(ctx context.Context, in *LiveSettingsV2Request, opts ...grpc.CallOption) (*LiveSettingsV2Response, error)
	// Registers one or more fields.  Fields must be registered before they can be added in a document (via @addDocument).
	// Pass a list of Fields and an indexName. Any number of fields may be registered in a single request,
	// and once a field is registered it cannot be changed (write-once).
	// This returns the full set of fields currently registered.
	RegisterFields(ctx context.Context, in *FieldDefRequest, opts ...grpc.CallOption) (*FieldDefResponse, error)
	// Adds one or more fields.  Fields must be registered before they can be added in a document (via @addDocument).
	// Pass a list of Fields and an indexName. Any number of fields may be registered in a single request,
	// and once a field is registered it cannot be changed (write-once).
	// This returns the full set of fields currently registered.
	UpdateFields(ctx context.Context, in *FieldDefRequest, opts ...grpc.CallOption) (*FieldDefResponse, error)
	// Change global offline settings for this index.
	// This returns the currently set settings; pass no settings changes to retrieve current settings.
	Settings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*SettingsResponse, error)
	// Change global offline settings for this index.
	// This returns the currently set settings; pass no settings to retrieve current settings.
	SettingsV2(ctx context.Context, in *SettingsV2Request, opts ...grpc.CallOption) (*SettingsV2Response, error)
	// Starts an index
	StartIndex(ctx context.Context, in *StartIndexRequest, opts ...grpc.CallOption) (*StartIndexResponse, error)
	// Starts an index using configuration in IndexStartConfig
	StartIndexV2(ctx context.Context, in *StartIndexV2Request, opts ...grpc.CallOption) (*StartIndexResponse, error)
	// Stops an index
	StopIndex(ctx context.Context, in *StopIndexRequest, opts ...grpc.CallOption) (*DummyResponse, error)
	// Reload state from the backend
	ReloadState(ctx context.Context, in *ReloadStateRequest, opts ...grpc.CallOption) (*ReloadStateResponse, error)
	// Adds a stream of Documents
	AddDocuments(ctx context.Context, opts ...grpc.CallOption) (LuceneServer_AddDocumentsClient, error)
	// Refresh the latest searcher for an index
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	// Commits all pending changes to durable storage
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	// Retrieve index statistics
	Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
	// Search
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	// Search V2
	SearchV2(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*anypb.Any, error)
	// Delete documents
	Delete(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error)
	// Delete documents matching a query
	DeleteByQuery(ctx context.Context, in *DeleteByQueryRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error)
	// Delete all documents for index
	DeleteAll(ctx context.Context, in *DeleteAllDocumentsRequest, opts ...grpc.CallOption) (*DeleteAllDocumentsResponse, error)
	// Delete index
	DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*DeleteIndexResponse, error)
	// Builds a new auto-suggester, loading suggestions via the provided local file path.
	BuildSuggest(ctx context.Context, in *BuildSuggestRequest, opts ...grpc.CallOption) (*BuildSuggestResponse, error)
	// Perform an auto-suggest lookup.
	SuggestLookup(ctx context.Context, in *SuggestLookupRequest, opts ...grpc.CallOption) (*SuggestLookupResponse, error)
	// Updates existing suggestions, if the suggester supports near-real-time changes.
	UpdateSuggest(ctx context.Context, in *BuildSuggestRequest, opts ...grpc.CallOption) (*BuildSuggestResponse, error)
	// Creates a snapshot in the index, which is saved point-in-time view of the last commit
	// in the index such that no files referenced by that snapshot will be deleted by ongoing
	// indexing until the snapshot is released with @releaseSnapshot.  Note that this will
	// reference the last commit, so be sure to call commit first if you have pending changes
	// that you'd like to be included in the snapshot.
	// This can be used for backup purposes, i.e. after creating the snapshot you can copy
	// all referenced files to backup storage, and then release the snapshot once complete.
	// To restore the backup, just copy all the files back and restart the server.
	// It can also be used for transactional purposes, i.e. if you sometimes need to search a
	// specific snapshot instead of the current live index. Creating a snapshot is very fast
	// (does not require any file copying), but over time it will consume extra disk space as
	// old segments are merged in the index.  Be sure to release the snapshot once you're done.
	// Snapshots survive shutdown and restart of the server.  Returns all protected filenames
	// referenced by this snapshot: these files will not change and will not be deleted until
	// the snapshot is released.  This returns the directories and files referenced by the snapshot.
	CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error)
	// releases a snapshot previously created with @createSnapshot.
	ReleaseSnapshot(ctx context.Context, in *ReleaseSnapshotRequest, opts ...grpc.CallOption) (*ReleaseSnapshotResponse, error)
	// Gets all unreleased index gens of snapshots previously created with @createSnapshot.
	GetAllSnapshotIndexGen(ctx context.Context, in *GetAllSnapshotGenRequest, opts ...grpc.CallOption) (*GetAllSnapshotGenResponse, error)
	// backs up a resource (index) and it associated metadata e.g. settings, schema to s3
	BackupIndex(ctx context.Context, in *BackupIndexRequest, opts ...grpc.CallOption) (*BackupIndexResponse, error)
	DeleteIndexBackup(ctx context.Context, in *DeleteIndexBackupRequest, opts ...grpc.CallOption) (*DeleteIndexBackupResponse, error)
	// Backup warming queries to S3
	BackupWarmingQueries(ctx context.Context, in *BackupWarmingQueriesRequest, opts ...grpc.CallOption) (*BackupWarmingQueriesResponse, error)
	// Gets the state of a started index, includes settings, live_settings, search schema, suggest schema
	State(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error)
	// healthcheck
	Status(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Checks if a node is ready to receive traffic by checking if all the indices (which can be preloaded)
	// are started. Can specify comma-separated list of index name to only check specific indices if needed.
	Ready(ctx context.Context, in *ReadyCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// metrics
	Metrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// indices
	Indices(ctx context.Context, in *IndicesRequest, opts ...grpc.CallOption) (*IndicesResponse, error)
	// Forces merge policy to merge segments until there are <= maxNumSegments. The actual
	// merges to be executed are determined by the MergePolicy. This call will merge those
	// segments present in the index when the call started. If other threads are still
	// adding documents and flushing segments, those newly created segments will not be
	// merged unless you call forceMerge again.
	ForceMerge(ctx context.Context, in *ForceMergeRequest, opts ...grpc.CallOption) (*ForceMergeResponse, error)
	// Forces merging of all segments that have deleted documents. The actual merges to be
	// executed are determined by the MergePolicy. For example, the default TieredMergePolicy
	// will only pick a segment if the percentage of deleted docs is over 10%.
	// This method first flushes a new segment (if there are indexed documents), and applies
	// all buffered deletes.
	ForceMergeDeletes(ctx context.Context, in *ForceMergeDeletesRequest, opts ...grpc.CallOption) (*ForceMergeDeletesResponse, error)
	// Process request in a plugin which implements CustomRequestPlugin interface.
	Custom(ctx context.Context, in *CustomRequest, opts ...grpc.CallOption) (*CustomResponse, error)
}

type luceneServerClient struct {
	cc grpc.ClientConnInterface
}

func NewLuceneServerClient(cc grpc.ClientConnInterface) LuceneServerClient {
	return &luceneServerClient{cc}
}

func (c *luceneServerClient) CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*CreateIndexResponse, error) {
	out := new(CreateIndexResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/createIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) LiveSettings(ctx context.Context, in *LiveSettingsRequest, opts ...grpc.CallOption) (*LiveSettingsResponse, error) {
	out := new(LiveSettingsResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/liveSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) LiveSettingsV2(ctx context.Context, in *LiveSettingsV2Request, opts ...grpc.CallOption) (*LiveSettingsV2Response, error) {
	out := new(LiveSettingsV2Response)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/liveSettingsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) RegisterFields(ctx context.Context, in *FieldDefRequest, opts ...grpc.CallOption) (*FieldDefResponse, error) {
	out := new(FieldDefResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/registerFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) UpdateFields(ctx context.Context, in *FieldDefRequest, opts ...grpc.CallOption) (*FieldDefResponse, error) {
	out := new(FieldDefResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/updateFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Settings(ctx context.Context, in *SettingsRequest, opts ...grpc.CallOption) (*SettingsResponse, error) {
	out := new(SettingsResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/settings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) SettingsV2(ctx context.Context, in *SettingsV2Request, opts ...grpc.CallOption) (*SettingsV2Response, error) {
	out := new(SettingsV2Response)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/settingsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) StartIndex(ctx context.Context, in *StartIndexRequest, opts ...grpc.CallOption) (*StartIndexResponse, error) {
	out := new(StartIndexResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/startIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) StartIndexV2(ctx context.Context, in *StartIndexV2Request, opts ...grpc.CallOption) (*StartIndexResponse, error) {
	out := new(StartIndexResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/startIndexV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) StopIndex(ctx context.Context, in *StopIndexRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/stopIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) ReloadState(ctx context.Context, in *ReloadStateRequest, opts ...grpc.CallOption) (*ReloadStateResponse, error) {
	out := new(ReloadStateResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/reloadState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) AddDocuments(ctx context.Context, opts ...grpc.CallOption) (LuceneServer_AddDocumentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LuceneServer_serviceDesc.Streams[0], "/luceneserver.LuceneServer/addDocuments", opts...)
	if err != nil {
		return nil, err
	}
	x := &luceneServerAddDocumentsClient{stream}
	return x, nil
}

type LuceneServer_AddDocumentsClient interface {
	Send(*AddDocumentRequest) error
	CloseAndRecv() (*AddDocumentResponse, error)
	grpc.ClientStream
}

type luceneServerAddDocumentsClient struct {
	grpc.ClientStream
}

func (x *luceneServerAddDocumentsClient) Send(m *AddDocumentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *luceneServerAddDocumentsClient) CloseAndRecv() (*AddDocumentResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddDocumentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *luceneServerClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Stats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) SearchV2(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*anypb.Any, error) {
	out := new(anypb.Any)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/searchV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Delete(ctx context.Context, in *AddDocumentRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error) {
	out := new(AddDocumentResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) DeleteByQuery(ctx context.Context, in *DeleteByQueryRequest, opts ...grpc.CallOption) (*AddDocumentResponse, error) {
	out := new(AddDocumentResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/deleteByQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) DeleteAll(ctx context.Context, in *DeleteAllDocumentsRequest, opts ...grpc.CallOption) (*DeleteAllDocumentsResponse, error) {
	out := new(DeleteAllDocumentsResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/deleteAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) DeleteIndex(ctx context.Context, in *DeleteIndexRequest, opts ...grpc.CallOption) (*DeleteIndexResponse, error) {
	out := new(DeleteIndexResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/deleteIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) BuildSuggest(ctx context.Context, in *BuildSuggestRequest, opts ...grpc.CallOption) (*BuildSuggestResponse, error) {
	out := new(BuildSuggestResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/buildSuggest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) SuggestLookup(ctx context.Context, in *SuggestLookupRequest, opts ...grpc.CallOption) (*SuggestLookupResponse, error) {
	out := new(SuggestLookupResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/suggestLookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) UpdateSuggest(ctx context.Context, in *BuildSuggestRequest, opts ...grpc.CallOption) (*BuildSuggestResponse, error) {
	out := new(BuildSuggestResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/updateSuggest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) CreateSnapshot(ctx context.Context, in *CreateSnapshotRequest, opts ...grpc.CallOption) (*CreateSnapshotResponse, error) {
	out := new(CreateSnapshotResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/createSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) ReleaseSnapshot(ctx context.Context, in *ReleaseSnapshotRequest, opts ...grpc.CallOption) (*ReleaseSnapshotResponse, error) {
	out := new(ReleaseSnapshotResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/releaseSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) GetAllSnapshotIndexGen(ctx context.Context, in *GetAllSnapshotGenRequest, opts ...grpc.CallOption) (*GetAllSnapshotGenResponse, error) {
	out := new(GetAllSnapshotGenResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/getAllSnapshotIndexGen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) BackupIndex(ctx context.Context, in *BackupIndexRequest, opts ...grpc.CallOption) (*BackupIndexResponse, error) {
	out := new(BackupIndexResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/backupIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) DeleteIndexBackup(ctx context.Context, in *DeleteIndexBackupRequest, opts ...grpc.CallOption) (*DeleteIndexBackupResponse, error) {
	out := new(DeleteIndexBackupResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/deleteIndexBackup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) BackupWarmingQueries(ctx context.Context, in *BackupWarmingQueriesRequest, opts ...grpc.CallOption) (*BackupWarmingQueriesResponse, error) {
	out := new(BackupWarmingQueriesResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/backupWarmingQueries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) State(ctx context.Context, in *StateRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/state", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Status(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Ready(ctx context.Context, in *ReadyCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/ready", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Metrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/metrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Indices(ctx context.Context, in *IndicesRequest, opts ...grpc.CallOption) (*IndicesResponse, error) {
	out := new(IndicesResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/indices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) ForceMerge(ctx context.Context, in *ForceMergeRequest, opts ...grpc.CallOption) (*ForceMergeResponse, error) {
	out := new(ForceMergeResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/forceMerge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) ForceMergeDeletes(ctx context.Context, in *ForceMergeDeletesRequest, opts ...grpc.CallOption) (*ForceMergeDeletesResponse, error) {
	out := new(ForceMergeDeletesResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/forceMergeDeletes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *luceneServerClient) Custom(ctx context.Context, in *CustomRequest, opts ...grpc.CallOption) (*CustomResponse, error) {
	out := new(CustomResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.LuceneServer/custom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LuceneServerServer is the server API for LuceneServer service.
type LuceneServerServer interface {
	// Create an Index
	CreateIndex(context.Context, *CreateIndexRequest) (*CreateIndexResponse, error)
	// Change global offline or online settings for this index.
	LiveSettings(context.Context, *LiveSettingsRequest) (*LiveSettingsResponse, error)
	// Change global offline or online settings for this index.
	LiveSettingsV2(context.Context, *LiveSettingsV2Request) (*LiveSettingsV2Response, error)
	// Registers one or more fields.  Fields must be registered before they can be added in a document (via @addDocument).
	// Pass a list of Fields and an indexName. Any number of fields may be registered in a single request,
	// and once a field is registered it cannot be changed (write-once).
	// This returns the full set of fields currently registered.
	RegisterFields(context.Context, *FieldDefRequest) (*FieldDefResponse, error)
	// Adds one or more fields.  Fields must be registered before they can be added in a document (via @addDocument).
	// Pass a list of Fields and an indexName. Any number of fields may be registered in a single request,
	// and once a field is registered it cannot be changed (write-once).
	// This returns the full set of fields currently registered.
	UpdateFields(context.Context, *FieldDefRequest) (*FieldDefResponse, error)
	// Change global offline settings for this index.
	// This returns the currently set settings; pass no settings changes to retrieve current settings.
	Settings(context.Context, *SettingsRequest) (*SettingsResponse, error)
	// Change global offline settings for this index.
	// This returns the currently set settings; pass no settings to retrieve current settings.
	SettingsV2(context.Context, *SettingsV2Request) (*SettingsV2Response, error)
	// Starts an index
	StartIndex(context.Context, *StartIndexRequest) (*StartIndexResponse, error)
	// Starts an index using configuration in IndexStartConfig
	StartIndexV2(context.Context, *StartIndexV2Request) (*StartIndexResponse, error)
	// Stops an index
	StopIndex(context.Context, *StopIndexRequest) (*DummyResponse, error)
	// Reload state from the backend
	ReloadState(context.Context, *ReloadStateRequest) (*ReloadStateResponse, error)
	// Adds a stream of Documents
	AddDocuments(LuceneServer_AddDocumentsServer) error
	// Refresh the latest searcher for an index
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	// Commits all pending changes to durable storage
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	// Retrieve index statistics
	Stats(context.Context, *StatsRequest) (*StatsResponse, error)
	// Search
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	// Search V2
	SearchV2(context.Context, *SearchRequest) (*anypb.Any, error)
	// Delete documents
	Delete(context.Context, *AddDocumentRequest) (*AddDocumentResponse, error)
	// Delete documents matching a query
	DeleteByQuery(context.Context, *DeleteByQueryRequest) (*AddDocumentResponse, error)
	// Delete all documents for index
	DeleteAll(context.Context, *DeleteAllDocumentsRequest) (*DeleteAllDocumentsResponse, error)
	// Delete index
	DeleteIndex(context.Context, *DeleteIndexRequest) (*DeleteIndexResponse, error)
	// Builds a new auto-suggester, loading suggestions via the provided local file path.
	BuildSuggest(context.Context, *BuildSuggestRequest) (*BuildSuggestResponse, error)
	// Perform an auto-suggest lookup.
	SuggestLookup(context.Context, *SuggestLookupRequest) (*SuggestLookupResponse, error)
	// Updates existing suggestions, if the suggester supports near-real-time changes.
	UpdateSuggest(context.Context, *BuildSuggestRequest) (*BuildSuggestResponse, error)
	// Creates a snapshot in the index, which is saved point-in-time view of the last commit
	// in the index such that no files referenced by that snapshot will be deleted by ongoing
	// indexing until the snapshot is released with @releaseSnapshot.  Note that this will
	// reference the last commit, so be sure to call commit first if you have pending changes
	// that you'd like to be included in the snapshot.
	// This can be used for backup purposes, i.e. after creating the snapshot you can copy
	// all referenced files to backup storage, and then release the snapshot once complete.
	// To restore the backup, just copy all the files back and restart the server.
	// It can also be used for transactional purposes, i.e. if you sometimes need to search a
	// specific snapshot instead of the current live index. Creating a snapshot is very fast
	// (does not require any file copying), but over time it will consume extra disk space as
	// old segments are merged in the index.  Be sure to release the snapshot once you're done.
	// Snapshots survive shutdown and restart of the server.  Returns all protected filenames
	// referenced by this snapshot: these files will not change and will not be deleted until
	// the snapshot is released.  This returns the directories and files referenced by the snapshot.
	CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error)
	// releases a snapshot previously created with @createSnapshot.
	ReleaseSnapshot(context.Context, *ReleaseSnapshotRequest) (*ReleaseSnapshotResponse, error)
	// Gets all unreleased index gens of snapshots previously created with @createSnapshot.
	GetAllSnapshotIndexGen(context.Context, *GetAllSnapshotGenRequest) (*GetAllSnapshotGenResponse, error)
	// backs up a resource (index) and it associated metadata e.g. settings, schema to s3
	BackupIndex(context.Context, *BackupIndexRequest) (*BackupIndexResponse, error)
	DeleteIndexBackup(context.Context, *DeleteIndexBackupRequest) (*DeleteIndexBackupResponse, error)
	// Backup warming queries to S3
	BackupWarmingQueries(context.Context, *BackupWarmingQueriesRequest) (*BackupWarmingQueriesResponse, error)
	// Gets the state of a started index, includes settings, live_settings, search schema, suggest schema
	State(context.Context, *StateRequest) (*StateResponse, error)
	// healthcheck
	Status(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Checks if a node is ready to receive traffic by checking if all the indices (which can be preloaded)
	// are started. Can specify comma-separated list of index name to only check specific indices if needed.
	Ready(context.Context, *ReadyCheckRequest) (*HealthCheckResponse, error)
	// metrics
	Metrics(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	// indices
	Indices(context.Context, *IndicesRequest) (*IndicesResponse, error)
	// Forces merge policy to merge segments until there are <= maxNumSegments. The actual
	// merges to be executed are determined by the MergePolicy. This call will merge those
	// segments present in the index when the call started. If other threads are still
	// adding documents and flushing segments, those newly created segments will not be
	// merged unless you call forceMerge again.
	ForceMerge(context.Context, *ForceMergeRequest) (*ForceMergeResponse, error)
	// Forces merging of all segments that have deleted documents. The actual merges to be
	// executed are determined by the MergePolicy. For example, the default TieredMergePolicy
	// will only pick a segment if the percentage of deleted docs is over 10%.
	// This method first flushes a new segment (if there are indexed documents), and applies
	// all buffered deletes.
	ForceMergeDeletes(context.Context, *ForceMergeDeletesRequest) (*ForceMergeDeletesResponse, error)
	// Process request in a plugin which implements CustomRequestPlugin interface.
	Custom(context.Context, *CustomRequest) (*CustomResponse, error)
}

// UnimplementedLuceneServerServer can be embedded to have forward compatible implementations.
type UnimplementedLuceneServerServer struct {
}

func (*UnimplementedLuceneServerServer) CreateIndex(context.Context, *CreateIndexRequest) (*CreateIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (*UnimplementedLuceneServerServer) LiveSettings(context.Context, *LiveSettingsRequest) (*LiveSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveSettings not implemented")
}
func (*UnimplementedLuceneServerServer) LiveSettingsV2(context.Context, *LiveSettingsV2Request) (*LiveSettingsV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiveSettingsV2 not implemented")
}
func (*UnimplementedLuceneServerServer) RegisterFields(context.Context, *FieldDefRequest) (*FieldDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFields not implemented")
}
func (*UnimplementedLuceneServerServer) UpdateFields(context.Context, *FieldDefRequest) (*FieldDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFields not implemented")
}
func (*UnimplementedLuceneServerServer) Settings(context.Context, *SettingsRequest) (*SettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Settings not implemented")
}
func (*UnimplementedLuceneServerServer) SettingsV2(context.Context, *SettingsV2Request) (*SettingsV2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettingsV2 not implemented")
}
func (*UnimplementedLuceneServerServer) StartIndex(context.Context, *StartIndexRequest) (*StartIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartIndex not implemented")
}
func (*UnimplementedLuceneServerServer) StartIndexV2(context.Context, *StartIndexV2Request) (*StartIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartIndexV2 not implemented")
}
func (*UnimplementedLuceneServerServer) StopIndex(context.Context, *StopIndexRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopIndex not implemented")
}
func (*UnimplementedLuceneServerServer) ReloadState(context.Context, *ReloadStateRequest) (*ReloadStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadState not implemented")
}
func (*UnimplementedLuceneServerServer) AddDocuments(LuceneServer_AddDocumentsServer) error {
	return status.Errorf(codes.Unimplemented, "method AddDocuments not implemented")
}
func (*UnimplementedLuceneServerServer) Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (*UnimplementedLuceneServerServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (*UnimplementedLuceneServerServer) Stats(context.Context, *StatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (*UnimplementedLuceneServerServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedLuceneServerServer) SearchV2(context.Context, *SearchRequest) (*anypb.Any, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchV2 not implemented")
}
func (*UnimplementedLuceneServerServer) Delete(context.Context, *AddDocumentRequest) (*AddDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedLuceneServerServer) DeleteByQuery(context.Context, *DeleteByQueryRequest) (*AddDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByQuery not implemented")
}
func (*UnimplementedLuceneServerServer) DeleteAll(context.Context, *DeleteAllDocumentsRequest) (*DeleteAllDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAll not implemented")
}
func (*UnimplementedLuceneServerServer) DeleteIndex(context.Context, *DeleteIndexRequest) (*DeleteIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIndex not implemented")
}
func (*UnimplementedLuceneServerServer) BuildSuggest(context.Context, *BuildSuggestRequest) (*BuildSuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildSuggest not implemented")
}
func (*UnimplementedLuceneServerServer) SuggestLookup(context.Context, *SuggestLookupRequest) (*SuggestLookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuggestLookup not implemented")
}
func (*UnimplementedLuceneServerServer) UpdateSuggest(context.Context, *BuildSuggestRequest) (*BuildSuggestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSuggest not implemented")
}
func (*UnimplementedLuceneServerServer) CreateSnapshot(context.Context, *CreateSnapshotRequest) (*CreateSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnapshot not implemented")
}
func (*UnimplementedLuceneServerServer) ReleaseSnapshot(context.Context, *ReleaseSnapshotRequest) (*ReleaseSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseSnapshot not implemented")
}
func (*UnimplementedLuceneServerServer) GetAllSnapshotIndexGen(context.Context, *GetAllSnapshotGenRequest) (*GetAllSnapshotGenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSnapshotIndexGen not implemented")
}
func (*UnimplementedLuceneServerServer) BackupIndex(context.Context, *BackupIndexRequest) (*BackupIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupIndex not implemented")
}
func (*UnimplementedLuceneServerServer) DeleteIndexBackup(context.Context, *DeleteIndexBackupRequest) (*DeleteIndexBackupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIndexBackup not implemented")
}
func (*UnimplementedLuceneServerServer) BackupWarmingQueries(context.Context, *BackupWarmingQueriesRequest) (*BackupWarmingQueriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupWarmingQueries not implemented")
}
func (*UnimplementedLuceneServerServer) State(context.Context, *StateRequest) (*StateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method State not implemented")
}
func (*UnimplementedLuceneServerServer) Status(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (*UnimplementedLuceneServerServer) Ready(context.Context, *ReadyCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ready not implemented")
}
func (*UnimplementedLuceneServerServer) Metrics(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metrics not implemented")
}
func (*UnimplementedLuceneServerServer) Indices(context.Context, *IndicesRequest) (*IndicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Indices not implemented")
}
func (*UnimplementedLuceneServerServer) ForceMerge(context.Context, *ForceMergeRequest) (*ForceMergeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceMerge not implemented")
}
func (*UnimplementedLuceneServerServer) ForceMergeDeletes(context.Context, *ForceMergeDeletesRequest) (*ForceMergeDeletesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceMergeDeletes not implemented")
}
func (*UnimplementedLuceneServerServer) Custom(context.Context, *CustomRequest) (*CustomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Custom not implemented")
}

func RegisterLuceneServerServer(s *grpc.Server, srv LuceneServerServer) {
	s.RegisterService(&_LuceneServer_serviceDesc, srv)
}

func _LuceneServer_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/CreateIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).CreateIndex(ctx, req.(*CreateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_LiveSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).LiveSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/LiveSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).LiveSettings(ctx, req.(*LiveSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_LiveSettingsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveSettingsV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).LiveSettingsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/LiveSettingsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).LiveSettingsV2(ctx, req.(*LiveSettingsV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_RegisterFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).RegisterFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/RegisterFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).RegisterFields(ctx, req.(*FieldDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_UpdateFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FieldDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).UpdateFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/UpdateFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).UpdateFields(ctx, req.(*FieldDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Settings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Settings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Settings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Settings(ctx, req.(*SettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_SettingsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingsV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).SettingsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/SettingsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).SettingsV2(ctx, req.(*SettingsV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_StartIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).StartIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/StartIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).StartIndex(ctx, req.(*StartIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_StartIndexV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartIndexV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).StartIndexV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/StartIndexV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).StartIndexV2(ctx, req.(*StartIndexV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_StopIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).StopIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/StopIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).StopIndex(ctx, req.(*StopIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_ReloadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).ReloadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/ReloadState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).ReloadState(ctx, req.(*ReloadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_AddDocuments_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LuceneServerServer).AddDocuments(&luceneServerAddDocumentsServer{stream})
}

type LuceneServer_AddDocumentsServer interface {
	SendAndClose(*AddDocumentResponse) error
	Recv() (*AddDocumentRequest, error)
	grpc.ServerStream
}

type luceneServerAddDocumentsServer struct {
	grpc.ServerStream
}

func (x *luceneServerAddDocumentsServer) SendAndClose(m *AddDocumentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *luceneServerAddDocumentsServer) Recv() (*AddDocumentRequest, error) {
	m := new(AddDocumentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LuceneServer_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Stats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_SearchV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).SearchV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/SearchV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).SearchV2(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Delete(ctx, req.(*AddDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_DeleteByQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).DeleteByQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/DeleteByQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).DeleteByQuery(ctx, req.(*DeleteByQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_DeleteAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).DeleteAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/DeleteAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).DeleteAll(ctx, req.(*DeleteAllDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_DeleteIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).DeleteIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/DeleteIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).DeleteIndex(ctx, req.(*DeleteIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_BuildSuggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildSuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).BuildSuggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/BuildSuggest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).BuildSuggest(ctx, req.(*BuildSuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_SuggestLookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuggestLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).SuggestLookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/SuggestLookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).SuggestLookup(ctx, req.(*SuggestLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_UpdateSuggest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildSuggestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).UpdateSuggest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/UpdateSuggest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).UpdateSuggest(ctx, req.(*BuildSuggestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_CreateSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).CreateSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/CreateSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).CreateSnapshot(ctx, req.(*CreateSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_ReleaseSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).ReleaseSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/ReleaseSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).ReleaseSnapshot(ctx, req.(*ReleaseSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_GetAllSnapshotIndexGen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSnapshotGenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).GetAllSnapshotIndexGen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/GetAllSnapshotIndexGen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).GetAllSnapshotIndexGen(ctx, req.(*GetAllSnapshotGenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_BackupIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).BackupIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/BackupIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).BackupIndex(ctx, req.(*BackupIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_DeleteIndexBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIndexBackupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).DeleteIndexBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/DeleteIndexBackup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).DeleteIndexBackup(ctx, req.(*DeleteIndexBackupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_BackupWarmingQueries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupWarmingQueriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).BackupWarmingQueries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/BackupWarmingQueries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).BackupWarmingQueries(ctx, req.(*BackupWarmingQueriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/State",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).State(ctx, req.(*StateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Status(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Ready",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Ready(ctx, req.(*ReadyCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Metrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Metrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Metrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Metrics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Indices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Indices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Indices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Indices(ctx, req.(*IndicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_ForceMerge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceMergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).ForceMerge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/ForceMerge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).ForceMerge(ctx, req.(*ForceMergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_ForceMergeDeletes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceMergeDeletesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).ForceMergeDeletes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/ForceMergeDeletes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).ForceMergeDeletes(ctx, req.(*ForceMergeDeletesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LuceneServer_Custom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LuceneServerServer).Custom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.LuceneServer/Custom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LuceneServerServer).Custom(ctx, req.(*CustomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LuceneServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luceneserver.LuceneServer",
	HandlerType: (*LuceneServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createIndex",
			Handler:    _LuceneServer_CreateIndex_Handler,
		},
		{
			MethodName: "liveSettings",
			Handler:    _LuceneServer_LiveSettings_Handler,
		},
		{
			MethodName: "liveSettingsV2",
			Handler:    _LuceneServer_LiveSettingsV2_Handler,
		},
		{
			MethodName: "registerFields",
			Handler:    _LuceneServer_RegisterFields_Handler,
		},
		{
			MethodName: "updateFields",
			Handler:    _LuceneServer_UpdateFields_Handler,
		},
		{
			MethodName: "settings",
			Handler:    _LuceneServer_Settings_Handler,
		},
		{
			MethodName: "settingsV2",
			Handler:    _LuceneServer_SettingsV2_Handler,
		},
		{
			MethodName: "startIndex",
			Handler:    _LuceneServer_StartIndex_Handler,
		},
		{
			MethodName: "startIndexV2",
			Handler:    _LuceneServer_StartIndexV2_Handler,
		},
		{
			MethodName: "stopIndex",
			Handler:    _LuceneServer_StopIndex_Handler,
		},
		{
			MethodName: "reloadState",
			Handler:    _LuceneServer_ReloadState_Handler,
		},
		{
			MethodName: "refresh",
			Handler:    _LuceneServer_Refresh_Handler,
		},
		{
			MethodName: "commit",
			Handler:    _LuceneServer_Commit_Handler,
		},
		{
			MethodName: "stats",
			Handler:    _LuceneServer_Stats_Handler,
		},
		{
			MethodName: "search",
			Handler:    _LuceneServer_Search_Handler,
		},
		{
			MethodName: "searchV2",
			Handler:    _LuceneServer_SearchV2_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _LuceneServer_Delete_Handler,
		},
		{
			MethodName: "deleteByQuery",
			Handler:    _LuceneServer_DeleteByQuery_Handler,
		},
		{
			MethodName: "deleteAll",
			Handler:    _LuceneServer_DeleteAll_Handler,
		},
		{
			MethodName: "deleteIndex",
			Handler:    _LuceneServer_DeleteIndex_Handler,
		},
		{
			MethodName: "buildSuggest",
			Handler:    _LuceneServer_BuildSuggest_Handler,
		},
		{
			MethodName: "suggestLookup",
			Handler:    _LuceneServer_SuggestLookup_Handler,
		},
		{
			MethodName: "updateSuggest",
			Handler:    _LuceneServer_UpdateSuggest_Handler,
		},
		{
			MethodName: "createSnapshot",
			Handler:    _LuceneServer_CreateSnapshot_Handler,
		},
		{
			MethodName: "releaseSnapshot",
			Handler:    _LuceneServer_ReleaseSnapshot_Handler,
		},
		{
			MethodName: "getAllSnapshotIndexGen",
			Handler:    _LuceneServer_GetAllSnapshotIndexGen_Handler,
		},
		{
			MethodName: "backupIndex",
			Handler:    _LuceneServer_BackupIndex_Handler,
		},
		{
			MethodName: "deleteIndexBackup",
			Handler:    _LuceneServer_DeleteIndexBackup_Handler,
		},
		{
			MethodName: "backupWarmingQueries",
			Handler:    _LuceneServer_BackupWarmingQueries_Handler,
		},
		{
			MethodName: "state",
			Handler:    _LuceneServer_State_Handler,
		},
		{
			MethodName: "status",
			Handler:    _LuceneServer_Status_Handler,
		},
		{
			MethodName: "ready",
			Handler:    _LuceneServer_Ready_Handler,
		},
		{
			MethodName: "metrics",
			Handler:    _LuceneServer_Metrics_Handler,
		},
		{
			MethodName: "indices",
			Handler:    _LuceneServer_Indices_Handler,
		},
		{
			MethodName: "forceMerge",
			Handler:    _LuceneServer_ForceMerge_Handler,
		},
		{
			MethodName: "forceMergeDeletes",
			Handler:    _LuceneServer_ForceMergeDeletes_Handler,
		},
		{
			MethodName: "custom",
			Handler:    _LuceneServer_Custom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "addDocuments",
			Handler:       _LuceneServer_AddDocuments_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "yelp/nrtsearch/luceneserver.proto",
}

// ReplicationServerClient is the client API for ReplicationServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReplicationServerClient interface {
	// Issued by replica on primary node when it comes up
	AddReplicas(ctx context.Context, in *AddReplicaRequest, opts ...grpc.CallOption) (*AddReplicaResponse, error)
	// Issued by replica to receive CopyState from primary
	RecvCopyState(ctx context.Context, in *CopyStateRequest, opts ...grpc.CallOption) (*CopyState, error)
	// Send a file as a stream in chunks
	SendRawFile(ctx context.Context, opts ...grpc.CallOption) (ReplicationServer_SendRawFileClient, error)
	// Receives a file as a stream in chunks. Typically issued by replica on primary
	RecvRawFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (ReplicationServer_RecvRawFileClient, error)
	RecvRawFileV2(ctx context.Context, opts ...grpc.CallOption) (ReplicationServer_RecvRawFileV2Client, error)
	// Issued by primary on replica to inform it to start copying files either pre-warming (new merged segments) or when replica comes up first time
	CopyFiles(ctx context.Context, in *CopyFiles, opts ...grpc.CallOption) (ReplicationServer_CopyFilesClient, error)
	// Invoked externally to replica, to notify it that a new NRT point was just created on the primary
	NewNRTPoint(ctx context.Context, in *NewNRTPoint, opts ...grpc.CallOption) (*TransferStatus, error)
	// * Invoked externally to primary, to make all recent index operations searchable on the primary and, once copying is done, on the replicas
	WriteNRTPoint(ctx context.Context, in *IndexName, opts ...grpc.CallOption) (*SearcherVersion, error)
	// * Invoked externally to replica, to get the current Searcher version on replica.
	GetCurrentSearcherVersion(ctx context.Context, in *IndexName, opts ...grpc.CallOption) (*SearcherVersion, error)
	// * Invoked externally on primary to find the list of replica nodes this node is connected to for binary replication per index
	GetConnectedNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
}

type replicationServerClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicationServerClient(cc grpc.ClientConnInterface) ReplicationServerClient {
	return &replicationServerClient{cc}
}

func (c *replicationServerClient) AddReplicas(ctx context.Context, in *AddReplicaRequest, opts ...grpc.CallOption) (*AddReplicaResponse, error) {
	out := new(AddReplicaResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/addReplicas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServerClient) RecvCopyState(ctx context.Context, in *CopyStateRequest, opts ...grpc.CallOption) (*CopyState, error) {
	out := new(CopyState)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/recvCopyState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServerClient) SendRawFile(ctx context.Context, opts ...grpc.CallOption) (ReplicationServer_SendRawFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReplicationServer_serviceDesc.Streams[0], "/luceneserver.ReplicationServer/sendRawFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationServerSendRawFileClient{stream}
	return x, nil
}

type ReplicationServer_SendRawFileClient interface {
	Send(*RawFileChunk) error
	CloseAndRecv() (*TransferStatus, error)
	grpc.ClientStream
}

type replicationServerSendRawFileClient struct {
	grpc.ClientStream
}

func (x *replicationServerSendRawFileClient) Send(m *RawFileChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *replicationServerSendRawFileClient) CloseAndRecv() (*TransferStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TransferStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationServerClient) RecvRawFile(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (ReplicationServer_RecvRawFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReplicationServer_serviceDesc.Streams[1], "/luceneserver.ReplicationServer/recvRawFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationServerRecvRawFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplicationServer_RecvRawFileClient interface {
	Recv() (*RawFileChunk, error)
	grpc.ClientStream
}

type replicationServerRecvRawFileClient struct {
	grpc.ClientStream
}

func (x *replicationServerRecvRawFileClient) Recv() (*RawFileChunk, error) {
	m := new(RawFileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationServerClient) RecvRawFileV2(ctx context.Context, opts ...grpc.CallOption) (ReplicationServer_RecvRawFileV2Client, error) {
	stream, err := c.cc.NewStream(ctx, &_ReplicationServer_serviceDesc.Streams[2], "/luceneserver.ReplicationServer/recvRawFileV2", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationServerRecvRawFileV2Client{stream}
	return x, nil
}

type ReplicationServer_RecvRawFileV2Client interface {
	Send(*FileInfo) error
	Recv() (*RawFileChunk, error)
	grpc.ClientStream
}

type replicationServerRecvRawFileV2Client struct {
	grpc.ClientStream
}

func (x *replicationServerRecvRawFileV2Client) Send(m *FileInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *replicationServerRecvRawFileV2Client) Recv() (*RawFileChunk, error) {
	m := new(RawFileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationServerClient) CopyFiles(ctx context.Context, in *CopyFiles, opts ...grpc.CallOption) (ReplicationServer_CopyFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ReplicationServer_serviceDesc.Streams[3], "/luceneserver.ReplicationServer/copyFiles", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationServerCopyFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplicationServer_CopyFilesClient interface {
	Recv() (*TransferStatus, error)
	grpc.ClientStream
}

type replicationServerCopyFilesClient struct {
	grpc.ClientStream
}

func (x *replicationServerCopyFilesClient) Recv() (*TransferStatus, error) {
	m := new(TransferStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationServerClient) NewNRTPoint(ctx context.Context, in *NewNRTPoint, opts ...grpc.CallOption) (*TransferStatus, error) {
	out := new(TransferStatus)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/newNRTPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServerClient) WriteNRTPoint(ctx context.Context, in *IndexName, opts ...grpc.CallOption) (*SearcherVersion, error) {
	out := new(SearcherVersion)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/writeNRTPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServerClient) GetCurrentSearcherVersion(ctx context.Context, in *IndexName, opts ...grpc.CallOption) (*SearcherVersion, error) {
	out := new(SearcherVersion)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/getCurrentSearcherVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationServerClient) GetConnectedNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, "/luceneserver.ReplicationServer/getConnectedNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReplicationServerServer is the server API for ReplicationServer service.
type ReplicationServerServer interface {
	// Issued by replica on primary node when it comes up
	AddReplicas(context.Context, *AddReplicaRequest) (*AddReplicaResponse, error)
	// Issued by replica to receive CopyState from primary
	RecvCopyState(context.Context, *CopyStateRequest) (*CopyState, error)
	// Send a file as a stream in chunks
	SendRawFile(ReplicationServer_SendRawFileServer) error
	// Receives a file as a stream in chunks. Typically issued by replica on primary
	RecvRawFile(*FileInfo, ReplicationServer_RecvRawFileServer) error
	RecvRawFileV2(ReplicationServer_RecvRawFileV2Server) error
	// Issued by primary on replica to inform it to start copying files either pre-warming (new merged segments) or when replica comes up first time
	CopyFiles(*CopyFiles, ReplicationServer_CopyFilesServer) error
	// Invoked externally to replica, to notify it that a new NRT point was just created on the primary
	NewNRTPoint(context.Context, *NewNRTPoint) (*TransferStatus, error)
	// * Invoked externally to primary, to make all recent index operations searchable on the primary and, once copying is done, on the replicas
	WriteNRTPoint(context.Context, *IndexName) (*SearcherVersion, error)
	// * Invoked externally to replica, to get the current Searcher version on replica.
	GetCurrentSearcherVersion(context.Context, *IndexName) (*SearcherVersion, error)
	// * Invoked externally on primary to find the list of replica nodes this node is connected to for binary replication per index
	GetConnectedNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
}

// UnimplementedReplicationServerServer can be embedded to have forward compatible implementations.
type UnimplementedReplicationServerServer struct {
}

func (*UnimplementedReplicationServerServer) AddReplicas(context.Context, *AddReplicaRequest) (*AddReplicaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReplicas not implemented")
}
func (*UnimplementedReplicationServerServer) RecvCopyState(context.Context, *CopyStateRequest) (*CopyState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvCopyState not implemented")
}
func (*UnimplementedReplicationServerServer) SendRawFile(ReplicationServer_SendRawFileServer) error {
	return status.Errorf(codes.Unimplemented, "method SendRawFile not implemented")
}
func (*UnimplementedReplicationServerServer) RecvRawFile(*FileInfo, ReplicationServer_RecvRawFileServer) error {
	return status.Errorf(codes.Unimplemented, "method RecvRawFile not implemented")
}
func (*UnimplementedReplicationServerServer) RecvRawFileV2(ReplicationServer_RecvRawFileV2Server) error {
	return status.Errorf(codes.Unimplemented, "method RecvRawFileV2 not implemented")
}
func (*UnimplementedReplicationServerServer) CopyFiles(*CopyFiles, ReplicationServer_CopyFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method CopyFiles not implemented")
}
func (*UnimplementedReplicationServerServer) NewNRTPoint(context.Context, *NewNRTPoint) (*TransferStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewNRTPoint not implemented")
}
func (*UnimplementedReplicationServerServer) WriteNRTPoint(context.Context, *IndexName) (*SearcherVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteNRTPoint not implemented")
}
func (*UnimplementedReplicationServerServer) GetCurrentSearcherVersion(context.Context, *IndexName) (*SearcherVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentSearcherVersion not implemented")
}
func (*UnimplementedReplicationServerServer) GetConnectedNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectedNodes not implemented")
}

func RegisterReplicationServerServer(s *grpc.Server, srv ReplicationServerServer) {
	s.RegisterService(&_ReplicationServer_serviceDesc, srv)
}

func _ReplicationServer_AddReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).AddReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/AddReplicas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).AddReplicas(ctx, req.(*AddReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationServer_RecvCopyState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).RecvCopyState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/RecvCopyState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).RecvCopyState(ctx, req.(*CopyStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationServer_SendRawFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReplicationServerServer).SendRawFile(&replicationServerSendRawFileServer{stream})
}

type ReplicationServer_SendRawFileServer interface {
	SendAndClose(*TransferStatus) error
	Recv() (*RawFileChunk, error)
	grpc.ServerStream
}

type replicationServerSendRawFileServer struct {
	grpc.ServerStream
}

func (x *replicationServerSendRawFileServer) SendAndClose(m *TransferStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *replicationServerSendRawFileServer) Recv() (*RawFileChunk, error) {
	m := new(RawFileChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ReplicationServer_RecvRawFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplicationServerServer).RecvRawFile(m, &replicationServerRecvRawFileServer{stream})
}

type ReplicationServer_RecvRawFileServer interface {
	Send(*RawFileChunk) error
	grpc.ServerStream
}

type replicationServerRecvRawFileServer struct {
	grpc.ServerStream
}

func (x *replicationServerRecvRawFileServer) Send(m *RawFileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplicationServer_RecvRawFileV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReplicationServerServer).RecvRawFileV2(&replicationServerRecvRawFileV2Server{stream})
}

type ReplicationServer_RecvRawFileV2Server interface {
	Send(*RawFileChunk) error
	Recv() (*FileInfo, error)
	grpc.ServerStream
}

type replicationServerRecvRawFileV2Server struct {
	grpc.ServerStream
}

func (x *replicationServerRecvRawFileV2Server) Send(m *RawFileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *replicationServerRecvRawFileV2Server) Recv() (*FileInfo, error) {
	m := new(FileInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ReplicationServer_CopyFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CopyFiles)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplicationServerServer).CopyFiles(m, &replicationServerCopyFilesServer{stream})
}

type ReplicationServer_CopyFilesServer interface {
	Send(*TransferStatus) error
	grpc.ServerStream
}

type replicationServerCopyFilesServer struct {
	grpc.ServerStream
}

func (x *replicationServerCopyFilesServer) Send(m *TransferStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplicationServer_NewNRTPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewNRTPoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).NewNRTPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/NewNRTPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).NewNRTPoint(ctx, req.(*NewNRTPoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationServer_WriteNRTPoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).WriteNRTPoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/WriteNRTPoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).WriteNRTPoint(ctx, req.(*IndexName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationServer_GetCurrentSearcherVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).GetCurrentSearcherVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/GetCurrentSearcherVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).GetCurrentSearcherVersion(ctx, req.(*IndexName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationServer_GetConnectedNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationServerServer).GetConnectedNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/luceneserver.ReplicationServer/GetConnectedNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationServerServer).GetConnectedNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReplicationServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "luceneserver.ReplicationServer",
	HandlerType: (*ReplicationServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addReplicas",
			Handler:    _ReplicationServer_AddReplicas_Handler,
		},
		{
			MethodName: "recvCopyState",
			Handler:    _ReplicationServer_RecvCopyState_Handler,
		},
		{
			MethodName: "newNRTPoint",
			Handler:    _ReplicationServer_NewNRTPoint_Handler,
		},
		{
			MethodName: "writeNRTPoint",
			Handler:    _ReplicationServer_WriteNRTPoint_Handler,
		},
		{
			MethodName: "getCurrentSearcherVersion",
			Handler:    _ReplicationServer_GetCurrentSearcherVersion_Handler,
		},
		{
			MethodName: "getConnectedNodes",
			Handler:    _ReplicationServer_GetConnectedNodes_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "sendRawFile",
			Handler:       _ReplicationServer_SendRawFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "recvRawFile",
			Handler:       _ReplicationServer_RecvRawFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "recvRawFileV2",
			Handler:       _ReplicationServer_RecvRawFileV2_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "copyFiles",
			Handler:       _ReplicationServer_CopyFiles_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "yelp/nrtsearch/luceneserver.proto",
}
