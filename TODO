*Missing Functionality*
- Support more analyzers (i.e. other than StandardAnalyzer), including constructing custom ones using TokenStreams
- Support custom Similarity.
- support live documentation from gRPC? might need to support gRPC-web
- add suggest functionality
- remove boost option from RegisterHandler since individual fields can no longer setBoost while indexing:https://issues.apache.org/jira/browse/LUCENE-6819
- support parent-child join docs (both indexing and searching time)
- Snapshot/Restore

*Potential bugs/issues*
- Call commit after registerFields? Else the Field states is not durable
- Separate out committing state (for registerFields, settings, liveSettings) from being done only upon committing an index

*Documentation*
- Add docs for setting up more than one node and how to wire them together
- Document all possible settings (valid for lucene_server_configuration.yaml or "lucene_server_default_configuration.yaml") and their respective default values 
- Provide accessible formatted API documentation based on 
  - https://github.com/Yelp/nrtsearch/issues/16
  - https://github.com/Yelp/nrtsearch/pull/283
  and strike all references to protoc-gen-doc because it's no longer used
- Add docs about how to configure remote storage and backup/restore
- Add docs about how to configure persistent storage
- Add docs how nrtsearch can be monitored

*Enhancements*
- Support highlights at search time
- Support facets at search time
  - hierarchy is broken right now (We need to support List<<List<String>> within MultiValueFields in proto file


- Support blockJoinQuery parent-child
- Specify searcher in search request
  - from a previous snapshot (during indexing we have option to keep previous states of the indexes)
  - from a previous index gen e.g. before calling addDocument (which returns indexGen) at a point in time
  - the latest searcher

- Option to applyDeletes on searches
  - do we want SearchAndTaxonomyReferenceManager to ignore recently deleted documents while they are still actually
  on disk (somewhat faster?) or do we not want to score on the recently deleted ones since we have access to this information in `Bits`

- Make per shard have limit of 50000000 docs? i.e. "writableShard.writer.maxDoc() > 50000000 then shardState.addShard(ord+1)?"


*Performance*
- support searching over segments in parallel: https://issues.apache.org/jira/browse/LUCENE-6294. See: `TestTopDocsCollector.doConcurrentSearchWithThreshold`
which creates a CollectorManager


*Replication Related Functionality*
- Primary needs an endpoint to update the currently known replicas (e.g. if a replica goes down, it needs to be removed)
- Refresh related:
  - currently "refresh" on primary will create a newNRTPoint post flushing all recently indexed docs to primary and sendNewNRT to replicas
  which will in turn copy files from primary
- TODO: Outside of this system
  - Need to keep state the primaryGen (a long) along with host:port of current primary and replicas
  - Each time a primary starts we need to increment the primaryGen
  - Each time a replica crashes, primary needs to know the current set of active replicas
  - Each time a primary crashes we need to pick a new replica. Probably the one with newestNRT point.

