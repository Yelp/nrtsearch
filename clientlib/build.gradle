plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier gradle versions
    id 'com.google.protobuf' version '0.8.12'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
    // Publish clientlib to maven central
    id 'maven-publish'
    id 'signing'
    id "com.diffplug.gradle.spotless"
}

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/repos/central/data/"
    }
    mavenLocal()
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
startScripts.enabled = false

// groupId, artifactId and version for the generated pom
def _artifactId = 'clientlib'

// Dependency versions
def grpcVersion = '1.30.0' // CURRENT_GRPC_VERSION
def protobufVersion = '3.11.1'
def protocVersion = protobufVersion

dependencies {
    //grpc deps
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-okhttp:${grpcVersion}"
    implementation "javax.annotation:javax.annotation-api:1.2"

    // examples/advanced need this for JsonFormat
    compile "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

    //test deps
    compile "io.grpc:grpc-testing:${grpcVersion}"
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'clientlib/build/generated/source/proto/main/grpc'
            srcDirs 'clientlib/build/generated/source/proto/main/java'
        }
    }
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

test {
    finalizedBy 'spotlessJavaCheck'
}

task javadocs(type: Javadoc) {
    source = sourceSets.main.java.srcDirs
}

task javadocsJar(type: Jar) {
    classifier('javadoc')
    from javadocs.destinationDir
}

task sourcesJar(type: Jar) {
    classifier('sources')
    from sourceSets.main.java.srcDirs
}

signing {
    if (project.hasProperty("signing.keyId")) {
        sign publishing.publications
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = _artifactId
            version = project.version
            artifact tasks.jar
            artifact tasks.javadocsJar
            artifact tasks.sourcesJar
            pom {
                name = 'nrtSearch Clientlib'
                description = 'GRPC Clientlib for nrtSearch'
                url = 'https://github.com/Yelp/nrtsearch'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    // Adding all developers in alphabetical order
                    developer {
                        id = 'alok'
                        name = 'Alok Mysore'
                        email = 'alok@yelp.com'
                    }
                    developer {
                        id = 'karthik'
                        name = 'Karthik Alle'
                        email = 'karthik@yelp.com'
                    }
                    developer {
                        id = 'sarthakn'
                        name = 'Sarthak Nandi'
                        email = 'sarthakn@yelp.com'
                    }
                    developer {
                        id = 'umesh'
                        name = 'Umesh Dangat'
                        email = 'umesh@yelp.com'
                    }
                }

                // Links to nrtSearch github
                scm {
                    connection = 'scm:git:git://github.com/Yelp/nrtsearch.git'
                    developerConnection = 'scm:git:ssh://github.com/Yelp/nrtsearch.git'
                    url = 'https://github.com/Yelp/nrtsearch'
                }
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
    repositories {
        mavenCentral {
            if (project.hasProperty("signing.keyId")) {
                credentials {
                    // The credentials are picked up from your gradle.properties file
                    username ossrhUsername
                    password ossrhPassword
                }
            }

            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

spotless {
    java {
        licenseHeaderFile '../license_header'
        removeUnusedImports()
        endWithNewline()
        trimTrailingWhitespace()
        googleJavaFormat()
    }
}
