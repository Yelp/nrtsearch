/* Description of message types for search request and response */
syntax = "proto3";

import "google/protobuf/struct.proto";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";
import "google/type/latlng.proto";
import "yelp/nrtsearch/analysis.proto";

option java_multiple_files = true;
option java_package = "com.yelp.nrtsearch.server.grpc";
option java_outer_classname = "SearchResponseProto";
option objc_class_prefix = "HLW";

option go_package = "github.com/Yelp/nrtsearch";

package luceneserver;

// A clause in a BooleanQuery.
message BooleanClause {
    // Defines how clauses may occur in matching documents. This will always be SHOULD by default.
    enum Occur {
        SHOULD = 0;
        MUST = 1;
        FILTER = 2;
        MUST_NOT = 3;
    }

    Query query = 1; // The Query for the clause.
    Occur occur = 2; // Specifies how this clause must occur in a matching document. SHOULD by default.
}

enum MatchOperator {
    SHOULD = 0;
    MUST = 1;
}

// Method used to rewrite a MultiTermQuery
enum RewriteMethod {
    // Uses the CONSTANT_SCORE_BOOLEAN method for fewer matching terms. Otherwise, this method finds all matching terms in sequence and returns matching documents using a bit set.
    CONSTANT_SCORE = 0;
    // This method changes the original query to a BooleanQuery, containing a SHOULD clause and TermQuery for each matching term.
    CONSTANT_SCORE_BOOLEAN = 1;
    // This method changes the original query to a BooleanQuery, containing a SHOULD clause and TermQuery for each matching term. Calculates the relevance score for each matching document.
    SCORING_BOOLEAN = 2;
    // This method changes the original query to a BooleanQuery, containing a SHOULD clause and TermQuery for each matching term. Calculates a relevance score for each matching document as if all terms had the same frequency, the maximum frequency of all matching terms. The final BooleanQuery query only includes Term queries for the top N (specified separately) scoring terms.
    TOP_TERMS_BLENDED_FREQS = 3;
    // This method changes the original query to a BooleanQuery, containing a SHOULD clause and TermQuery for each matching term. Assigns each matching document a relevance score equal to the boost parameter. The final BooleanQuery query only includes Term queries for the top N (specified separately) terms.
    TOP_TERMS_BOOST = 4;
    // This method changes the original query to a BooleanQuery, containing a SHOULD clause and TermQuery for each matching term. Calculates a relevance score for each matching document. The final BooleanQuery query only includes Term queries for the top N (specified separately) scoring terms.
    TOP_TERMS = 5;
}

message FuzzyParams {
    int32 maxEdits = 1; // The maximum allowed Levenshtein Edit Distance (or number of edits). Possible values are 0, 1 and 2.
    int32 prefixLength = 2; // Length of common (non-fuzzy) prefix
    int32 maxExpansions = 3; // The maximum number of terms to match.
    bool transpositions = 4; // True if transpositions should be treated as a primitive edit operation. If this is false (default), comparisons will implement the classic Levenshtein algorithm.
}

// A query that matches documents using boolean combinations of other queries.
message BooleanQuery {
    repeated BooleanClause clauses = 1; // Clauses for a boolean query.
    int32 minimumNumberShouldMatch = 2; // Minimum number of optional clauses that must match.
}

// A Query that matches documents containing a particular sequence of terms.
message PhraseQuery {
    /* Edit distance between respective positions of terms as defined in this PhraseQuery and the positions
       of terms in a document.
    */
    int32 slop = 1;
    string field = 2; // The field in the index that this query applies to.
    repeated string terms = 3; // Terms to match.
}

// A query that matches documents that contain a specific prefix in a provided field.
message PrefixQuery {
    // Document field name.
    string field = 1;
    // Prefix to search for.
    string prefix = 2;
    // Method used to rewrite the query.
    RewriteMethod rewrite = 3;
    // Specifies the size to use for the TOP_TERMS* rewrite methods.
    int32 rewriteTopTermsSize = 4;
}

// A query that wraps another query and uses custom scoring logic to compute the wrapped query's score.
message FunctionScoreQuery {
    Query query = 1; // Input query
    Script script = 2; // script definition to compute a custom document score
}

// A query that retrieves all documents with a positive score calculated by the script
message FunctionFilterQuery {
    Script script = 1; // script definition to compute a custom document score
}

//
message NestedQuery {
    enum ScoreMode {
        NONE = 0;
        AVG = 1;
        MAX = 2;
        MIN = 3;
        SUM = 4;
    }
    Query query = 1; // query for the child documents
    string path = 2; // field name of the nested
    ScoreMode scoreMode = 3; // how child documents score affects final score
}

// A query that matches documents containing a term.
message TermQuery {
    // Field in the document to query.
    string field = 1;

    oneof TermTypes {
        // TEXT FieldType term to search for.
        string textValue = 2;
        // INT FieldType term to search for.
        int32 intValue = 3;
        // LONG FieldType term to search for.
        int64 longValue = 4;
        // FLOAT FieldType term to search for.
        float floatValue = 5;
        // DOUBLE FieldType term to search for.
        double doubleValue = 6;
        // BOOLEAN FieldType term to search for.
        bool booleanValue = 7;
    }
}

// Specialization for a disjunction over many terms that behaves like a ConstantScoreQuery over a BooleanQuery containing only BooleanClause.Occur.SHOULD clauses. Only ONE of the types of terms needs to be provided - the one that matches the type of the field.
message TermInSetQuery {
    // Field in the document to query.
    string field = 1;

    message TextTerms {
        repeated string terms = 1;
    }
    message IntTerms {
        repeated int32 terms = 1;
    }
    message LongTerms {
        repeated int64 terms = 1;
    }
    message FloatTerms {
        repeated float terms = 1;
    }
    message DoubleTerms {
        repeated double terms = 1;
    }

    oneof TermTypes {
        // Text terms to search for.
        TextTerms textTerms = 2;
        // Int terms to search for.
        IntTerms intTerms = 3;
        // Long terms to search for.
        LongTerms longTerms = 4;
        // Float terms to search for.
        FloatTerms floatTerms = 5;
        // Double terms to search for.
        DoubleTerms doubleTerms = 6;
    }
}

// A query that generates the union of documents produced by its subqueries, and that scores each document with the
// maximum score for that document as produced by any subquery, plus a tie breaking increment for any additional matching subqueries.
message DisjunctionMaxQuery {
    repeated Query disjuncts = 1; // A list of all the disjuncts to add
    float tieBreakerMultiplier = 2; // The score of each non-maximum disjunct for a document is multiplied by this weight and added into the final score.
}

// A query that analyzes the text before finding matching documents. The tokens resulting from the analysis are combined using term queries in boolean clauses.
message MatchQuery {
    string field = 1; // Field in the document to query.
    string query = 2; // The text to query with.
    MatchOperator operator = 3; // Boolean logic used to interpret text in the query. The possible values are SHOULD (default) and MUST.
    int32 minimumNumberShouldMatch = 4; // Minimum number of optional clauses that must match.
    Analyzer analyzer = 5; // Analyzer used to analyze the query. If not provided, the default search analyzer for the field would be used instead.
    FuzzyParams fuzzyParams = 6; // Parameters to set the fuzziness of the query
}

// A query that analyzes the text before finding matching documents. The tokens resulting from the analysis are combined into a PhraseQuery.
message MatchPhraseQuery {
    string field = 1; // Field in the document to query.
    string query = 2; // The text to query with.
    int32 slop = 3; // Edit distance between respective positions of tokens generated by analyzing this query and the positions of terms in a document.
    Analyzer analyzer = 4; // Analyzer used to analyze the query. If not provided, the default search analyzer for the field would be used instead.
}

// A query that matches documents containing terms in the same order as those in the analyzed query string. The final analyzed token is treated as a prefix
message MatchPhrasePrefixQuery {
    // Field in the document to query.
    string field = 1;
    // The text to query with.
    string query = 2;
    // Edit distance between respective positions of tokens generated by analyzing this query and the positions of terms in a document.
    int32 slop = 3;
    // Analyzer used to analyze the query. If not provided, the default search analyzer for the field would be used instead.
    Analyzer analyzer = 4;
    // Maximum number of terms to which the last provided term of the query value will expand. Defaults to 50.
    int32 max_expansions = 5;
}

// A query that creates a match query for each field provided and wraps all the match queries in a disjunction max query.
message MultiMatchQuery {
    // Type defining the execution behavior of the match.
    enum MatchType {
        // Finds documents which match any field, but uses the _score from the best field.
        BEST_FIELDS = 0;
        // Runs a MatchPhrasePrefixQuery query on each field and uses the _score from the best field.
        PHRASE_PREFIX = 1;
        // Finds documents that match across multiple fields, as if they were a single field.
        CROSS_FIELDS = 2;
    }

    repeated string fields = 1; // Fields in the document to query.
    string query = 2; // The text to query with.
    map<string, float> fieldBoosts = 3; // Boosts for each field, if any.
    MatchOperator operator = 4; // Boolean logic used to interpret text in the query. The possible values are SHOULD (default) and MUST.
    int32 minimumNumberShouldMatch = 5; // Minimum number of optional clauses that must match.
    Analyzer analyzer = 6; // Analyzer used to analyze the query. If not provided, the default search analyzer for the field would be used instead.
    FuzzyParams fuzzyParams = 7; // Parameters to set the fuzziness of the query
    float tieBreakerMultiplier = 8; // The score of each non-maximum match query disjunct for a document will be multiplied by this weight and added into the final score.
    // Type defining match behavior of query.
    MatchType type = 9;
    // Edit distance between respective positions of tokens generated by analyzing this query and the positions of terms in a document, applies to PHRASE_PREFIX type matching.
    int32 slop = 10;
    // Maximum number of terms to which the prefix token will expand when using PHRASE_PREFIX matching. Defaults to 50.
    int32 maxExpansions = 11;
}

// A query that matches documents with values within the specified range. The lower and upper values though provided as strings will be converted to the type of the field. This works with INT, LONG, FLOAT, DOUBLE and DATE_TIME field types.
message RangeQuery {
    string field = 1; // Field in the document to query
    string lower = 2; // Lower bound, inclusive by default
    string upper = 3; // Upper bound, inclusive by default
    bool lowerExclusive = 4; // Set true to make lower bound exclusive
    bool upperExclusive = 5; // Set true to make upper bound exclusive
}

// A query that matches documents with geopoint within the geo box.
message GeoBoundingBoxQuery {
    string field = 1; // Field in the document to query
    google.type.LatLng topLeft = 2; // top left corner of the geo box
    google.type.LatLng bottomRight = 3; // bottom right corner of the geo box
}

// A query that matches documents with geo point within the radius of target geo point
message GeoRadiusQuery {
    string field = 1; // Field in the document to query
    google.type.LatLng center = 2; // target center geo point to calculate distance
    string radius = 3; // distance radius  like "12 km". supports m, km and mi, default to m
}

// A query that matches documents with polygon that contains the geo point.
message GeoPointQuery {
    string field = 1; // Field in the document to query
    google.type.LatLng point = 2; // point used to query whether the polygon contains it.
}

// A query that matches documents which contain a value for a field.
message ExistsQuery {
    string field = 1; // Field in the document to query
}

enum CompletionQueryType {
    // PrefixCompletionQuery within ContextCompletionQuery
    PREFIX_QUERY = 0;
    // FuzzyCompletionQuery within ContextCompletionQuery
    FUZZY_QUERY = 1;
}

// A query used for suggest completion
message CompletionQuery {
    // Name of the field in the document to query, must be a SuggestField
    string field = 1;
    // Completion query type, used when constructing the lucene completion query
    CompletionQueryType queryType = 2;
    // Completion text to be used in completion query
    string text = 3;
    // List of contexts to filter by. Each result will have at least one of the contexts specified
    repeated string contexts = 4;
}

// A query to modify the score of documents with a given set of functions
message MultiFunctionScoreQuery {
    // Function to produce a weighted value
    message FilterFunction {
        // Apply function only to docs that pass this filter, match all if not specified
        Query filter = 1;
        // Weight to multiply with function score, 1.0 if not specified
        float weight = 2;
        // Function to produce score, will be 1.0 if none are set
        oneof Function {
            // Produce score with score script definition
            Script script = 3;
        }
    }

    // How to combine multiple function scores to produce a final function score
    enum FunctionScoreMode {
        // Multiply weighted function scores together
        SCORE_MODE_MULTIPLY = 0;
        // Add weighted function scores together
        SCORE_MODE_SUM = 1;
    }

    // How to combine final function score with query score
    enum BoostMode {
        // Multiply scores together
        BOOST_MODE_MULTIPLY = 0;
        // Add scores together
        BOOST_MODE_SUM = 1;
        // Ignore the query score, and use the function score only
        BOOST_MODE_REPLACE = 2;
    }

    // Main query to produce recalled docs and scores, which will be modified by the final function score
    Query query = 1;
    // Functions to produce final function score
    repeated FilterFunction functions = 2;
    // Method to combine functions scores
    FunctionScoreMode score_mode = 3;
    // Method to modify query document scores with final function score
    BoostMode boost_mode = 4;
    // Optional minimal score to match a document. By default, it's 0.
    float min_score = 5;
    // Determine minimal score is excluded or not. By default, it's false;
    bool min_excluded = 6;
}

// Query that produces a score of 1.0 (modifiable by query boost value) for documents that match the filter query.
message ConstantScoreQuery {
    // Query to determine matching documents
    Query filter = 1;
}

// Defines different types of QueryNodes.
enum QueryType {
    NONE = 0;
    BOOLEAN_QUERY = 1;
    PHRASE_QUERY = 2;
    FUNCTION_SCORE_QUERY = 3;
    TERM_QUERY = 4;
    TERM_IN_SET_QUERY = 5;
    DISJUNCTION_MAX = 6;
    MATCH = 7;
    MATCH_PHRASE = 8;
    MULTI_MATCH = 9;
    RANGE = 10;
    GEO_BOUNDING_BOX = 11;
    GEO_POINT = 12;
    NESTED = 13;
    EXISTS = 14;
    GEO_RADIUS = 15;
    COMPLETION = 16;
    MULTI_FUNCTION_SCORE_QUERY = 17;
    MATCH_PHRASE_PREFIX = 18;
    PREFIX = 19;
    CONSTANT_SCORE_QUERY = 20;
}

// Defines a full query consisting of a QueryNode which may be one of several types.
message Query {
    QueryType queryType = 1 [deprecated = true]; // no longer needed, type inferred from set QueryNode
    float boost = 2; // Boost values that are less than one will give less importance to this query compared to other ones while values that are greater than one will give more importance to the scores returned by this query. Boost value of zero will do nothing (default). Boost less than 0 is invalid.

    oneof QueryNode {
        BooleanQuery booleanQuery = 3;
        PhraseQuery phraseQuery = 4;
        FunctionScoreQuery functionScoreQuery = 5;
        TermQuery termQuery = 6;
        TermInSetQuery termInSetQuery = 7;
        DisjunctionMaxQuery disjunctionMaxQuery = 8;
        MatchQuery matchQuery = 9;
        MatchPhraseQuery matchPhraseQuery = 10;
        MultiMatchQuery multiMatchQuery = 11;
        RangeQuery rangeQuery = 12;
        GeoBoundingBoxQuery geoBoundingBoxQuery = 13;
        GeoPointQuery geoPointQuery = 14;
        NestedQuery nestedQuery = 15;
        ExistsQuery existsQuery = 16;
        GeoRadiusQuery geoRadiusQuery = 17;
        FunctionFilterQuery functionFilterQuery = 18;
        CompletionQuery completionQuery = 19;
        MultiFunctionScoreQuery multiFunctionScoreQuery = 20;
        MatchPhrasePrefixQuery matchPhrasePrefixQuery = 21;
        PrefixQuery prefixQuery = 22;
        ConstantScoreQuery constantScoreQuery = 23;
    }
}

message SearchRequest {
    string indexName = 1; //index to search against
    int32 startHit = 2; // Which hit to start from (for pagination); default: 0
    int32 topHits = 3; // How many top hits to retrieve; default: 10. It limits the hits returned, starting from index 0. For pagination: set it to startHit + window_size.
    /* Maximum number of seconds spent on each collection phase; note that for
     * multi-pass searches (e.g. query-time grouping), this timeout applies to each phase. */
    double timeoutSec = 4;
    repeated string retrieveFields = 5; //Which fields to highlight or retrieve.
    string queryText = 6; //Query text to parse using the specified QueryParser.
    repeated VirtualField virtualFields = 7; //Defines virtual fields (name'd dynamic expressions) for this query.
    Query query = 8; // Full query to execute using QueryNodes
    QuerySortField querySort = 9; //Sort hits by field (default is by relevance).
    oneof Searcher {
        int64 indexGen = 10; //Search a generation previously returned by an indexing operation such as #addDocument.  Use this to search a non-committed (near-real-time) view of the index.
        int64 version = 11; //Search a specific searcher version.  This is typically used by follow-on searches (e.g., user clicks next page, drills down, or changes sort, etc.) to get the same searcher used by the original search.
        string snapshot = 12; //Search a snapshot previously created with #createSnapshot
    }
    int32 totalHitsThreshold = 13; //By default we count hits accurately up to 1000. This makes sure that we don't spend most time on computing hit counts
    repeated Facet facets = 14; // Which facets to retrieve
    repeated FetchTask fetchTasks = 15; //Any custom tasks that should be performed on top documents after ranking
    bool disallowPartialResults = 16; //Should partial result be a failure condition. Applies when a search request times out. If false, the top documents ranking at the point of timeout are used and the request continues. Also, hitTimeout is set to true in the response.
    string queryNestedPath = 17; //nested path we want to query by if we want to query child documents.
    repeated Rescorer rescorers = 18; // Rescorers which are executed in-order after the first pass
    //If detailed request execution profiling should be included in the response
    bool profile = 19;
    //Check the search timeout condition after each collection of n documents in a segment. If 0, timeout is only checked on the segment boundary.
    int32 timeoutCheckEvery = 20;
    //Additional document collectors. Provides support for operations such as aggregation.
    map<string, Collector> collectors = 21;
    //Stop document collection in search phase after this many documents, 0 for unlimited.
    int32 terminateAfter = 22;
    //Set gRPC compression codec to use for response message. If value is unset or invalid, falls back to uncompressed. Valid codecs: identity, gzip, lz4
    string responseCompression = 23;
    // Specify how to highlight matched text
    Highlight highlight = 24;
    // If Lucene explanation should be included in the response
    bool explain = 25;
    // Search nested object fields for each hit
    map<string, InnerHit> inner_hits = 26;
}

/* Inner Hit search request */
message InnerHit {
    // Nested path to search against assuming same index as the parent Query.
    string query_nested_path = 1;
    // Which hit to start from (for pagination); default: 0
    int32 start_hit = 2;
    // How many top hits to retrieve; default: 3. It limits the hits returned, starting from index 0. For pagination: set it to startHit + window_size.
    int32 top_hits = 3;
    // InnerHit query to query against the nested documents specified by queryNestedPath.
    Query inner_query = 4;
    // Fields to retrieve; Parent's fields except its id field are unavailable in the innerHit.
    repeated string retrieve_fields = 5;
    // Sort hits by field (default is by relevance).
    QuerySortField query_sort = 6;
    // Highlight the children documents.
    Highlight highlight = 7;
}

/* Virtual field used during search */
message VirtualField {
    Script script = 1; // Script defining this field's values.
    string name = 2; // Virtual field's name. Must be different from registered fields and any other virtual fields.
}

message Script {
    string lang = 1; // script language
    string source = 2; // script source

    // script parameter entry
    message ParamValue {
        oneof ParamValues {
            string textValue = 1;
            bool booleanValue = 2;
            int32 intValue = 3;
            int64 longValue = 4;
            float floatValue = 5;
            double doubleValue = 6;
            ParamNullValue nullValue = 7;
            ParamListValue listValue = 8;
            ParamStructValue structValue = 9;
        }
    }

    // null parameter value
    enum ParamNullValue {
        NULL_VALUE = 0;
    }

    // map parameter value
    message ParamStructValue {
        map<string, ParamValue> fields = 1;
    }

    // list parameter value
    message ParamListValue {
        repeated ParamValue values = 1;
    }

    map<string, ParamValue> params = 7; // parameters passed into script execution
}

message QuerySortField {
    bool doDocScores = 1; //Compute the doc score for each collected (costs added CPU); default:false
    bool doMaxScore = 2; //Compute the max score across all hits (costs added CPU); default: false
    SortFields fields = 3; //List of Fields to sort on.
}

/* Fields to sort on either during index time or search time*/
message SortFields {
    repeated SortType sortedFields = 1;
}

/* "The field to sort on. Pass <code>docid</code> for index order and <code>score</code> for relevance sort. */
message SortType {
    string fieldName = 1; // name of field to sort
    Selector selector = 2; // For multi valued fields, how to select which value is used for sorting
    Point origin = 3; // For distance sort, the point that we measure distance from
    /* Whether missing values should sort last instead of first.
    Note that this runs \"before\" reverse, so if you sort missing first and reverse=true then missing values will
    be at the end.*/
    bool missingLat = 4;
    // Sort in reverse of the field's natural order
    bool reverse = 5;
    // The unit used for the distance sort. Supported options are m, km and mi, default is m
    string unit = 6;
}

/* For multi valued fields, how to select which value is used for sorting */
enum Selector {
    MIN = 0; // Minimum value
    MAX = 1; // Maximum value
    MIDDLE_MIN = 2; // Middle value of the set; if there are an even number of values, the lower of the middle two is chosen
    MIDDLE_MAX = 3; // Middle value of the set; if there are an even number of values, the upper of the middle two is chosen
}

message TotalHits {
    /** How the {TotalHits#value} should be interpreted. */
    enum Relation {
        /* The total hit count is equal to {@link TotalHits#value}. */
        EQUAL_TO = 0;
        /* The total hit count is greater than or equal to {@link TotalHits#value}. */
        GREATER_THAN_OR_EQUAL_TO = 1;
    }
    Relation relation = 1;
    /** The value of the total hit count. Must be interpreted in the context of * {#relation}.*/
    int64 value = 2;
}

/* Point representation */
message Point {
    double latitude = 1; // Latitude of the point
    double longitude = 2; // Longitude of the point
}

message SearchResponse {
    message Diagnostics {
        // Query debug has been moved to ProfileResult
        string parsedQuery = 1 [deprecated = true];
        string rewrittenQuery = 2 [deprecated = true];
        string drillDownQuery = 3 [deprecated = true];
        double firstPassSearchTimeMs = 4;
        double highlightTimeMs = 5;
        double getFieldsTimeMs = 6;
        double newSnapshotSearcherOpenMs = 7;
        double nrtWaitTimeMs = 8;
        map<string, double> facetTimeMs = 9;
        double rescoreTimeMs = 10;
        map<string, double> rescorersTimeMs = 11;
        map<string, Diagnostics> innerHitsDiagnostics = 12;
    }

    message Hit {
        message FieldValue {
            oneof FieldValues {
                string textValue = 1; // Value for ATOM and TEXT  FieldType
                bool booleanValue = 2; // Value for BOOLEAN FieldType
                int32 intValue = 3; // Value for INT FieldType
                int64 longValue = 4; // Value for LONG and DATE_TIME (as milliseconds since epoch in UTC zone) FieldType
                float floatValue = 5; // Value for FLOAT FieldType
                double doubleValue = 6; // Value for DOUBLE FieldType
                google.type.LatLng latLngValue = 7; // Value for LAT_LON FieldType
                google.protobuf.Struct structValue = 8; // Value for structured data
                // Value for VECTOR FieldType
                Vector vectorValue = 9;
            }

            message Vector {
                repeated float value = 1;
            }

        }

        message CompositeFieldValue {
            repeated FieldValue fieldValue = 3;
        }

        message Highlights {
            // Highlighted text fragments
            repeated string fragments = 1;
        }

        int32 luceneDocId = 1;
        double score = 2;
        map<string, CompositeFieldValue> fields = 3; // Field name to value
        map<string, CompositeFieldValue> sortedFields = 4; // Sorted field name to value
        // Field name to highlighted text fragments
        map<string, Highlights> highlights = 5;
        // Lucene explanation of the hit
        string explain = 6;
        // InnerHits for each hit
        map<string, HitsResult> innerHits = 7;
    }

    message SearchState {
        int64 timestamp = 1;
        int64 searcherVersion = 2;
        int32 lastDocId = 3;
        repeated string lastFieldValues = 4;
        float lastScore = 5;
    }

    Diagnostics diagnostics = 1;
    bool hitTimeout = 2; // Set to true if search times out and a degraded response is returned
    TotalHits totalHits = 3;
    repeated Hit hits = 4;
    SearchState searchState = 5;
    repeated FacetResult facetResult = 6; ////Counts or aggregates for a single dimension
    // Detailed stats returned when profile=true in request
    ProfileResult profileResult = 7;
    // Results from any additional document collectors
    map<string, CollectorResult> collectorResults = 8;
    // If this query hit the terminateAfter threshold specified in the request
    bool terminatedEarly = 9;
}

message NumericRangeType {
    string label = 1; //Label for this range
    int64 min = 2; //Min value for the range
    bool minInclusive = 3; //True if the min value is inclusive
    int64 max = 4; //Max value for the range
    bool maxInclusive = 5; //True if the max value is inclusive
}

message Facet {
    string dim = 1; //Dimension (field)
    repeated string paths = 2; //Prefix path to facet 'under'
    repeated NumericRangeType numericRange = 3; //Custom numeric ranges.  Field must be indexed with facet=numericRange.
    bool useOrdsCache = 4; // True if the ordinals cache should be used
    repeated string labels = 5; // Specific facet labels to retrieve
    int32 topN = 6; //How many top facets to return
    Script script = 7; //FacetScript definition to use in place of index facet
    int32 sampleTopDocs = 8; //Facet over the top N ranked documents, instead of all hits. Only works with field doc values.
    string name = 9; //Name for this facet
}


message FacetResult {
    string dim = 1; //Dimension that was requested
    repeated string path = 2; //Path whose children were requested.
    double value = 3; //Total value for this path (sum of all child counts, or sum of all child values), even those not included in the topN.
    repeated LabelAndValue labelValues = 4; // Child counts.
    int64 childCount = 5; //How many child labels were encountered.
    string name = 6; //Name for this facet
}

message LabelAndValue {
    string label = 1; //Facet's label.
    double value = 2; // Value associated with this label.
}

message FetchTask {
    string name = 1; //Name of task, as registered by a FetchTaskPlugin
    google.protobuf.Struct params = 2; //Optional task parameters
}

// Defines an entry point for using a rescorer from plugin
message PluginRescorer {
    string name = 1;
    google.protobuf.Struct params = 2; // arguments passed to the plugin
}

// Defines a rescorer which uses query to rescore documents in the second pass
message QueryRescorer {
    Query rescoreQuery = 1;
    double queryWeight = 2;
    double rescoreQueryWeight = 3;
}

// Defines a rescorer which is executed after the first search pass
message Rescorer {
    int32 windowSize = 1;
    oneof Rescorers {
        QueryRescorer queryRescorer = 2;
        PluginRescorer pluginRescorer = 3;
    }
    // Must be unique for each Rescorer
    string name = 4;
}

// Defines detailed profiling stats for queries that set profile=true
message ProfileResult {
    message AdditionalCollectorStats {
        // Sum of all collection time
        double collectTimeMs = 1;
    }

    message CollectorStats {
        // If collection for this index slice was terminated early, such as by a timeout.
        bool terminated = 1;
        repeated SegmentStats segmentStats = 2;
        // Total docs collected by this collector
        int32 totalCollectedCount = 3;
        // Sum of all segment collection time
        double totalCollectTimeMs = 4;
        // Stats for additional collection operations
        map<string, AdditionalCollectorStats> additionalCollectorStats = 5;
    }

    message SegmentStats {
        // Total docs in segment
        int32 maxDoc = 1;
        // Total live docs in segment
        int32 numDocs = 2;
        // How many docs were collected
        int32 collectedCount = 3;
        // Start time of segment processing in relation to the start of the search phase
        double relativeStartTimeMs = 4;
        // Collection duration
        double collectTimeMs = 5;
    }

    message SearchStats {
        // Total time for all document collection
        double totalCollectTimeMs = 1;
        // Total time to reduce results from all parallel search slices
        double totalReduceTimeMs = 2;
        repeated CollectorStats collectorStats = 3;
    }

    SearchStats searchStats = 1;
    string parsedQuery = 2;
    string rewrittenQuery = 3;
    string drillDownQuery = 4;
}

//Definition of additional document collector.
message Collector {
    oneof Collectors {
        //Collector for aggregating based on term values.
        TermsCollector terms = 1;
        PluginCollector pluginCollector = 2;
        //Collector for getting top hits based on score or sorting.
        TopHitsCollector topHitsCollector = 4;
        //Collector that filters documents to nested collectors
        FilterCollector filter = 5;
        //Collector for finding a max double value from collected documents.
        MaxCollector max = 6;
    }
    //Nested collectors that define sub-aggregations per bucket, supported by bucket based collectors.
    map<string, Collector> nestedCollectors = 3;
}

// Defines an entry point for using a collector from a plugin
message PluginCollector {
    string name = 1;
    google.protobuf.Struct params = 2; // arguments passed to the plugin
}

//Definition of term aggregating collector.
message TermsCollector {
    oneof TermsSource {
        //Use field values for terms.
        string field = 1;
        //Use FacetScript definition to produce terms.
        Script script = 2;
    }
    //Maximum number of top terms to return.
    int32 size = 3;
    //How results Buckets should be ordered, defaults to descending Bucket _count.
    BucketOrder order = 4;
}

//Definition of top hits based collector.
message TopHitsCollector {
    //Offset for retrieval of top hits.
    int32 startHit = 1;
    //Total hits to collect, note that the number of hits returned is (topHits - startHit).
    int32 topHits = 2;
    //When specified, collector does sort based collection. Otherwise, relevance score is used.
    QuerySortField querySort = 3;
    //Which fields to retrieve.
    repeated string retrieveFields = 4;
    // If Lucene explanation should be included in the collector response
    bool explain = 5;
}

//Definition of filtering collector, there must be at least one nested collector specified in the Collector message.
message FilterCollector {
    oneof Filter {
        // Only propagate documents that match the given query.
        Query query = 1;
        // Specialized implementation for set queries, checks if field doc values are in the provided set. This can be useful for large set sizes with lower recall, where building the scorer would be expensive.
        TermInSetQuery setQuery = 2;
    }
}

//Definition of collector to find a max double value over documents. Currently only allows for script based value production.
message MaxCollector {
    oneof ValueSource {
        //Script to produce a double value
        Script script = 1;
    }
}

message CollectorResult {
    oneof CollectorResults {
        //Result of collector that produces buckets and counts.
        BucketResult bucketResult = 1;
        //Flexible collector result for additional document collectors
        google.protobuf.Any anyResult = 2;
        //Result of collector that returns document hits.
        HitsResult hitsResult = 4;
        //Result of collector that filters documents.
        FilterResult filterResult = 5;
        //Result of collector that produces a single double value.
        google.protobuf.DoubleValue doubleResult = 6;
    }
}

//Defines how Buckets should be ordered in BucketResult.
message BucketOrder {
    //Sorting order type
    enum OrderType {
        DESC = 0;
        ASC = 1;
    }
    //What to use for sorting. This can be _count for Bucket count, or the name of a nested collector that supports ordering.
    string key = 1;
    //Sorting order
    OrderType order = 2;
}

message BucketResult {
    message Bucket {
        string key = 1;
        int32 count = 2;
        //Nested collector results for sub-aggregations of this bucket.
        map<string, CollectorResult> nestedCollectorResults = 8;
    }
    repeated Bucket buckets = 1;
    //Number of unique buckets, including those not in the buckets list.
    int32 totalBuckets = 2;
    //Number of other collected counts not represented in the buckets' counts.
    int32 totalOtherCounts = 3;
}

message HitsResult {
    //Total hit information.
    TotalHits totalHits = 3;
    //Ordered hits with scoring/sorting info and retrieved fields.
    repeated SearchResponse.Hit hits = 4;
}

message FilterResult {
    //Number of documents that passed the filter.
    int32 docCount = 1;
    //Results from nested collectors.
    map<string, CollectorResult> nestedCollectorResults = 2;
}

// Specify how to highlight matched text in SearchRequest
message Highlight {

    enum Type {
        // When DEFAULT is set in global setting, use fast vector highlighter; when set for field setting, use the type from the global setting.
        DEFAULT = 0;
        FAST_VECTOR = 1;
        // not supported yet
        PLAIN = 2;
        CUSTOM = 3;
    }

    message Settings {
        // Specify type of highlighter to use. Ignored right now in nrtsearch.
        Type highlighter_type = 1;
        // Used along with post_tags to specify how to wrap the highlighted text.
        repeated string pre_tags = 2;
        // Used along with pre_tags to specify how to wrap the highlighted text.
        repeated string post_tags = 3;
        // Number of characters in highlighted fragment, 100 by default. Set it to be 0 to fetch the entire field.
        google.protobuf.UInt32Value fragment_size = 4;
        // Maximum number of highlight fragments to return, 5 by default. If set to 0 returns entire text as a single fragment ignoring fragment_size.
        google.protobuf.UInt32Value max_number_of_fragments = 5;
        // Specify a query here if highlighting is desired against a different query than the search query.
        Query highlight_query = 6;
        // Set to true to highlight fields only if specified in the search query.
        google.protobuf.BoolValue field_match = 7;
        // Sorts highlighted fragments by score when set to true. By default, fragments will be output in the order they appear in the field. (Default is true)
        google.protobuf.BoolValue score_ordered = 8;
        // Select Fragmenter between span (default) and simple. This is only applicable for plain highlighters.
        google.protobuf.StringValue fragmenter = 9;
        // Let the fragment builder respect the multivalue fields. Each fragment won't cross multiple value fields if set true. (Default is false)
        google.protobuf.BoolValue discrete_multivalue = 10;
        // When highlighter_type is CUSTOM, use this string identifier to specify the highlighter. It is ignored for any other highlighter_types.
        string custom_highlighter_name = 11;
        // Optional Custom parameters for custom highlighters. If a field overriding is present, the global setting will be omitted for this field, and no merge will happen.
        google.protobuf.Struct custom_highlighter_params = 12;
        // Define the boundary decision when creating fragments. Options are "simple" (default in fast vector highlighter), "word" or "sentence".
        google.protobuf.StringValue  boundary_scanner = 13;
        // Terminating chars when using "simple" boundary_scanner. The default is ".,!? \t\n".
        google.protobuf.StringValue  boundary_chars = 14;
        // Number of chars to scan before finding the boundary_chars if using "simple" boundary scanner; If "boundary_chars" is not found after max scan, fragments will start/end at the original place. Default is 20.
        google.protobuf.UInt32Value  boundary_max_scan = 15;
        // Locale used in boundary scanner when using "word" or "sentence" boundary_scanner. Examples: "en-US", "ch-ZH".
        google.protobuf.StringValue  boundary_scanner_locale = 16;
    }

    // Highlight settings
    Settings settings = 1;
    // Fields to highlight
    repeated string fields = 2;
    // Map of field name to highlight settings for field, overrides request level highlight settings
    map<string, Settings> field_settings = 3;
}
