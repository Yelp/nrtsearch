/* Description of message types for search request and response */
syntax = "proto3";

import "google/type/latlng.proto";

option java_multiple_files = true;
option java_package = "org.apache.platypus.server.grpc";
option java_outer_classname = "SearchResponseProto";
option objc_class_prefix = "HLW";

package luceneserver;


// A clause in a BooleanQuery.
message BooleanClause {
    // Defines how clauses may occur in matching documents.
    enum Occur {
        MUST = 0;
        FILTER = 1;
        SHOULD = 2;
        MUST_NOT = 3;
    }

    Query query = 1; // The Query for the clause.
    Occur occur = 2; // Specifies how this clause must occur in a matching document.
}

// A query that matches documents using boolean combinations of other queries.
message BooleanQuery {
    repeated BooleanClause clauses = 1; // Clauses for a boolean query.
    int32 minimumNumberShouldMatch = 2; // Minimum number of optional clauses that must match.
}

// A Query that matches documents containing a particular sequence of terms.
message PhraseQuery {
    /* Edit distance between respective positions of terms as defined in this PhraseQuery and the positions
       of terms in a document.
    */
    int32 slop = 1;
    string field = 2; // The field in the index that this query applies to.
    repeated string terms = 3; // Terms to match.
}

// Defines different types of QueryNodes.
enum QueryType {
    NONE = 0;
    BOOLEAN_QUERY = 1;
    PHRASE_QUERY = 2;
}

// Defines a full query consisting of a QueryNode which may be one of several types.
message Query {
    QueryType queryType = 1; // Type of the QueryNode

    oneof QueryNode {
        BooleanQuery booleanQuery = 2;
        PhraseQuery phraseQuery = 3;
    }
}

message SearchRequest {
    string indexName = 1; //index to search against
    int32 startHit = 2; // Which hit to start from (for pagination); default: 0
    int32 topHits = 3; // How many top hits to retrieve; default: 10
    /* Maximum number of seconds spent on each collection phase; note that for
     * multi-pass searches (e.g. query-time grouping), this timeout applies to each phase. */
    double timeoutSec = 4;
    repeated string retrieveFields = 5; //Which fields to highlight or retrieve.
    string queryText = 6; //Query text to parse using the specified QueryParser.
    repeated VirtualField virtualFielsd = 7; //Defines virtual fields (name'd dynamic expressions) for this query.
    Query query = 8; // Full query to execute using QueryNodes
    QuerySortField querySort = 9; //Sort hits by field (default is by relevance).
    oneof Searcher {
        int64 indexGen = 10; //Search a generation previously returned by an indexing operation such as #addDocument.  Use this to search a non-committed (near-real-time) view of the index.
        int64 version = 11; //Search a specific searcher version.  This is typically used by follow-on searches (e.g., user clicks next page, drills down, or changes sort, etc.) to get the same searcher used by the original search.
        string snapshot = 12; //Search a snapshot previously created with #createSnapshot
    }
    int32 totalHitsThreshold = 13; //By default we count hits accurately up to 1000. This makes sure that we don't spend most time on computing hit counts

}

/* Virtual field used during search */
message VirtualField {
    string expression = 1; // JavaScript expression defining this field's values.
    string name = 2; // Virtual field's name. Must be different from registered fields and any other virtual fields.
}

message QuerySortField {
    bool doDocScores = 1; //Compute the doc score for each collected (costs added CPU); default:false
    bool doMaxScore = 2; //Compute the max score across all hits (costs added CPU); default: false
    SortFields fields = 3; //List of Fields to sort on.
}


/* Fields to sort on either during index time or search time*/
message SortFields {
    repeated SortType sortedFields = 1;
}


/* "The field to sort on. Pass <code>docid</code> for index order and <code>score</code> for relevance sort. */
message SortType {
    string fieldName = 1; // name of field to sort
    Selector selector = 2; // For multi valued fields, how to select which value is used for sorting
    Point origin = 3; // For distance sort, the point that we measure distance from
    /* Whether missing values should sort last instead of first.
    Note that this runs \"before\" reverse, so if you sort missing first and reverse=true then missing values will
    be at the end.*/
    bool missingLat = 4;
    // Sort in reverse of the field's natural order
    bool reverse = 5;
}



/* For multi valued fields, how to select which value is used for sorting */
enum Selector {
    MIN = 0; // Minimum value
    MAX = 1; // Maximum value
    MIDDLE_MIN = 2; // Middle value of the set; if there are an even number of values, the lower of the middle two is chosen
    MIDDLE_MAX = 3; // Middle value of the set; if there are an even number of values, the upper of the middle two is chosen
}

/* Point representation */
message Point {
    double latitude = 1; // Latitude of the point
    double longitude = 2; // Longitude of the point
}

message SearchResponse {
    message Diagnostics {
        string parsedQuery = 1;
        string rewrittenQuery = 2;
        string drillDownQuery = 3;
        double firstPassSearchTimeMs = 4;
        double highlightTimeMs = 5;
        double getFieldsTimeMs = 6;
        double newSnapshotSearcherOpenMs = 7;
        double nrtWaitTimeMs = 8;
    }

    message Hit {
        message FieldValue {
            oneof FieldValues {
                string textValue = 1; // Value for ATOM, TEXT and DATE_TIME FieldType
                bool booleanValue = 2; // Value for BOOLEAN FieldType
                int32 intValue = 3; // Value for INT FieldType
                int64 longValue = 4; // Value for LONG FieldType
                float floatValue = 5; // Value for FLOAT FieldType
                double doubleValue = 6; // Value for DOUBLE FieldType
                google.type.LatLng latLngValue = 7; // Value for LAT_LON FieldType
            }
        }

        message CompositeFieldValue {
            repeated FieldValue fieldValue = 3;
        }

        int32 luceneDocId = 1;
        double score = 2;
        map<string, CompositeFieldValue> fields = 3;
    }

    message SearchState {
        int64 timestamp = 1;
        int64 searcherVersion = 2;
        int32 lastDocId = 3;
        repeated string lastFieldValues = 4;
        float lastScore = 5;
    }

    Diagnostics diagnostics = 1;
    bool hitTimeout = 2;
    int64 totalHits = 3;
    repeated Hit hits = 4;
    SearchState searchState = 5;
    string response = 10; //search response; TODO: remove this completely (highlight and sort fields)
}