diff --git a/build.gradle b/build.gradle
index f9e59e8..5ff9fee 100644
--- a/build.gradle
+++ b/build.gradle
@@ -31,7 +31,7 @@ System.setProperty("org.gradle.internal.publish.checksums.insecure", "True")
 
 def luceneVersion = '8.4.0'
 project.ext.slf4jVersion = '2.0.0-alpha1'
-project.ext.grpcVersion = '1.40.0'
+project.ext.grpcVersion = '1.38.0'
 project.ext.mockitoVersion = '2.25.1'
 def log4jVersion = '2.14.1'
 def disruptorVersion = '3.2.1'
@@ -51,7 +51,6 @@ dependencies {
     //prometheus (metrics) deps
     implementation "io.prometheus:simpleclient_servlet:${prometheusClientVersion}"
     implementation "io.prometheus:simpleclient_hotspot:${prometheusClientVersion}"
-    implementation "io.grpc:grpc-netty-shaded:${rootProject.grpcVersion}"
 
     //logging deps
     implementation "org.slf4j:slf4j-api:${project.ext.slf4jVersion}"
@@ -97,7 +96,6 @@ dependencies {
 
     // gRPC deps
     implementation "io.grpc:grpc-services:${project.ext.grpcVersion}"
-    implementation "io.grpc:grpc-okhttp:${project.ext.grpcVersion}"
 
     testImplementation "junit:junit:4.12"
     testImplementation "org.mockito:mockito-core:${project.ext.mockitoVersion}"
diff --git a/src/main/java/com/yelp/nrtsearch/server/config/LuceneServerConfiguration.java b/src/main/java/com/yelp/nrtsearch/server/config/LuceneServerConfiguration.java
index 33f141e..7be14c1 100644
--- a/src/main/java/com/yelp/nrtsearch/server/config/LuceneServerConfiguration.java
+++ b/src/main/java/com/yelp/nrtsearch/server/config/LuceneServerConfiguration.java
@@ -49,7 +49,6 @@ public class LuceneServerConfiguration {
   private static final double[] DEFAULT_METRICS_BUCKETS =
       new double[] {.005, .01, .025, .05, .075, .1, .25, .5, .75, 1, 2.5, 5, 7.5, 10};
   private static final int DEFAULT_INTERVAL_MS = 1000 * 10;
-  private static final int DEFAULT_MAX_CONCURRENT_CALLS_REPLICATION = -1;
   private static final List<String> DEFAULT_PLUGINS = Collections.emptyList();
   private static final Path DEFAULT_PLUGIN_SEARCH_PATH =
       Paths.get(DEFAULT_USER_DIR.toString(), "plugins");
@@ -58,7 +57,6 @@ public class LuceneServerConfiguration {
   private final int port;
   private final int replicationPort;
   private final int replicaReplicationPortPingInterval;
-  private final int maxConcurrentCallsPerConnectionForReplication;
   private final String nodeName;
   private final String hostName;
   private final String stateDir;
@@ -92,10 +90,6 @@ public class LuceneServerConfiguration {
     replicationPort = configReader.getInteger("replicationPort", DEFAULT_REPLICATION_PORT);
     replicaReplicationPortPingInterval =
         configReader.getInteger("replicaReplicationPortPingInterval", DEFAULT_INTERVAL_MS);
-    maxConcurrentCallsPerConnectionForReplication =
-        configReader.getInteger(
-            "maxConcurrentCallsPerConnectionForReplication",
-            DEFAULT_MAX_CONCURRENT_CALLS_REPLICATION);
     nodeName = configReader.getString("nodeName", DEFAULT_NODE_NAME);
     hostName = substituteEnvVariables(configReader.getString("hostName", DEFAULT_HOSTNAME));
     stateDir = configReader.getString("stateDir", DEFAULT_STATE_DIR.toString());
@@ -147,10 +141,6 @@ public class LuceneServerConfiguration {
     return replicationPort;
   }
 
-  public int getMaxConcurrentCallsPerConnectionForReplication() {
-    return maxConcurrentCallsPerConnectionForReplication;
-  }
-
   public String getNodeName() {
     return nodeName;
   }
diff --git a/src/main/java/com/yelp/nrtsearch/server/grpc/LuceneServer.java b/src/main/java/com/yelp/nrtsearch/server/grpc/LuceneServer.java
index be00d8e..63ace09 100644
--- a/src/main/java/com/yelp/nrtsearch/server/grpc/LuceneServer.java
+++ b/src/main/java/com/yelp/nrtsearch/server/grpc/LuceneServer.java
@@ -88,7 +88,6 @@ import io.grpc.Server;
 import io.grpc.ServerBuilder;
 import io.grpc.ServerInterceptors;
 import io.grpc.Status;
-import io.grpc.netty.shaded.io.grpc.netty.NettyServerBuilder;
 import io.grpc.protobuf.services.ProtoReflectionService;
 import io.grpc.stub.StreamObserver;
 import io.prometheus.client.CollectorRegistry;
@@ -104,7 +103,6 @@ import java.util.concurrent.Callable;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.Future;
 import java.util.concurrent.RejectedExecutionException;
-import java.util.concurrent.ThreadLocalRandom;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.stream.Collectors;
 import org.apache.lucene.search.IndexSearcher;
@@ -188,32 +186,17 @@ public class LuceneServer {
     logger.info(
         "Server started, listening on " + luceneServerConfiguration.getPort() + " for messages");
 
-    if (luceneServerConfiguration.getMaxConcurrentCallsPerConnectionForReplication() != -1) {
-      replicationServer =
-          NettyServerBuilder.forPort(luceneServerConfiguration.getReplicationPort())
-              .addService(new ReplicationServerImpl(globalState))
-              .executor(
-                  ThreadPoolExecutorFactory.getThreadPoolExecutor(
-                      ThreadPoolExecutorFactory.ExecutorType.REPLICATIONSERVER,
-                      luceneServerConfiguration.getThreadPoolConfiguration()))
-              .maxInboundMessageSize(MAX_MESSAGE_BYTES_SIZE)
-              .maxConcurrentCallsPerConnection(
-                  luceneServerConfiguration.getMaxConcurrentCallsPerConnectionForReplication())
-              .build()
-              .start();
-    } else {
-      replicationServer =
-          ServerBuilder.forPort(luceneServerConfiguration.getReplicationPort())
-              .addService(new ReplicationServerImpl(globalState))
-              .executor(
-                  ThreadPoolExecutorFactory.getThreadPoolExecutor(
-                      ThreadPoolExecutorFactory.ExecutorType.REPLICATIONSERVER,
-                      luceneServerConfiguration.getThreadPoolConfiguration()))
-              .maxInboundMessageSize(MAX_MESSAGE_BYTES_SIZE)
-              .build()
-              .start();
-    }
-
+    /* The port on which the replication server should run */
+    replicationServer =
+        ServerBuilder.forPort(luceneServerConfiguration.getReplicationPort())
+            .addService(new ReplicationServerImpl(globalState))
+            .executor(
+                ThreadPoolExecutorFactory.getThreadPoolExecutor(
+                    ThreadPoolExecutorFactory.ExecutorType.REPLICATIONSERVER,
+                    luceneServerConfiguration.getThreadPoolConfiguration()))
+            .maxInboundMessageSize(MAX_MESSAGE_BYTES_SIZE)
+            .build()
+            .start();
     logger.info(
         "Server started, listening on "
             + luceneServerConfiguration.getReplicationPort()
@@ -1740,6 +1723,7 @@ public class LuceneServer {
           byte[] buffer = new byte[1024 * 64];
           long totalRead;
           totalRead = pos;
+          Random random = new Random();
           while (totalRead < len) {
             int chunkSize = (int) Math.min(buffer.length, (len - totalRead));
             luceneFile.readBytes(buffer, 0, chunkSize);
@@ -1750,7 +1734,7 @@ public class LuceneServer {
             rawFileChunkStreamObserver.onNext(rawFileChunk);
             totalRead += chunkSize;
             if (globalState.configuration.getFileSendDelay()) {
-              randomDelay(ThreadLocalRandom.current());
+              randomDelay(random);
             }
           }
           // EOF
diff --git a/src/main/java/com/yelp/nrtsearch/server/grpc/ReplicationServerClient.java b/src/main/java/com/yelp/nrtsearch/server/grpc/ReplicationServerClient.java
index 27b2643..40b8581 100644
--- a/src/main/java/com/yelp/nrtsearch/server/grpc/ReplicationServerClient.java
+++ b/src/main/java/com/yelp/nrtsearch/server/grpc/ReplicationServerClient.java
@@ -17,7 +17,7 @@ package com.yelp.nrtsearch.server.grpc;
 
 import com.google.protobuf.GeneratedMessageV3;
 import io.grpc.ManagedChannel;
-import io.grpc.okhttp.OkHttpChannelBuilder;
+import io.grpc.ManagedChannelBuilder;
 import java.io.Closeable;
 import java.util.Iterator;
 import java.util.Map;
@@ -49,7 +49,7 @@ public class ReplicationServerClient implements Closeable {
   /** Construct client connecting to ReplicationServer server at {@code host:port}. */
   public ReplicationServerClient(String host, int port) {
     this(
-        OkHttpChannelBuilder.forAddress(host, port)
+        ManagedChannelBuilder.forAddress(host, port)
             // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid
             // needing certificates.
             .usePlaintext()
diff --git a/src/main/java/com/yelp/nrtsearch/server/luceneserver/IndexState.java b/src/main/java/com/yelp/nrtsearch/server/luceneserver/IndexState.java
index 0916d36..9e9e480 100644
--- a/src/main/java/com/yelp/nrtsearch/server/luceneserver/IndexState.java
+++ b/src/main/java/com/yelp/nrtsearch/server/luceneserver/IndexState.java
@@ -1210,7 +1210,6 @@ public class IndexState implements Closeable, Restorable {
     IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);
     iwc.setOpenMode(openMode);
     if (globalState.configuration.getIndexVerbose()) {
-      logger.info("Enabling verbose logging for Lucene NRT");
       iwc.setInfoStream(new PrintStreamInfoStream(System.out));
     }
 
