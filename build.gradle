plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
    id 'maven-publish'
    id 'signing'
    id "com.diffplug.spotless" version "6.22.0"
    id 'java-library'
    id 'jacoco'
    // Build docs locally by running "site" command
    id 'kr.motd.sphinx' version '2.10.1'
}

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/repos/central/data/"
    }
    mavenLocal()
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

allprojects {
    version = '1.0.0-alpha.1'
    group = 'com.yelp.nrtsearch'
}

def _artifactId = 'server'

//This is for https://github.com/gradle/gradle/issues/11308
System.setProperty("org.gradle.internal.publish.checksums.insecure", "True")

def luceneVersion = '9.11.1'
project.ext.slf4jVersion = '2.0.16'
project.ext.grpcVersion = '1.66.0'
project.ext.lz4Version = '1.8.0'
project.ext.mockitoVersion = '5.12.0'
project.ext.jacksonYamlVersion = '2.17.2'
project.ext.junitVersion = '4.13.2'
def log4jVersion = '2.23.1'
def disruptorVersion = '4.0.0'
def gsonVersion = '2.11.0'
def snakeYamlVersion = '2.2'
def spatial4jVersion = '0.8'
def s3mockVersion = '0.2.6'
def commonsCompressVersion = '1.27.0'
def awsJavaSdkVersion = '1.12.768'
def guiceVersion = '7.0.0'
def prometheusClientVersion = '0.16.0'
def fastutilVersion = '8.5.14'

dependencies {

    //prometheus (metrics) deps
    implementation "io.prometheus:simpleclient_servlet:${prometheusClientVersion}"
    implementation "io.prometheus:simpleclient_hotspot:${prometheusClientVersion}"
    implementation "io.grpc:grpc-netty-shaded:${rootProject.grpcVersion}"

    //logging deps
    implementation "org.slf4j:slf4j-api:${project.ext.slf4jVersion}"
    implementation "org.apache.logging.log4j:log4j-slf4j2-impl:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
    implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
    implementation "com.lmax:disruptor:${disruptorVersion}"


    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation 'commons-io:commons-io:2.16.1'
    implementation "org.yaml:snakeyaml:${snakeYamlVersion}"
    implementation "org.apache.commons:commons-compress:${commonsCompressVersion}"
    implementation "com.amazonaws:aws-java-sdk-core:${awsJavaSdkVersion}"
    implementation "com.amazonaws:aws-java-sdk-s3:${awsJavaSdkVersion}"
    runtimeOnly "com.amazonaws:aws-java-sdk-sts:${awsJavaSdkVersion}"
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:4.0.2"
    implementation "com.google.inject:guice:${guiceVersion}"
    implementation "org.lz4:lz4-java:${project.ext.lz4Version}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${project.ext.jacksonYamlVersion}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${project.ext.jacksonYamlVersion}"

    //lucene deps
    implementation "org.apache.lucene:lucene-core:${luceneVersion}"
    implementation "org.apache.lucene:lucene-codecs:${luceneVersion}"
    implementation "org.apache.lucene:lucene-backward-codecs:${luceneVersion}"
    implementation "org.apache.lucene:lucene-queries:${luceneVersion}"
    implementation "org.apache.lucene:lucene-facet:${luceneVersion}"
    implementation "org.apache.lucene:lucene-replicator:${luceneVersion}"
    implementation "org.apache.lucene:lucene-analysis-common:${luceneVersion}"
    implementation "org.apache.lucene:lucene-suggest:${luceneVersion}"
    implementation "org.apache.lucene:lucene-expressions:${luceneVersion}"
    implementation "org.apache.lucene:lucene-queries:${luceneVersion}"
    implementation "org.apache.lucene:lucene-queryparser:${luceneVersion}"
    implementation "org.apache.lucene:lucene-highlighter:${luceneVersion}"
    implementation "org.apache.lucene:lucene-grouping:${luceneVersion}"
    implementation "org.apache.lucene:lucene-queries:${luceneVersion}"
    implementation "org.apache.lucene:lucene-join:${luceneVersion}"

    //cli deps
    implementation 'info.picocli:picocli:4.7.6'
    implementation 'org.apache.commons:commons-csv:1.11.0'

    // gRPC deps
    implementation "io.grpc:grpc-services:${project.ext.grpcVersion}"

    implementation "it.unimi.dsi:fastutil:${fastutilVersion}"

    testImplementation "junit:junit:${project.ext.junitVersion}"
    testImplementation "io.grpc:grpc-testing:${rootProject.grpcVersion}"
    testImplementation "io.grpc:grpc-inprocess:${rootProject.grpcVersion}"
    testImplementation "org.mockito:mockito-core:${project.ext.mockitoVersion}"
    testImplementation "org.apache.lucene:lucene-test-framework:${luceneVersion}"
    testImplementation "org.locationtech.spatial4j:spatial4j:${spatial4jVersion}"
    testImplementation "io.findify:s3mock_2.13:${s3mockVersion}"

    testImplementation "org.assertj:assertj-core:3.26.3"

    api project(':clientlib')
}

startScripts.enabled = false

task luceneServer(type: CreateStartScripts) {
    mainClass = 'com.yelp.nrtsearch.server.grpc.LuceneServer'
    applicationName = 'lucene-server'
    outputDir = new File(project.buildDir, 'tmp-app')
    classpath = startScripts.classpath
    // Add additional dependencies, e.g. custom loggers
    classpath += files('$APP_HOME/additional_libs')
}

task luceneServerClient(type: CreateStartScripts) {
    mainClass = 'com.yelp.nrtsearch.tools.cli.LuceneClientCommand'
    applicationName = 'lucene-client'
    outputDir = new File(project.buildDir, 'tmp-app')
    classpath = startScripts.classpath
}

task nrtUtils(type: CreateStartScripts) {
    mainClass = 'com.yelp.nrtsearch.tools.nrt_utils.NrtUtilsCommand'
    applicationName = 'nrt_utils'
    outputDir = new File(project.buildDir, 'tmp-app')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(luceneServer)
    from(luceneServerClient)
    from(nrtUtils)
    fileMode = 0755
}

task buildGrpcGateway(dependsOn: installDist, type: Exec) {
    workingDir = '.'
    executable = 'bash'
    args = ['-c', './build_grpc_gateway.sh']
}

//Dynamic exclude through property defined in the build.gradle file
//e.g. to include perfTests: ./gradlew test -PincludePerfTests=true
//e.g. default is to exclude perfTests: ./gradlew test
test {
    finalizedBy 'spotlessJavaCheck'
    // Used by LuceneServerConfigurationTest
    environment(Map.of('CUSTOM_HOST', 'my_custom_host', 'VAR1', 'v1', 'VAR2', 'v2', 'VAR3', 'v3'))
    if (project.hasProperty('longRunningTestsOnly')) {
        include '**/IncrementalDataCleanupCommandTest.class'
    } else {
        if (!project.hasProperty('includePerfTests')) {
            exclude '**/YelpReviewsTest.class'
            exclude '**/MergeBehaviorTests.class'
            exclude '**/IncrementalDataCleanupCommandTest.class'
            filter {
                excludeTestsMatching '*.NodeNameResolverAndLoadBalancingTests.testSimpleLoadBalancingAsync'
            }
        }
    }
    systemProperties System.properties
    testLogging {
        events "failed"
        exceptionFormat "full"
        showStackTraces true
        //showStandardStreams = true
    }
}

jacocoTestReport {
    reports {
        csv.required = true
    }
}

task javadocs(type: Javadoc) {
    source = sourceSets.main.java.srcDirs
}

task javadocsJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadocs.destinationDir
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.java.srcDirs
}

task testsJar(type: Jar) {
    archiveClassifier = 'tests'
    from sourceSets.test.output
}

signing {
    if (project.hasProperty("signing.keyId")) {
        sign publishing.publications
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = _artifactId
            version = project.version
            artifact tasks.jar
            artifact tasks.javadocsJar
            artifact tasks.sourcesJar
            artifact tasks.testsJar
            pom {
                name = 'nrtSearch Server'
                description = 'GRPC lucene server using near-real-time replication'
                url = 'https://github.com/Yelp/nrtsearch'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    // Adding all developers in alphabetical order
                    developer {
                        id = 'alok'
                        name = 'Alok Mysore'
                        email = 'alok@yelp.com'
                    }
                    developer {
                        id = 'erikyang'
                        name = 'Erik Yang'
                        email = 'erikyang@yelp.com'
                    }
                    developer {
                        id = 'karthik'
                        name = 'Karthik Alle'
                        email = 'karthik@yelp.com'
                    }
                    developer {
                        id = 'sarthakn'
                        name = 'Sarthak Nandi'
                        email = 'sarthakn@yelp.com'
                    }
                    developer {
                        id = 'umesh'
                        name = 'Umesh Dangat'
                        email = 'umesh@yelp.com'
                    }
                }

                // Links to nrtSearch github
                scm {
                    connection = 'scm:git:git://github.com/Yelp/nrtsearch.git'
                    developerConnection = 'scm:git:ssh://github.com/Yelp/nrtsearch.git'
                    url = 'https://github.com/Yelp/nrtsearch'
                }
            }
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
    repositories {
        mavenCentral {
            if (project.hasProperty("signing.keyId")) {
                credentials {
                    // The credentials are picked up from your gradle.properties file
                    username ossrhUsername
                    password ossrhPassword
                }
            }

            def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

spotless {
    java {
        licenseHeaderFile 'license_header'
        removeUnusedImports()
        endWithNewline()
        trimTrailingWhitespace()
        googleJavaFormat()
    }
}

sphinx {
    sourceDirectory = "${projectDir}/docs"
    outputDirectory = "${project.buildDir}/docs"
    // Remove if not using OS X. This is required on non-Intel macs since aarch-64 build is not available.
    binaryUrl       = 'https://github.com/trustin/sphinx-binary/releases/download/v0.8.2/sphinx.osx-x86_64'
}

// Inject properties file containing the project version into resources.
// Used to get version info at runtime.
task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}
